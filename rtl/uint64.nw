% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% l2h substitution C C--
% l2h substitution PAL C--
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
% l2h substitution asdl ASDL
% l2h substitution ocaml OCaml
% l2h substitution forall forall

% ------------------------------------------------------------------ 
\section{UInt64 -- unsigned operations on \texttt{int64}}
% ------------------------------------------------------------------ 

This module provides unsigned operations on {\ocaml} [[int64]] values
and some conversions. The operations just add a new interpretation to
values of type [[int64]] but no new type is introduced.

% ------------------------------------------------------------------ 
\subsection{Interface}
% ------------------------------------------------------------------ 

Values of [[int64]] can be converted into [[float]] values by
re-interpreting the bit patterns of the [[int64]] value. This is a much
different operation than provided by the [[Int64]] module which
converts between [[float]] and [[int64]] by maintaining the numerical
value. This conversion maintains the bit patters and thus relates two
very different numerical values.

Primitive functions, called \textit{external}, are implemented in C,
\textit{internal} functions use them and are implemented in {\ocaml}. 
<<uint64.mli>>=
<<external functions>>
<<internal functions>>
@
The [[Cast]] module provides two different packagings of the identity
function.
Function [[Cast.float64]] takes a 64-bit floating-point value and
returns the same bits as a 64-bit integer.
Function [[Cast.float32]] takes a 64-bit floating-point value,
converts it to a 32-bit floating-point value, and returns those bits
in the least significant 32~bits of a 64-bit integer.
<<uint64.mli>>=
module Cast : sig
 external float64 :   float -> int64 = "uint64_float64"
 external float32 :   float -> int64 = "uint64_float32"
end
@
The function [[of_int]] copies an [[int]] bitwise into an [[int64]]
value; unlike [[Int64.of_int]] no sign-extension is performed.
<<external functions>>=
(* external of_int:     int   -> int64                  = "uint64_i2i" *)
@
The following arithmetical operations consider their arguments and
return values as unsigned integers. Otherwise they implement the
behavior of the corresponding functions in the [[Int64]] module.
<<external functions>>=
external cmp:        int64 -> int64 -> int           = "uint64_compare"
external add:        int64 -> int64 -> int64         = "uint64_add"
external sub:        int64 -> int64 -> int64         = "uint64_sub"
external mul:        int64 -> int64 -> int64         = "uint64_mul"
external div:        int64 -> int64 -> int64         = "uint64_div"
external modu:       int64 -> int64 -> int64         = "uint64_mod"
@
The [[of_string]] function parses a string into a [[int64]] value. 
Unlike the corresponding function from [[Int64]] it uses the highest
result bit as well and thus considers the result as an unsigned
integer. Also unlike [[Int64.of_string]], it considers a number to be
in octal notation, when it starts with a [[0]],
and for a decimal number, it accepts a trailing [[u]] or [[U]].
\begin{quote}
    \begin{tabular}{ll}
        Prefix         & encoding \\
        \hline
        [[0x]], [[0X]] & hexadecimal \\
        [[0o]], [[0O]] & octal       \\
        [[0b]], [[0B]] & binary      \\
        [[0]]          & octal       \\
        else           & decimal     \\
    \end{tabular}
\end{quote}
This function raises [[Failure]] with either [["overflow"]] or [["syntax"]].
<<external functions>>=
external of_string:  string -> int64                 = "uint64_of_string"
@
Unsigned comparison of [[int64]] values.
<<internal functions>>=
val eq:              int64 -> int64 -> bool     (* equal         *)
val lt:              int64 -> int64 -> bool     (* less than     *)
val gt:              int64 -> int64 -> bool     (* greather than *)
val le:              int64 -> int64 -> bool     (* less equal    *)
val ge:              int64 -> int64 -> bool     (* greater equal *)
@
Shift operations for unsigned [[int64]] values.
<<internal functions>>=
val shl:             int -> int64 -> int64      (* shift left  *)
val shr:             int -> int64 -> int64      (* shift right *)
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

The implementation is imostly done in C like the implementation of
[[Int64]].  It simply provides some additional operations in the same
style as the [[Int64]] implementation. 
<<uint64.ml>>=
module I = Int64
<<external functions>>
module Cast = struct
 external float64 :   float -> int64 = "uint64_float64"
 external float32 :   float -> int64 = "uint64_float32"
end
@
Comparison functions are implemented with the help of the [[cmp]]
primitive. 
<<uint64.ml>>=
let eq  x y =    (cmp x y) = 0
let lt  x y =    (cmp x y) < 0
let gt  x y =    (cmp x y) > 0
let le  x y =    (lt x y) || (eq x y)
let ge  x y =    (gt x y) || (eq x y)

let le  x y =    not (gt x y)
let ge  x y =    not (lt x y)
@
The shift operations can be taken from the [[Int64]] module because
they are the same for signed and unsigned values.  This applies to
many other operations as well.
<<uint64.ml>>=
let shl n x =    I.shift_left x n
let shr n x =    I.shift_right_logical x n  
@

% ------------------------------------------------------------------ 
\subsection{C implementation of the primitives}
% ------------------------------------------------------------------ 
<<uint64p.c>>=
#include <caml/fail.h>
#include <caml/mlvalues.h>
#include <caml/alloc.h>
#include <caml/config.h>
@
Unsigned comparison of [[int64]] values; this implements the
(mathematical) sign function of the difference of the two values. 
<<uint64p.c>>=
value uint64_compare(value v1, value v2)
{
    uint64 i1 = Int64_val(v1);
    uint64 i2 = Int64_val(v2);
    return i1 == i2 ? Val_int(0) : i1 < i2 ? Val_int(-1) : Val_int(1);
}
@
Bitwise conversion of a [[float]] to a [[int64]].
<<uint64p.c>>=
value uint64_float64(value f)
{
    union { double d; int64 i; } buffer;
    buffer.d = Double_val(f);
    return copy_int64(buffer.i);
}

value uint64_float32(value f)
{
    union { float f; unsigned n; } buffer;
    int64 i;
    buffer.f = (float) Double_val(f);
    i = (int64) buffer.n;
    return copy_int64(i);
}

@
Bitwise conversion of a [[int64]] value to to [[float]].
<<uint64p.c>>=
value uint64_i2f(value i)
{
    union { double d; int64 i; } buffer;
    buffer.i = Int64_val(i);
    return copy_double(buffer.d);
}
@
The following function is a quick hack and not portable to 64 bit
architectures.  It converts an [[int]] value bitwise into an [[int64]]
value. 
<<uint64p.c>>=
value uint64_i2i(value i)
{
    union { int32 i[2]; int64 j; } buffer;
    
    buffer.i[0] = Int_val(i);
    buffer.i[1] = 0;

    return copy_int64(buffer.j);
}
@
Implementation of unsigned arithmetic operators.
<<uint64p.c>>=
value uint64_add(value v1, value v2)  /* ML */
{ return copy_int64((uint64)Int64_val(v1) + (uint64)Int64_val(v2)); }

value uint64_sub(value v1, value v2)  /* ML */
{ return copy_int64((uint64)Int64_val(v1) - (uint64)Int64_val(v2)); }

value uint64_mul(value v1, value v2)  /* ML */
{ return copy_int64((uint64)Int64_val(v1) * (uint64)Int64_val(v2)); }
@ 
<<uint64p.c>>=
value uint64_div(value v1, value v2)  /* ML */
{
    int64 divisor = Int64_val(v2);
    if (divisor == 0) raise_zero_divide();
    return copy_int64((uint64)Int64_val(v1) / (uint64)divisor);
}

value uint64_mod(value v1, value v2)  /* ML */
{
    int64 divisor = Int64_val(v2);
    if (divisor == 0) raise_zero_divide();
    return copy_int64((uint64)Int64_val(v1) % (uint64)divisor);
}
@
Some more code stolen from the {\ocaml} implementation because it is
declared [[static]] there such that we can't access it.
[[parse_digit]] returns the value of a digit in its string
representation. 
<<uint64p.c>>=
static int parse_digit(char * p)
{
    int c = *p;
    if (c >= '0' && c <= '9')
        return c - '0';
    else if (c >= 'A' && c <= 'F')
        return c - 'A' + 10;
    else if (c >= 'a' && c <= 'f')
        return c - 'a' + 10;
    else
        return -1;
}
@
A string number contains its radix implicitly. This function sets the
[[base]] accordingly and returns an advanced [[p]] such that a header
like [[0x]] is skipped. 
<<uint64p.c>>=
static char* parse_base (char *p, int *base)
{
    *base = 10;
    if (*p == '0') {
        switch (p[1]) {
        case 'x': case 'X':
            *base = 16; return p + 2;
        case 'o': case 'O':
            *base =  8; return p + 2; 
        case 'b': case 'B':
            *base =  2; return p + 2; 
        default:
            *base =  8; return p;
        }
    } else {
        return p;
    }
}
@
Convert a string to an unsigned [[int64]] value.  In case of syntax
errors or overflow, raise [[Failure]].  
<<uint64p.c>>=
value uint64_of_string(value s)          /* ML */
{
    uint64 max_uint64 = ~(uint64)0;
    char * p;
    uint64 res, threshold;
    int base, d;

    p = parse_base (String_val(s), &base);
    threshold = max_uint64 / (uint64) base;
    for (res = 0; /*nothing*/; p++) {
        d = parse_digit(p);
        if (d < 0 || d >= base) break;
        /* Detect overflow in multiplication base * res */
        if (threshold < res) caml_failwith("overflow");
        res = res * (uint64)base + (uint64)d;
        /* Detect overflow in addition (base * res) + d */
        if (res < (uint64)d) caml_failwith("overflow");
    }
    if ((base == 10 || (base == 8 && res == 0)) && (*p == 'u' || *p == 'U')) p++;
    if (p != String_val(s) + caml_string_length(s)) failwith("syntax");
    return copy_int64(res);
}
