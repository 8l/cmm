% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% l2h macro module 1 <a href="#$1.html"><tt>#1.nw</tt></a>(<a href="#$1.dvi">.dvi</a>)
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
% l2h macro exfile 1 <a href="#$1"><tt>#1</tt></a>
% l2h macro image 1 <img alt="Dependency graph" src="#1.gif" ALIGN=right></img>

\input{../config/macros.tex}

This module provides a layer between the OCaml [[Pervasives]] types and
types used in dynamic contexts in the QC-- compiler. In the evaluating
instance, the layer is completely transparent (Types are made
public). In the residualizing instance, base types are replaced with the
dynamic type.

I use the [[std_]] prefix to make a better distinction, and also to
avoid a recursive definition (or too many indirections).

\section{Evaluating instance}
<<evaluating types>>=
type std_int = int
type std_bool = bool
type std_string = string
type std_nativeint = nativeint
<<base.mli ((evaluating))>>=
<<evaluating types>>
val of_std_int : std_int -> int
val to_bool    : std_bool -> bool
@ \subsection{Implementation}
<<base.ml ((evaluating))>>=
<<evaluating types>>
let of_std_int x = x
let to_bool x = x
@ 
\section{Residualising instance}

<<base.mli ((residualizing))>>=
<<types>>
@ We cover most of the types in the OCaml [[Pervasives]]. 
<<types>>=
type std_int = Tdpe.dynamic
type std_word = Tdpe.dynamic
type std_bits = Tdpe.dynamic
type std_string = Tdpe.dynamic
type std_bool = Tdpe.dynamic
type std_char = Tdpe.dynamic
type std_unit = Tdpe.dynamic
type std_nativeint = Tdpe.dynamic

@ I should change this at some point into std_nativeint, after I fix the
code generator...
<<base.mli ((residualizing))>>=
val nativeint : std_nativeint Tdpe.rr

val qint : int -> std_int
val qword : int -> std_word
val qbool : bool -> std_bool
val qstring : string -> std_string
val qchar : char -> std_char

val of_std_int : std_int -> int
    
val intEq : std_int -> std_int  -> bool
val wordEq : std_word -> std_word  -> bool
val boolEq : std_bool -> std_bool  -> bool
val stringEq : std_string -> std_string  -> bool
val charEq : std_string -> std_string  -> bool

val eq : std_int -> std_int  -> bool
val lessthan : std_int -> std_int  -> bool

val eqId : std_int -> std_int  -> bool
    
val eqN : std_int -> std_int  -> std_bool
val lessthanN : std_int -> std_int  -> std_bool

val add : std_int -> std_int  -> std_int
val cond : std_bool -> (unit -> 'a)  -> (unit -> 'a) -> 'a

val not : std_bool -> std_bool
val lgand : std_bool -> std_bool -> std_bool

val print_std_int : std_int -> unit
val print_std_char : std_int -> unit
val print_std_word : std_word -> unit

val to_bool : std_bool -> bool

@ \section{Implementation}

<<base.ml ((residualizing))>>=

module S = MachineSyntax
module Sy = Syntax
module T = Tdpe
  
<<types>>

let nativeint = T.a'

exception BTA

let qint x = Sy.INT x
let of_std_int x = raise BTA
let qword x = Sy.INT x
let qbool x = Sy.BOOL x
let qstring s = Sy.STR s
let qchar s = Sy.CHR s

let eq e1 e2 =
  match (e1,e2) with
    (Sy.INT i1,Sy.INT i2) -> i1=i2
  | (Sy.BOOL i1,Sy.BOOL i2) -> i1=i2
  | (Sy.STR i1,Sy.STR i2) -> i1=i2
  | (Sy.CHR i1,Sy.CHR i2) -> i1=i2
(*  | (Sy.VAR x,Sy.VAR y) ->
      if x=y then true
      else T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.boo))) (Sy.VAR "=") e1 e2*)
  | (_,_) -> T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.booNone))) (Sy.VAR "=") e1 e2

let eqId e1 e2 =
  match (e1,e2) with
    (Sy.INT i1,Sy.INT i2) -> i1=i2
  | (Sy.BOOL i1,Sy.BOOL i2) -> i1=i2
  | (Sy.STR i1,Sy.STR i2) -> i1=i2
  | (Sy.CHR i1,Sy.CHR i2) -> i1=i2
  | (Sy.VAR x,Sy.VAR y) ->
      if x=y then true
      else T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.boo))) (Sy.VAR "=") e1 e2
  | (_,_) -> T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.booNone))) (Sy.VAR "=") e1 e2
        
let intEq = eq
let wordEq = eq
let boolEq = eq
let stringEq = eq
let charEq = eq

exception BadTypeError
    
let lessthan e1 e2 =
  match (e1,e2) with
    (Sy.INT i1,Sy.INT i2) -> i1<i2
  | (Sy.BOOL i1,Sy.BOOL i2) -> raise BadTypeError
  | (Sy.STR i1,Sy.STR i2) -> raise BadTypeError
  | (Sy.CHR i1,Sy.CHR i2) -> raise BadTypeError
  | (_,_) -> T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.booNone))) (Sy.VAR "<") e1 e2

let add e1 e2 =
  match (e1,e2) with
    (Sy.INT i1,Sy.INT i2) -> Sy.INT(i1+i2)
  | (Sy.BOOL i1,Sy.BOOL i2) -> raise BadTypeError
  | (Sy.STR i1,Sy.STR i2) -> raise BadTypeError
  | (Sy.CHR i1,Sy.CHR i2) -> raise BadTypeError
  | (_,_) -> T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.a'))) (Sy.VAR "+") e1 e2

let eqN e1 e2 =
  match (e1,e2) with
    (Sy.INT i1,Sy.INT i2) -> Sy.BOOL (i1=i2)
  | (Sy.BOOL i1,Sy.BOOL i2) -> Sy.BOOL (i1=i2)
  | (Sy.STR i1,Sy.STR i2) -> Sy.BOOL (i1=i2)
  | (Sy.CHR i1,Sy.CHR i2) -> Sy.BOOL (i1=i2)
(*  | (Sy.VAR x,Sy.VAR y) ->
      if x=y then
        Sy.BOOL (x=y)  (* here somethign may be fishy *)
      else T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.a'))) (Sy.VAR "=") e1 e2*) 
  | (_,_) -> T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.a'))) (Sy.VAR "=") e1 e2

let lessthanN e1 e2 =
  match (e1,e2) with
    (Sy.INT i1,Sy.INT i2) -> Sy.BOOL (i1<i2)
  | (Sy.BOOL i1,Sy.BOOL i2) -> raise BadTypeError
  | (Sy.STR i1,Sy.STR i2) -> raise BadTypeError
  | (Sy.CHR i1,Sy.CHR i2) -> raise BadTypeError
  | (_,_) -> T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.a'))) (Sy.VAR "<") e1 e2

let cond e f1 f2 =
  match e with
    Sy.BOOL true -> f1()
  | Sy.BOOL false -> f2()
  | _ ->
      if T.nbe' T.boo e
      then f1()
      else f2()
      (*Sy.COND (e,f1(),f2())*)
  
let not e =
  match e with
    (Sy.BOOL x) -> Sy.BOOL (not x)
  | _ -> T.nbe' (T.arrowN(T.a',T.a')) (Sy.VAR "not") e

let print_std_int = S.pprint
let print_std_char = S.pprint
let print_std_word = S.pprint

let to_bool e =
  match e with
    Sy.BOOL true -> true
  | Sy.BOOL false -> false
  | _ -> T.nbe' T.boo e

let lgand e1 e2 =
  match (e1,e2) with
    (Sy.BOOL i1,Sy.BOOL i2) -> Sy.BOOL(i1 && i2)
  | (_,_) -> T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.a'))) (Sy.VAR "&&") e1 e2

@ 
        
