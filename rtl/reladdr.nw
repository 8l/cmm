% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon

% ------------------------------------------------------------------ 
\section{Relocatable Addresses and Assembler Symbols }
% ------------------------------------------------------------------ 

Labels and procedures in a {\PAL} compilation unit become symbols in the
assembler output. The exact representation of a symbol depends on the
assembler at hand. We hide the details behind a class type. Each
assembler provides methods to create symbols that fits it. Relocatable
addresses are constructed from symbols and 64bit integers.  We export
them in a generic representation that a client can transform in whatever
format it needs. To keep the number of dependencies small, we do not
provide client-specific representations of relocatable addresses here.
Both symbols and relocatable addresses escape the assembler that defines
them and they become part of {\rtl}s. For this reason they are factored
out from module \module{asm3} that defines an assembler.

<<reladdr.mli>>=
class type symbol = object
    method text:    string          (* text representation of this *)
end

type t                              (* relocatable address *)
type sign = Pos | Neg

  (* constructors *)
val bits:       int64  -> t
val symbol:     symbol -> t
val add:        t -> t -> t
val sub:        t -> t -> t

  (* observers *)
val expr:       t -> int64 * (sign * symbol) list
val to_string:  t -> string
@ String form has no parentheses and is never empty.  May have a
leading minus but not a leading plus.
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 


<<reladdr.ml>>=
class type symbol = object
    method text:    string          (* text representation of this *)
end

type sign = Pos | Neg

type t = int64 * (sign * symbol) list

let neg = function
    | (Pos, s) -> (Neg, s)
    | (Neg, s) -> (Pos, s)

let bits   b            = (b , [])
let symbol s            = (Int64.zero, [Pos,s])
let add (xb,xs) (yb,ys) = (Int64.add xb yb, xs @ ys)
let sub (xb,xs) (yb,ys) = (Int64.sub xb yb, xs @ List.map neg ys)
let expr t              = t
@
Convert to list of (sign, value) pairs, then strip leading plus as needed.
Empty list is zero.
<<reladdr.ml>>=
let to_string a =
    let (int64,symbols) = expr a in (* get generic representation *)
    let sgn = function Pos -> "+" | Neg -> "-" in
    let cons_string (sign, sym) tail = sgn sign :: sym#mangled_text :: tail in
    let con =
      if int64 = Int64.zero then []
      else if int64 > Int64.zero then ["+"; Int64.to_string int64]
      else [Int64.to_string int64]  in
    let l = List.fold_right cons_string symbols con in
    match l with
    | [] -> "0"
    | "+" :: t -> String.concat "" t
    | _ -> String.concat "" l
