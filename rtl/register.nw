% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon

% ------------------------------------------------------------------ 
\section{Register}
% ------------------------------------------------------------------ 

A [[Register.t]] describes a register-like location.
Such a location includes hardware-registers or temporaries, but not
spill locations.  The distinguishing feature of a register is a fixed
address within its space: the address is an integer rather than a
general expression.

A~[[space]] is identified by a single [[char]], but its representation
includes its aggregation semantics and the width of a single cell in
the space.
The cell width is described by a value of type [[Cell.t]], chosen
because it the [[Cell.t]] handles common arithmetic operations using
shifts instead of multiplies and divides.
Within any single back end, the value of the [[char]] completely
identifies the space and therefore determines the corresponding
aggregation and [[Cell.t]].
This means that a postexpander and recognizer may safely scrutinize
only the [[char]] in order to identify and use the space.
But different back ends may use different aggregations or cell sizes,
so any machine-independent code, such as alias analysis, must look
explicitly to determine cell size and aggregation.

A [[t]] value is an aggregate of cells, so it can represent a register
pair or quad as well as a single register.
The representation includes the target-specific [[space]], 
the address (index) 
within the space of the lowest cell in the aggregate,
and the [[count]] of the number of cells aggregated.
To compute the width of register requires looking at the space to find
the width of a single cell (cf [[Cell.to_width]]);
the function [[Register.width]] is provided for this purpose.

We also define a type [[Register.x]], which is a sum type that may be
either a register or a slice of a register.
This type is useful for performing accurate liveness analysis at the
slice level.

We cannot refer to types in module \module{rtl} because this would
create a cyclic dependency,
<<exported types>>=
type aggregation = 
    | BigEndian
    | LittleEndian
    | Identity
type space = char * aggregation * Cell.t   (* name, byte order, cell size *)
type count = Cell.count = C of int
type width = int
type reg = space * int * count (* Rtl.space, index, number of cells *)
type t = reg
type x = Reg   of t
       | Slice of width * int * t
@
We provide an extended set type.
<<exported types>>=
module type SETX = sig
  include Set.S
  val of_list   : elt list -> t
  val to_string : t -> string    (* elements sep. by commas (no braces) *)
end
@
We can ask the width of a register.
We also provide safe comparisons.
<<register.mli>>=
<<exported types>>
val width   : t -> int
val eq      : t -> t -> bool
val compare : t -> t -> int
@ 
We can also query extended registers.
<<register.mli>>=
val widthx : x -> int
val eqx    : x -> x -> bool
@ 
We have two kinds of sets.
<<register.mli>>=
module SetX: SETX  with type elt = x
module MapX: Map.S with type key = x
module Set:  SETX  with type elt = t
module Map:  Map.S with type key = t
@
Sometimes it is useful to consider only registers; we can promote a type [[x]] to a
type [[t]] by returning the register or the register from which we are taking a slice,
as appropriate.
We can also convert between different types of sets.
<<register.mli>>=
val promote_x     : x -> t
val rset_to_rxset : Set.t  -> SetX.t
val promote_rxset : SetX.t -> Set.t
@
We sometimes need to map a list of registers into a compact set of integers.
[[reg_int_map]] maps a list of $n$ integers into the numbers $[0..n-1]$, in
alphanumeric order (by space, then index).
Additionally, we return the number of registers in the first element of the pair.
<<register.mli>>=
val reg_int_map : t list -> int * int Map.t
@ 
We need to check whether one register contains another.
<<register.mli>>=
val contains : outer:x -> inner:x -> bool
@
Registers are exported to Lua as a new \emph{userdata} type.
<<register.mli>>=
module RT (C : Lua.Lib.CORE) : sig
	val map : t C.V.map
end
@
% ------------------------------------------------------------------ 
\section{Implementation of registers}
% ------------------------------------------------------------------ 

We can't use the built-in [[compare]] because it is not safe to
[[compare]] values of type [[Cell.t]].
In any case,
profiling showed that registers are compared frequently; 
in an earlier version of code that could safely use the polymorphic
[[compare]], 
a monomorphic version improved compile time by over~10\%.
<<register.ml>>=
<<exported types>>
module Compare = struct
    type t = reg 
    let compare (((xs,_,_),xi,C xc):t) (((ys,_,_),yi,C yc):t) =
        let x = comparec xs ys in
        if x <> 0 then x
        else let i = comparei xi yi in if i <> 0 then i 
        else comparei xc yc
    let compare' x y = compare y x

    let compare = try ignore (Sys.getenv "QCREVERSE"); compare' with _ -> compare

(*
    let compare (((xs,_,_),xi,C xc) as x:t) (((ys,_,_),yi,C yc) as y:t) =
      let answer = compare x y in
      let prime = compare y x in
      if prime <> -answer then
        Printf.kprintf Impossible.impossible "$%c[%d:%d] ? $%c[%d:%d] == %d (neg %d)\n" xs xi xc ys yi yc answer prime;
      answer
*)
end
let compare = Compare.compare
let eq r r' = Compare.compare r r' = 0
module CompareX = struct
    type t = x
    let compare x y = match x, y with
    | Slice (w, lsb, r), Slice (w', lsb', r') ->
        let x = comparei w w' in
        if x <> 0 then x
        else
          let x = comparei lsb lsb' in
          if x <> 0 then x
          else Compare.compare r r'
    | Slice _, Reg _  ->  1
    | Reg _, Slice _  -> -1
    | Reg r, Reg r'   -> Compare.compare r r'
end
<<register.ml>>=
module SetX = struct
  module S = Set.Make(CompareX)
  include S
  let of_list l = List.fold_right add l empty
  let to_string s =
    let elt = function
      | Reg ((s,_,_), i, C 1) -> Printf.sprintf "%c%d" s i
      | Reg ((s,_,_), i, C n) -> Printf.sprintf "%c%d:%d" s i n
      | Slice (w, i, ((s,_,_), i', _)) ->
          Printf.sprintf "%c%d@[%d..%d]" s i' i (i + w - 1) in
    String.concat ", " (List.map elt (elements s))
end
module Set = struct
  module S = Set.Make(Compare)
  include S
  let of_list l = List.fold_right add l empty
  let to_string s =
    let elt ((s,_,_), i, C n) =
      if n = 1 then
        Printf.sprintf "%c%d" s i
      else
        Printf.sprintf "%c%d:%d" s i n in
    String.concat ", " (List.map elt (elements s))
end
<<register.ml>>=
module MapX = Map.Make(CompareX)
module Map  = Map.Make(Compare)
@
<<register.ml>>=
let promote_x = function Reg r | Slice (_, _, r) -> r
let rset_to_rxset set = Set.fold (fun r rst -> SetX.add (Reg r) rst) set SetX.empty
let promote_rxset set =
  SetX.fold (fun r rst -> match r with Reg r | Slice (_,_,r) -> Set.add r rst)
            set Set.empty
@
Creating the integer map is rather simple.
<<register.ml>>=
let reg_int_map regs =
  let cmp ((s1,_,_),i1,_) ((s2,_,_),i2,_) =
    match comparec s1 s2 with 0 -> comparei i1 i2 | n -> n in
  let order = List.sort cmp regs in
  (List.fold_left (fun (i,map) r -> (i+1, Map.add r i map)) (0, Map.empty) order)
@
The [[RT]] module creates an embedding/projection pair for registers.
<<register.ml>>=
module RT (C : Lua.Lib.CORE) = struct
    module V = C.V

   let agg =
     V.default Identity
       (V.enum "aggregation"
          ["big", BigEndian; "little", LittleEndian; "identity", Identity]) 

    let embedRegister ((s,a,cell),i,C c) =
      (V.record V.value).V.embed
      [ "space", V.string.V.embed (Char.escaped s)
      ; "agg",   agg.V.embed a
      ; "cellsize", V.int.V.embed (Cell.size cell)
      ; "index", V.int.V.embed i
      ; "width", V.int.V.embed (Cell.to_width cell (C c))
      ; "count", V.int.V.embed c
      ] 

    let projectRegister reg = match reg with
      | V.Table reg ->
          (try
            let field f = V.Table.find reg (V.String f) in
            let s    = String.get (V.string.V.project (field "space")) 0 in
            let cell = Cell.of_size (V.int.V.project (field "cellsize")) in
            let i    = V.int.V.project (field "index") in
            let a    = agg.V.project (field "agg") in
            let c    = match field "count" with
            | V.Nil -> let w = V.int.V.project (field "width") in
                       Cell.to_count cell w
            | cf    -> C (V.int.V.project cf) in
            ((s,a,cell),i,c)
          with V.Projection _ -> raise (V.Projection (V.Table reg, "register")))
      | _ -> raise (V.Projection (reg, "register"))

    let map = {
      V.embed = embedRegister ; V.project = projectRegister;
      V.is = (fun r -> try ignore (projectRegister r); true
                       with V.Projection (_, _) -> false); }
end
@ 
<<Lua code for registers>>=
Register = { }

function Register.create(t)
  if not t.width and not t.count then t.count = 1 end     
  assert(t.space and t.cellsize and t.index)
  assert(t.count > 0)
  t["I am a register"] = 1
  return t
end

function Register.is(r)
  return r["I am a register"]
end

function Register.range(r1, r2)
  assert(Register.is(r1) and Register.is(r2))
  assert(r1.space == r1.space and r1.agg == r2.agg and r1.cellsize == r2.cellsize
        and r1.count == r2.count)
  assert(r1.index <= r2.index)
  local l = { }
  local next = 1
  local i = r1.index
  local space, cellsize, agg, count = r1.space, r1.cellsize, r1.agg, r1.count
  while i <= r2.index do
    l[next] =
      Register.create { space = space, cellsize = cellsize, agg = agg, count = count,
                        index = i }
    i = i + count
    next = next + 1
  end
  return l
end
@ 
<<register.ml>>=
let width ((_, _, ms), _, c) = Cell.to_width ms c
let widthx = function
  | Reg r -> width r
  | Slice (w, _, _) -> w

let rec eqx x x' = match x, x' with
| Reg r, Reg r' -> eq r r'
| Slice (w, lsb, r), Slice (w', lsb', r') -> w = w && lsb = lsb && eq r r'
| Reg _, Slice _ -> false
| Slice _, Reg _ -> false
@ 
If somebody tries to take a slice of a register pair,
we will go to their house and spit in their food.
If nobody does such a bad thing, a slice contains a register if and
only if the slice is the whole register.
<<register.ml>>=
let contains ~outer ~inner = match outer, inner with
| Reg ((s, _, _), i, C c), Reg ((s', _, _), i', C c') ->
    s =<= s' && i' >= i && i' + c' <= i + c
| Reg ((s, _, _), i, C c), Slice (w', lsb', ((s', _, _), i', C c')) ->
    s =<= s' && i' >= i && i' + c' <= i + c
| Slice (w, lsb, ((s, _, _), i, C c)), Reg ((s', _, cell), i', C c') ->
    if c <> 1 then
      Impossible.impossible "slice of register aggregate";
    lsb = 0 && w = Cell.to_width cell (C c') && s =<= s' && i = i' && c = c'
| Slice (w, lsb, ((s, _, _), i, C c)), Slice (w', lsb', ((s', _, _), i', C c')) ->
    if c <> 1 || c' <> 1 then
      Impossible.impossible "slice of register aggregate";
    s =<= s' && i = i' && lsb <= lsb' && lsb+w >= lsb'+w'
