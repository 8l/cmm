.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NOFAKE 1"
.TH NOFAKE 1 "2004-10-26" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
nofake \- simple notangle replacement for the Noweb literate programming tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBnofake\fR [\fB\-R\fR\fIchunk\fR] [\fB\-L\fR[\fIformat\fR]] [\fIfile\fR]
.PP
\&\fBnofake\fR [\fB\-version\fR|\fB\-v\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fINoweb\fR\|(1) is a literate-programming tool like Knuth's \s-1WEB\s0. A noweb file
contains program source code interleaved with documentation. Extracting
the source code for compilation requires \fInotangle\fR\|(1). To allow source
code to be shipped to users not using \fInoweb\fR\|(1), \fBnofake\fR offers the
most commonly used functionality of \fInotangle\fR\|(1) as a simple \fIperl\fR\|(1)
script. Alas, \fBnofake\fR extracts source code from a file in \fInoweb\fR\|(1)
syntax: \fBnofake\fR reads \fIfile\fR and extracts the code chunke named
\&\fIchunk\fR to stdout. If no \fIfile\fR is provided, \fBnofake\fR reads from
stdin, if no \fIchunk\fR is named, \fBnofake\fR extracts the chunk \f(CW\*(C`*\*(C'\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-R\fR\fIchunk\fR" 4
.IX Item "-Rchunk"
Extract chunk \fIchunk\fR (recursively) from the noweb file and write it to
stdout.  Unlike notangle, only one chunk can be extracted per invocation
of \fBnofake\fR.
.IP "\fB\-L\fR[\fIformat\fR]" 4
.IX Item "-L[format]"
\&\fBnofake\fR emits \fIcpp\fR\|(1)\-style \f(CW\*(C`#line\*(C'\fR directives to allow a compiler
emit error messages that refer to \fIfile\fR rather than the extracted
source code directly.  The optional \fIformat\fR allows to provided the
format of the line directive: \f(CW\*(C`\-L'#line %L "%F"%N'\*(C'\fR. In \fIformat\fR \f(CW%F\fR
indicates the name of the source file, \f(CW%L\fR the line number, and \f(CW%N\fR
a newline. The default \f(CW\*(C`#line %L "%F"%N\*(C'\fR is suitable for C compilers.
.SH "SYNTAX OF NOWEB FILES"
.IX Header "SYNTAX OF NOWEB FILES"
The authoritive source for the syntax of noweb files is the \fInoweb\fR\|(1)
documentation. However, here is an example:
.PP
.Vb 2
\&    <<hello.c>>=
\&    <<includes>>
.Ve
.PP
.Vb 5
\&    int main(int argc, char** argv) 
\&    {
\&        <<say hello>>
\&        return 0;
\&    }
.Ve
.PP
.Vb 3
\&    <<say hello>>=
\&    printf("Hello World!\en");
\&    @
.Ve
.PP
.Vb 3
\&    <<includes>>=
\&    #include <stdio.h> /* for printf */
\&    @
.Ve
.PP
A chunk is defined by \f(CW\*(C`<<chunk>>=\*(C'\fR and reaches up to
the next definition or a line starting with \f(CW\*(C`@\*(C'\fR. A chunk can
recursivley refer to other chunks: chunk \f(CW\*(C`hello.c\*(C'\fR refers to
\&\f(CW\*(C`includes\*(C'\fR and \f(CW\*(C`say hello\*(C'\fR. A chunk is referred to by
\&\f(CW\*(C`<<chunk>>\*(C'\fR. To use the \f(CW\*(C`<<\*(C'\fR and \f(CW\*(C`>>\*(C'\fR
character literally in a program, precede them with a \f(CW\*(C`@\*(C'\fR.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
The \fBnofake\fR architecture is much simpler than that of \fInotangle\fR\|(1) and
therefore many things do not work. In particular:
.IP "\(bu" 4
\&\fBnofake\fR accepts the \fB\-R\fR\fIchunk\fR option only once.
.IP "\(bu" 4
Line directives (\f(CW\*(C`#line\*(C'\fR) are indented. In the case of \fIcpp\fR\|(1)\-style
line directives this is still \s-1ANSI/ISO\s0 C conforming but might cause
problems with other directives and older versions of \fIcpp\fR\|(1).
.IP "\(bu" 4
Do not use \f(CW\*(C`@\*(C'\fR in chunk names.
.IP "\(bu" 4
\&\fBnofake\fR does not accept the \fB\-filter\fR \fIcommand\fR option that
\&\fBnotangle\fR uses to filter chunks before they are emitted.
.IP "\(bu" 4
A noweb file must not refer to more than one chunk per line. The
following code is \fInot\fR handled correctly by \fBnofake\fR because the
chunk \f(CW\*(C`*\*(C'\fR contains two chunk references in one line.
.Sp
.Vb 2
\&    <<*>>=
\&    <<one>> <<one>>
.Ve
.Sp
.Vb 3
\&    <<one>>=
\&    one
\&    @
.Ve
.SH "COPYING"
.IX Header "COPYING"
This software is in the public domain.
.PP
\&\s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1PROVIDED\s0 ``\s-1AS\s0 \s-1IS\s0'' \s-1AND\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0
\&\s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0 \s-1ARE\s0
\&\s-1DISCLAIMED\s0.  \s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1SHALL\s0 \s-1THE\s0 \s-1AUTHOR\s0 \s-1AND\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0 \s-1BE\s0
\&\s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0, \s-1INCIDENTAL\s0, \s-1SPECIAL\s0, \s-1EXEMPLARY\s0,
\&\s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 (\s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0,
\&\s-1PROCUREMENT\s0 \s-1OF\s0 \s-1SUBSTITUTE\s0 \s-1GOODS\s0 \s-1OR\s0 \s-1SERVICES\s0; \s-1LOSS\s0 \s-1OF\s0 \s-1USE\s0, \s-1DATA\s0, \s-1OR\s0
\&\s-1PROFITS\s0; \s-1OR\s0 \s-1BUSINESS\s0 \s-1INTERRUPTION\s0) \s-1HOWEVER\s0 \s-1CAUSED\s0 \s-1AND\s0 \s-1ON\s0 \s-1ANY\s0
\&\s-1THEORY\s0 \s-1OF\s0 \s-1LIABILITY\s0, \s-1WHETHER\s0 \s-1IN\s0 \s-1CONTRACT\s0, \s-1STRICT\s0 \s-1LIABILITY\s0, \s-1OR\s0
\&\s-1TORT\s0 (\s-1INCLUDING\s0 \s-1NEGLIGENCE\s0 \s-1OR\s0 \s-1OTHERWISE\s0) \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0
\&\s-1THE\s0 \s-1USE\s0 \s-1OF\s0 \s-1THIS\s0 \s-1SOFTWARE\s0, \s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0
\&\s-1SUCH\s0 \s-1DAMAGE\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian Lindig <lindig@eecs.harard.edu>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fInoweb\fR\|(1), \fInotangle\fR\|(1), \fIperl\fR\|(1), \fIcpp\fR\|(1)
.PP
Norman Ramsey, Literate programming simplified, \s-1IEEE\s0 Software
11(5):97\-105, September 1994.
