
% ------------------------------------------------------------------ 
\section{OCamlerror makes stack traces readable}
% ------------------------------------------------------------------ 

When an {\ocaml} byte code program fails with an assertion, it writes
out a stack trace that includes source code positions.  Up to OCaml 3.06
each position is an integer byte-offset from the start of a source file.
Visiting these positions in an editor is tedious because navigation in
files is best supported by line numbers.  When the source file is the
result of a preprocessing step the relation between the original source
and the positions in the stack trace are even more complicated.  The
[[ocamlerror]] program reads a stack trace from standard input,
translates source code positions into file, line, and column positions,
and writes an annotated stack trace to standard out. 

Since OCaml 3.07 the stack trace format refers to filename, line, and
column directly and thus [[ocamlerror]] is not needed anymore to find
the offending source code positions.

\begin{quote}\small
\begin{verbatim}
$ ./ocamlerror ../src ../lua < trace.txt 
Fatal error: uncaught exception Assert_failure("cfg3.ml", 17778, 17790)
    (cfg3.nw: 1467, column 15)
Raised at unknown location
Called from module Set, character 8365
Called from module Set, character 8360
Called from module Set, character 8360
Called from module Set, character 8360
Called from module Cfg3, character 31510 (cfg3.nw: 785, column 40)
Called from module Astasm, character 4745 (astasm.nw: 238, column 39)
Called from module List, character 1783
Called from module List, character 1783
Called from module Ast3ir, character 30374 (ast3ir.nw: 1168, column 48)
Called from module Luavalue, character 10485 (luavalue.nw: 389, column 35)
Called from module Luainterp, character 3637 (luainterp.nw: 185, column 23)
Called from module Luainterp, character 13688 (luainterp.nw: 466, column 22)
Called from module Luainterp, character 14603 (luainterp.nw: 495, column 23)
Re-raised at module Luainterp, character 14629 (luainterp.nw: 495, column 49)
Called from module Luainterp, character 3637 (luainterp.nw: 185, column 23)
Called from module Luabaselib, character 683 (luabaselib.nw: 83, column 16)
Called from module Luainterp, character 14603 (luainterp.nw: 495, column 23)
Re-raised at module Luainterp, character 14629 (luainterp.nw: 495, column 49)
Called from module Main2, character 3219 (main2.nw: 156, column 49)
Called from module List, character 1783
Called from module Main2, character 4056 (main2.nw: 175, column 31)
Called from module Main2, character 4324 (main2.nw: 190, column 16)
\end{verbatim}
\end{quote}


For the translation of the stack trace [[ocamlerror]] tries to find the
source file of each mentioned module, scans it, and translates the character
position pointing into the module into a file, line, column triple. 
While scanning the file, [[ocamlerror]] honors the C style [[#line]]
directives inserted by preprocessors and thus giving meaningful
results for preprocessed source files.  If [[ocamlerror]] cannot find
the source file of a module, it emits the line from the stack trace as
is.  On the command line [[ocamlerror]] takes a list of directories
that it searches for source files.  If, for example,
[[/usr/local/lib/ocaml]] had been added in the example above,
[[ocamlerror]] would have found the source files for the modules from
the standard library and translated positions within as well.


% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

The implementation relies on the [[Srcmap]] module that provides a
mapping between character offsets and file, line, column triples for a
file. For each source file such a map is built while it is scanned, and
stored in a cache. The map is then used to translate the
character position from the stack trace into the file, line,
column triple.

<<ocamlerror.ml>>=
exception Error of string
let error msg = raise (Error msg)
@  

We try to find a source file along a path of directories. The file is
considered found when it exists and returnded by [[find]] with its full
path.  Otherwise [[find]] returns [[None]].

<<ocamlerror.ml>>=
let find (path: string list) (file:string) =
    let rec loop = function
        | [] -> None
        | dir::dirs ->
            let f = Filename.concat dir file in    
            if Sys.file_exists f then
                Some f 
            else    
                loop dirs
    in            
        loop path
@                
 
To translate a character offset into a file, line, column triple we build
a map for each file that can translate any character position in that
file into the triple. The [[map_of]] function scans a named file and
returns the file's map of type [[Srcmap.map]].
        
<<ocamlerror.ml>>=
let map_of (file:string) =
    let fd          = try open_in file with Sys_error(msg) -> error msg in
    let finally ()  = close_in fd                           in
    let lexbuf      = Lexing.from_channel fd                in
    let map         = Srcmap.mk ()                          in
    let _location lb = Srcmap.location map (Lexing.lexeme_start lb) in
        ( Srcmap.sync map 0 (file,1,1)
        ; let map = Ocamlscan.token lexbuf map in (finally () ; map)
        )
@

Lines in a stack trace either refer to a module, or a file. We have
to know the difference to construct the file name of the source file we
are looking for. The [[trace]] function tries to identify a line from a
stack trace and returns a pair of module/file name and a character
offset within that module/file, or [[None]].
        

<<ocamlerror.ml>>=
type trace = Module of string
           | File   of string
           
let rx0 = Str.regexp ".*\\(at\\|from\\) module \\(.*\\), character \\([0-9]+\\)"   
let rx1 = Str.regexp ".*\\(Assert\\|Match\\)_failure(\"\\(.*\\)\", \\([0-9]+\\)"            
let rx2 = Str.regexp ".*Pc : [0-9]+ *\\(.*\\) char \\([0-9]+\\)"

let trace (line:string) =
    let matched n l = Str.matched_group n l in  
    if Str.string_match rx0 line 0 then
        Some (Module(matched 2 line), int_of_string (matched 3 line))
    else if Str.string_match rx1 line 0 then
        Some (File(matched 2 line), int_of_string (matched 3 line))
    else if Str.string_match rx2 line 0 then
        Some (Module(matched 1 line), int_of_string (matched 2 line))
    else    
        None 
@

A stack trace typically refers to the same file multiple times. To avoid
searching and scanning the same file each time, we cache the map for
each file we have read.

<<ocamlerror.ml>>=
module Cache = Map.Make(struct type t=trace let compare=compare end)
@        

All real work is done in the [[input]] function. We read [[stdin]] line
by line and try to discover references to modules. If no reference can
be found, the line is written to [[stdout]]. If a reference is found, we
first check the cache to find its map to translate the character
position. If the module is not in the cache we have to search its source
file along the [[path]], scan it, cache its map, and translate the
position.

<<ocamlerror.ml>>=
let input (path: string list) =
    let filename m = String.uncapitalize m ^ ".ml" in
    let filepath = function
        | Module x -> find path (filename x)
        | File   x -> find path x in        
    let location trace file line column =
        Printf.printf "%s (%s: %d, column %d)\n" trace file line column in
    try 
        let rec loop cache line = 
            ( match trace line with
            | None        -> print_endline line; loop cache (read_line ())
            | Some(m,pos) -> 
                try
                    let map         = Cache.find m cache      in
                    let (file, l,c) = Srcmap.location map pos in 
                        ( location line file l c
                        ; loop cache (read_line ())
                        )
                with Not_found ->  (* not in cache *)
                    ( match filepath m with
                    | None   -> print_endline line; loop cache (read_line())
                    | Some p -> (* found src file, scan and cache it *)
                        let map         = map_of p in
                        let cache       = Cache.add m map cache in
                        let (file, l,c) = Srcmap.location map pos in 
                        ( location line file l c
                        ; loop cache (read_line ())
                        )
                    )    
             )        
        in loop Cache.empty (read_line ())    
    with        
        End_of_file -> ()
@           

The [[main]] function takes the search path from the command line and
calls [[input]]. The actual directory ``[[.]]'' is always part of the
search path. However, it is the last element such that the user can
override it easily.
           
<<ocamlerror.ml>>=
let main () =
    let argv     = Array.to_list Sys.argv in
    let args     = List.tl argv in
        input (args@["."]); exit 0
        
let _ = try main () with e -> 
        ( Printf.eprintf "%s\n" (Printexc.to_string e)
        ; Printf.eprintf "Exit with exit code 1\n"
        ; exit 1
        )
@
        
% ------------------------------------------------------------------ 
\section{Scanning Source Files}
% ------------------------------------------------------------------ 

To translate a character position in a file into a meaningful triple
of filename, line number, and column we build a map for each file, that
associates character offsets with these triples. The scanner recognizes
any non-linearity in the source file, like preprocessor-directives and
newlines and puts synchronization points into the map. Later the map can
be used to ask for the triple of any character position in the file.


<<ocamlscan.mll>>=
{
    exception Error of string
    let error msg = raise (Error msg)

    (* called for *every* newline *)
    let nl lexbuf map =
        let next = (Lexing.lexeme_start lexbuf) + 1     in
            Srcmap.nl map next
        
    let location lexbuf map =
        Srcmap.location map (Lexing.lexeme_start lexbuf)
             let pos_start   = Lexing.lexeme_start


    let get         = Lexing.lexeme
    let getchar     = Lexing.lexeme_char
    let strlen      = String.length

}

let digit       = ['0'-'9']
let nat         = digit+
let alpha       = ['a'-'z' 'A'-'Z']
let misc        = ['.' '_' '$' '@']
let id          = (alpha | misc) (alpha | misc | digit)*
let ws          = [' ' '\012' '\r' '\t']  (* SP FF CR TAB *)
let nl          = '\n'          
@

The [[token]] function scans an entire file and returns its map. At
every newline we call [[nl]] to put a synchronization point into the
map.  We consider lines starting with [[#]] as [[#line]] directives and
call the [[line]] sub-scanner. All other characters are just skipped. A
tab characters is treated like a space because there is no universal tab
width---while they are best avoided in source code anyway. 

<<ocamlscan.mll>>=
rule token = parse
    eof                 { fun map -> map            }
  | nl                  { fun map -> nl lexbuf map ; token lexbuf map }
  | nl ws* '#'          { fun map -> line lexbuf map 0; token lexbuf map }
  | ws* '#'             { fun map -> 
                          if Lexing.lexeme_start lexbuf = 0 then 
                                ( line lexbuf map 0
                                ; token lexbuf map
                                )
                          else
                                error "illegal character" 
                        }
  | [^ '\n']+   { fun map -> token lexbuf map }
  | _           { fun map -> assert false }
@ 
 
The [[line]] scanner scans a [[#line]] pragma and updates the source map
accordingly. The scanner is not very accurate. It looks for a string in
double quotes and takes it as the file name in the pragma, and a number
that it takes it as a line number. 

<<ocamlscan.mll>>=
and line = parse 
    eof                 { fun map l ->
                          error "unterminated line directive" 
                        }
  | ws+                 { fun map l -> line lexbuf map l }
  | '"'                 { fun map l ->
                          let buf      = Buffer.create 80 in
                          let _        = string lexbuf map buf in
                          let file     = Buffer.contents buf in
                          let pos      = Lexing.lexeme_start lexbuf in
                          let location = file, l-1, 1 in
                                ( Srcmap.sync map pos location
                                ; () (* return *)
                                )
                        }
  | nat                 { fun map l -> 
                          
                          (* inline'ing the l' expression caused an
                          int_of_string failure with ocamlopt *)
                  
                          let l' = int_of_string (get lexbuf)
                          in  line lexbuf map l'
                        }
  | id                  { fun map l ->
                          line lexbuf map l
                        }
  | _                   { fun map l -> 
                          error "illegal character in line directive"
                        }
@

The [[string]] scanner scans a string in double quotes and returns it.
No escape mechanism is implemented.

<<ocamlscan.mll>>=
and string = parse
    eof                 { fun map buf -> 
                          error "unterminated string" 
                        }
  | "\""                { fun map buf -> Buffer.contents buf 
                          (* we are done *)
                        }

  | [^ '\000'-'\031'
       '\128'-'\159'
       '"' ]+           { fun map buf ->
                          let s    = get lexbuf              in
                          ( Buffer.add_string buf s
                          ; string lexbuf map buf
                          )
                        }
 | _                    { fun map buf ->
                          error "illegal character in string"
                        }

{ (* epilog *) }                        
@
