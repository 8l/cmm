For [[Cmm_MakeUnwindContinuation]], we need a continuation that
restores the callee-saves 
registers and cuts to the unwind-target.
The precondition here is that the SP points to an array of pointers
to register values.
There is one exception---the slot for the SP holds the SP value
directly, not a pointer to that value.
<<x86cont.s>>=
.globl Cmm_unwindcont_pc
.section .data
__cmm_unwind_pc:
.long 0
.section .text
Cmm_unwindcont_pc:
  movl 0(%esp), %eax  # grab the unwind pc
  movl %eax, __cmm_unwind_pc # move it to a well-known location (not thread-safe!)
  movl 16(%esp), %eax; movl (%eax), %eax  # restore the registers (skipping %esp)
  movl 20(%esp), %ecx; movl (%ecx), %ecx 
  movl 24(%esp), %edx; movl (%edx), %edx 
  movl 28(%esp), %ebx; movl (%ebx), %ebx 
  movl 36(%esp), %ebp; movl (%ebp), %ebp 
  movl 40(%esp), %esi; movl (%esi), %esi 
  movl 44(%esp), %edi; movl (%edi), %edi 
  movl 32(%esp), %esp  # restore %esp
  jmp *__cmm_unwind_pc
@ N.B. The code above is not thread-safe.  The right solution is to
pick a designated register as a scratch register for unwind
continuations.  This register should be used to hold the program
counter.  The compiler should mark the flow edge (from the call site
to the unwind continuation) as killing the scratch register.

