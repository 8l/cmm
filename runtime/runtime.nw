% -*- mode: Noweb; noweb-code-mode: c-mode -*-
% $Id: runtime.nw,v 1.37 2007-08-10 04:18:43 dias Exp $

@
% ---------------------------------------------------------------------------
\section{{\PAL} Run-time Interface}
% ---------------------------------------------------------------------------

This is essentially the interface in the specification, except we
don't provide access to global variables.
<<qc--runtime.h>>=
#ifndef QCMM_RUNTIME_H
#define QCMM_RUNTIME_H

<<machine-dependent macro definitions for the public interface>>

<<data structures>>
<<exposed private data structures>>
<<public functions>>
<<exposed private functions>>
#endif /* QCMM_RUNTIME_H */
@
The definitions of the basic {\PAL}  types are public.
<<data structures>>=
typedef unsigned  Cmm_Word;
typedef void*     Cmm_Dataptr;
typedef void    (*Cmm_Codeptr)();
@ 
The layouts of continuations and activations are considered private.
<<data structures>>=
typedef struct cmm_cont Cmm_Cont;
typedef struct cmm_activation Cmm_Activation;
@  Because
we wish for a client to be able to allocate an activation on the
stack as a local variable, the representation  of an activation is
actually exposed below.
It is nevertheless an \emph{unchecked} run-time error to depend in any
way on the definition of [[struct cmm_activation]].
Similarly, accidents of implemention require us to
 expose [[struct cmm_cont]], but again, it is an \emph{unchecked}
 run-time error to depend in any way on its definition.
@ 
We provide a function to help debug the run-time system.
<<public functions>>=
extern void Cmm_show_activation(const Cmm_Activation *a); /* for debugging */
@ 
Functions for walking the stack.
<<public functions>>=
Cmm_Activation Cmm_YoungestActivation (const Cmm_Cont *t);
int            Cmm_isOldestActivation (const Cmm_Activation *a);
Cmm_Activation Cmm_NextActivation     (const Cmm_Activation *a);
int            Cmm_ChangeActivation   (Cmm_Activation *a);
Cmm_Cont*      Cmm_MakeUnwindCont     (Cmm_Activation *a, Cmm_Word index, ...);
<<public functions>>=
Cmm_Dataptr Cmm_GetDescriptor(const Cmm_Activation *a, Cmm_Word token);
@ 
Functions for finding local variables.
<<public functions>>=
void      Cmm_LocalVarWritten  (const Cmm_Activation *a, unsigned n);
unsigned  Cmm_LocalVarCount    (const Cmm_Activation *a);
void*     Cmm_FindLocalVar     (const Cmm_Activation *a, unsigned n);
void*     Cmm_FindDeadLocalVar (const Cmm_Activation *a, unsigned n);
void*     Cmm_FindStackLabel   (const Cmm_Activation *a, unsigned n);
@ 
Convenience.
<<public functions>>=
void      Cmm_CutTo            (const Cmm_Cont *k);
@ 
Thread creation.
<<public functions>>=
Cmm_Cont* Cmm_CreateThread     (Cmm_Codeptr f, Cmm_Dataptr x, void *s, unsigned n);
void Cmm_Yield (Cmm_Cont *k, Cmm_Cont *kold);
@ 
These functions are currently unimplemented.
<<unimplemented public functions>>=
void*     Cmm_FindGlobalVar    (int n);
@ 
\section{Implementation}

First, the machine-dependent register information.
<<machine-dependent macro definitions for the public interface ((x86-linux))>>=
#define NUM_REGS 12
<<machine-dependent macro definitions for the implementation ((x86-linux))>>=
#define ESP 8 /* r[4] */
#define PC  0 /* c[0] */
<<machine-dependent macro definitions for the public interface ((x86-cygwin))>>=
#define NUM_REGS 12
<<machine-dependent macro definitions for the implementation ((x86-cygwin))>>=
#define ESP 8 /* r[4] */
#define PC  0 /* c[0] */
@ 

% ---------------------------------------------------------------------------
\subsection{Walking the stack}
% ---------------------------------------------------------------------------
This implementation assumes that a {\PAL} thread can only be
suspended at a continuation. Particularly, this means we do not expect
that the runtime system will be entered in response to an interrupt or
some other method that preempts the {\PAL} thread at an arbitrary
point.
(At some future time, it may be worthwhile for the run-time system to
be able to capture a Unix signal context and synthesize a suitable
{\PAL} continuation.)

Walking the stack always begins at a continuation. A {\PAL}
continuation contains the program counter and stack pointer at the
point of return to the continuation. From this an initial virtual
frame pointer (vfp) can be derived. The process of walking the stack
involves computing the vfp of each caller, and tracking the locations
of all saved registers along the way.
@
In order to compute the virtual frame pointer for an activation, the
runtime system needs to know how it relates to the stack pointer at
each call site and 
continuation in the {\PAL} program. 
In addition, the run-time system
needs to know the locations of caller- and callee-saved registers.
Happily, for {\PAL} functions, all of this information is emitted by
the {\PAL} compiler as part of the run-time data. 
For  non-{\PAL} functions, including C~functions, we must rely on the
target-specific ABI to skip over unknown areas of the
stack.\footnote
{If the ABI does not specify the locations in which registers
are saved, we make pessimistic assumptions.}
@
\subsubsection{Stack-walking data structures and internal interfaces}

We dispatch between generic {\PAL} code and target-specific code using
function pointers.
At present, there is only one function pointer, which implements
[[ChangeActivation]]. 
At a future point, to make things more efficient, we may add an
implementation of [[IsOldestActivation]].
<<definitions of private data structures>>=
struct cmm_activation_methods {
  int (*change)(Cmm_Activation *a);
};
@ 
The activation contains a pointer to the method suite, a virtual frame
pointer, and a pointer to the run-time sytem's data.
It also contains a pointer to each machine register; if the value of a
register is not known, the corresponding pointer is [[NULL]].
<<exposed private data structures>>=
<<definition of [[struct cmm_cont]]>>
struct cmm_activation {
  struct cmm_activation_methods *methods;
  char *vfp;   /* declared char* so that arithmetic works on addresses */
  struct cmm_pc_map_entry *rtdata;  
  Cmm_Word* regs[NUM_REGS];
  <<other fields of an activation>>
};
@ In addition to the fields above, an activation also holds a program
counter [[pc]] (used only for debugging), plus space for specialized run-time
system functions.
\begin{itemize} 
\item
For an activation built from a continuation, the [[pc]] is the program
counter of that continuation.
For an activation suspended at a call site, it is the normal return address.
\item 
The space is stored in a union~[[u]]; 
the [[unwind]] field is used by the interface function
[[MakeUnwindContinuation]], and the 
[[cwalk]] field contains a counter that may be useful to some
target-specific stack walkers.
\end{itemize}
<<other fields of an activation>>=
Cmm_Codeptr pc;   /* used only for debugging */
union {  /* following fields are temporary space to avoid allocation */
  struct {
    Cmm_Cont   k;
  } unwind;
  struct {
    unsigned tries;
  } cwalk;
} u;
@
The target-specific stack-walking code must export these two functions:
<<external functions>>=
extern int Cmm_c_change_activation(Cmm_Activation *a);
extern void Cmm_init_c_frame(Cmm_Activation *a, char *young_in_overflow);
@ The function [[Cmm_c_change_activation]] is the 
[[change]] method (i.e., it implements [[ChangeActivation]]) for an
activation suspended at a call site in a 
C~function.
The function [[Cmm_init_c_frame]]
is used to initialize a frame for such an activation.
For such a frame, the [[regs]] field is as accurate as we can make it,
and the [[pc]] field is initialized to the return address.
The [[methods]] and [[rtdata]] fields are initialized appropriately.
The pointer [[young_in_overflow]] points to the young end of the
callee's incoming overflow parameters.
N.B.~in an activation representing a target-specific frame, the
meaning of the [[vfp]] field is target-dependent.
@
The implementations of  [[Cmm_c_change_activation]] and
[[Cmm_init_c_frame]] live in target-specific files---one for each
compiler-machine combination that we support. 
The rest of the stack-walking code lives here, in this file.
@
Here are the methods that are used by the stack walker.
A~pointer to the {\PAL} method suite is exported to target-specific code.
<<definitions of method suites>>=
static int change_nothing(Cmm_Activation *a) { return 0; }
static struct cmm_activation_methods cmm_methods    = { normal_change           };
static struct cmm_activation_methods c_methods      = { Cmm_c_change_activation }; 
static struct cmm_activation_methods oldest_methods = { change_nothing          }; 
struct cmm_activation_methods *Cmm_cmm_frame_methods = &cmm_methods;
@ 
Both generic and target-specific code need to be able to identify a
thread-start frame, because it does 
not actually appear on the (virtual) stack.
<<external functions>>=
int Cmm_is_thread_start_frame(struct cmm_pc_map_entry *rtdata, Cmm_Codeptr pc);
@ 
\subsubsection{Initializing and walking a stack}

The run-time system can begin walking a call stack only at a {\PAL}
continuation. The youngest activation is constructed by looking up the
run-time data associated with the given continuation. 
The initial activation record is returned by value,
which forces the caller to allocate space for it.

Almost every continuation can be dealt with simply by looking up the
appropriate entry in the PC~map.
The exception is a continuation that represents a freshly created
thread.
Such a continuation points to [[Cmm_start_thread_helper]], which is a
procedure, not a call site or a {\PAL} continuation, and therefore is
\emph{not} in the PC~map.
We treat that case specially, as required by the {\PAL}~specification.
There are two bits of magic: methods that treat it as the oldest
activation, and a special, hand-written PC-map entry that makes the
two parameters visible.
<<implementations of public functions>>=
Cmm_Activation Cmm_YoungestActivation(const Cmm_Cont* k) {
  int i;
  Cmm_Activation a;

  if (k->pc == Cmm_start_thread_helper) {
    a.methods = &oldest_methods;
    a.vfp     = (char *)k->sp;
    a.pc      = k->pc;
    if (Cmm_stack_growth > 0)
      a.rtdata = Cmm_thread_start_up_pcmap_entry;
    else
      a.rtdata = Cmm_thread_start_dn_pcmap_entry;
  } else {
    pc_map_entry* entry = Cmm_lookup_entry(k->pc);
    assert(entry);
    a.methods = &cmm_methods;
    a.vfp     = (char *)k->sp - Cmm_as_offset(entry->outalloc);
    a.pc      = k->pc;
    a.rtdata  = entry;
  }
  for (i = 0; i < NUM_REGS; i++)
    a.regs[i] = NULL;
  return a;
}
@ 
The function for walking past a {\PAL} frame is [[normal_change]].
<<declarations of private functions>>=
static int normal_change(Cmm_Activation *a);
@ 
The reasoning required to get from one [[vfp]] to another is slightly
involved.
The key idea is that in the presence of tail calls, the only thing we
can count on is the location of the \emph{deallocation point}.
This point marks the location on the stack below which it is the
callee's responsibility to deallocate, whether on a return or on a
tail call.
The PC-map entry for a call site stores the incoming deallocation point of its
procedure, as well as the outgoing deallocation point of the call
site.
The caller's outgoing point is the callee's incoming point, and by
solving the equation, we can compute the caller's [[vfp]] from the
callee's [[vfp]].
<<private functions>>=
static int normal_change(Cmm_Activation *a) {
  char *vfp;
  pc_map_entry* calleedata, *callerdata;

  assert(a && a->vfp);
  calleedata = a->rtdata;

  vfp = a->vfp;
  a->pc      = *(Cmm_Codeptr*)locptr(a, calleedata->return_addressp);
  update_saved_regs(a, a);
  <<possibly shout about caller's EBP>>
  callerdata = Cmm_lookup_entry(a->pc);
  a->rtdata  = callerdata;

  if (callerdata) {
    if (Cmm_is_thread_start_frame(callerdata, a->pc))
      return 0;
    /* deallocpt = vfp       + calleedata->inalloc
       deallocpt = callervfp + callerdata->outalloc

       therefore callerfvp = vfp + calleedata->inalloc - callerdata->outalloc 
    */
    a->vfp = vfp + Cmm_as_offset(calleedata->inalloc)
                 - Cmm_as_offset(callerdata->outalloc);
  } else {
    a->methods = &c_methods;
    a->rtdata = Cmm_empty_pcmap_entry;
    Cmm_init_c_frame(a, vfp + Cmm_as_offset(calleedata->inalloc));
  }
  return 1;
}
@ 
<<possibly shout about caller's EBP>>=
#define NOISY 0
#if NOISY
  fprintf(stderr, "leaving C-- activation; caller's EBP == 0x%08x\n",
          a->regs[9] ? (unsigned)*a->regs[9] : 0xdeadbeef);
#endif
@ 
\subsubsection{Tracking register contents}

As new activations are created during a walk of the stack, the
locations of saved registers are recorded within the activations. The
locations of all saved registers for an activation can be computed
using information in the pc map table along with the previous
activation.
<<declarations of private functions>>=
void update_saved_regs(Cmm_Activation* new, const Cmm_Activation* prev);
<<private functions>>=
void update_saved_regs(Cmm_Activation* new, const Cmm_Activation* prev) {
  int i;
  int r = prev->rtdata->num_registers;
  struct reg* regs = registers(prev->rtdata);

  for (i = 0; i < NUM_REGS; i++) 
    new->regs[i] = prev->regs[i];
  
  for (i = 0; i < r; i++)
    new->regs[regs[i].index] = (Cmm_Word*)(prev->vfp + Cmm_as_offset(regs[i].saved));
}
@ This code will fail loudly if a register is ever saved in another
register (instead of on the stack).
This is as it should be, since a worse problem would be for the code
to fail silently in the presence of a cycle among registers (e.g.,
register~5 is saved in register~7 and vice versa).
@
\subsubsection{Exported stack-walking functions}

At present, all the exported functions are built on top of the
[[change]] method.
The efficient path is [[ChangeActivation]].
As long as we don't have a very mixed stack, branch-prediction
hardware should do well with the indirect call.
<<implementations of public functions>>=
int Cmm_ChangeActivation(Cmm_Activation *a) {
  return a->methods->change(a);
}
@ 
[[NextActivation]] is not too bad, as most of the copying is
necessary. 
<<implementations of public functions>>=
Cmm_Activation Cmm_NextActivation(const Cmm_Activation *a) {
  Cmm_Activation na = *a;
  int rc = na.methods->change(&na);
  assert(rc);
  return na;
}
@ 
[[isOldestActivation]] is wildly inefficient---in the common case, we
copy the activation, mutate it, and then throw all that work away.
<<implementations of public functions>>=
int Cmm_isOldestActivation(const Cmm_Activation *a) {
  Cmm_Activation na = *a;
  return (!na.methods->change(&na));
}
@ 
\subsection{Unwinding to a continuation}

To unwind to a continuation, we pass an activation to some assembly
code that restores the registers from the contents of the activation.
We do this by synthesizing the continuation [[a->u.unwind.k]], in
which the PC points to the assembly code and the SP points to the
relevant part of the activation.
Although this assembly code is nothing like a C~function, we import it
as such.
<<implementations of public functions>>=
extern void Cmm_unwindcont_pc();  /* assembly code; not a C function */
Cmm_Cont* Cmm_MakeUnwindCont(Cmm_Activation *a, Cmm_Word index, ...) {
  int i;
  struct conts *conts;
  struct contblock *block;

  assert(a->rtdata);
  conts = continuations(a->rtdata);
  if (index >= conts->num_entries)
    die("C-- run-time error: index %d out of bounds in Cmm_MakeUnwindCont", index);
  block = (struct contblock *) ((Cmm_Word *) conts + conts->entries[index]);
  <<write variadic parameters into [[block->vars]]>>

  /* We initialize unknown registers to a bogus (but clearly live) address:
     that of the activation.  Otherwise, assembly code dereferences 0. */
  for (i = 0; i < NUM_REGS; i++)
    if (a->regs[i] == NULL)
      a->regs[i] = (Cmm_Word *)a;

  /* This activation can't be passed into this interface again, so it 
     is safe to overwrite the PC and ESP registers with the values that
     belong to the unwind continuation */

  a->regs[PC]      = (Cmm_Word *) block->pc;
  a->regs[ESP]     = (Cmm_Word *) (a->vfp + Cmm_as_offset(block->sp));
  a->u.unwind.k.pc = Cmm_unwindcont_pc;
  a->u.unwind.k.sp = (Cmm_Word *) a->regs;

  return(&a->u.unwind.k);
}
@ 
This part of the interface is unsafe, but it can't be helped.
<<write variadic parameters into [[block->vars]]>>=
{
  va_list ap;
  va_start(ap, index);
  for (i = 0; i < block->num_vars; i++) {
    <<assign [[block->vars[i]]] from [[ap]]>>
    Cmm_LocalVarWritten(a, block->vars[i].localnum);
  }
  va_end(ap);
}
@
Because passing to a varargs function involves implicit promotions, we
do the promotions that are needed.
The [[L]] argument is the type used internally; the [[R]]~version is
the same type as promoted for passing to a varargs function.
Because somebody might generate code in which a formal parameter of a
continuation is not used, we have to consider the possibility that 
the variable being assigned to is dead.
In that case, we consume the actual parameter but make no assignment.
<<assign [[block->vars[i]]] from [[ap]]>>=
#define ASSIGN(L,R) \
  { L *formalp = (L*) Cmm_FindLocalVar(a, block->vars[i].localnum); \
    R actual   = va_arg(ap, R); \
    if (formalp) *formalp = (L) actual; \
  } 
switch(block->vars[i].ctype) {
  case CHAR:             ASSIGN (char,               int);                break;
  case DOUBLE:           ASSIGN (double,             double);             break;
  case FLOAT:            ASSIGN (float,              double);             break;
  case INT:              ASSIGN (int,                int);                break;
  case LONGDOUBLE:       ASSIGN (long double,        long double);        break;
  case LONGINT:          ASSIGN (long int,           long int);           break;
  case LONGLONGINT:      ASSIGN (long long           int, long long int); break;
  case SHORT:            ASSIGN (short,              int);                break;
  case SIGNEDCHAR:       ASSIGN (signed char,        int);                break;
  case UNSIGNEDCHAR:     ASSIGN (unsigned char,      int);                break;
  case UNSIGNEDLONG:     ASSIGN (unsigned long,      unsigned long);      break;
  case UNSIGNEDSHORT:    ASSIGN (unsigned short,     int);                break;
  case UNSIGNEDINT:      ASSIGN (unsigned int,       unsigned int);       break;
  case UNSIGNEDLONGLONG: ASSIGN (unsigned long long, unsigned long long); break;
  case ADDRESS:          ASSIGN (void *,             void *);             break;
  default: assert(0);
}
@
% ---------------------------------------------------------------------------
\subsection{Span Data}
% ---------------------------------------------------------------------------
For any activation, the client may ask for the innermost enclosing
span associated with a given token. 
The user spans are contained in the
run-time data emitted by the compiler. 
Tokens must be integers greater
than or equal to zero. A table of descriptors is stored in the pc map
entry immediately following the locals data. Using the activation
record, the table of descriptors is looked up, and the appropriate
entry returned.
<<implementations of public functions>>=
Cmm_Dataptr Cmm_GetDescriptor(const Cmm_Activation *a, Cmm_Word token) {
  unsigned num_spans;
  Cmm_Word* descs;
  pc_map_entry* entry = a->rtdata;
  if (!entry)
    return 0;

  num_spans = entry->num_spans;
  if ((unsigned) token < num_spans) {
    descs = spans(entry);
    return (Cmm_Dataptr)descs[token];
  } else {
    return 0;
  }
}
@
% ---------------------------------------------------------------------------
\subsection{Accessing Local Variables}
% ---------------------------------------------------------------------------
Local variables for an activation can can be found either on the
stack, or in registers. The location of parameters is computed using
information generated by the {\PAL} compiler. Each {\PAL} call site
has associated with it the number of locals, and an array containing
information about each local. If a local lives on the stack, an offset
from the frame pointer is given. If a local is in a register, then the
register number is given. The number of registers, and their indexes
are architecture dependent.

In addition to information about locals, each call site has
information about saved registers at the time of the call. If a
register has been saved on the stack, then the offset from the frame
pointer is given. Otherwise, a zero indicates that the register has
not been saved by this activation.
@ 
Clients of the runtime system must report when a local variable is written.
<<implementations of public functions>>=
void Cmm_LocalVarWritten(const Cmm_Activation *a, unsigned n) {
  return;
}
@
Clients of the runtime system can ask for the number of locals for a
given activation. This information is stored in the activation
structure.
<<implementations of public functions>>=
unsigned Cmm_LocalVarCount(const Cmm_Activation *a) {
  assert(a);
  if (a->rtdata)
    return a->rtdata->num_locals;
  else
    return 0;
}
@ 
Local variables are asked for by index. A pointer is returned to the
local by looking it up in the array of locals for this
activation. 
<<implementations of public functions>>=
void* Cmm_FindLocalVar(const Cmm_Activation *a, unsigned n) {
  pc_map_entry* entry = a->rtdata;
  assert(entry);
  if (n >= entry->num_locals)
    die("local var index %d out of range", n);
  return locptr(a, locals(entry)[n]);
}
@
If a location is in a register, a pointer into the saved
register is returned. Otherwise, a pointer into the stack where the
register is saved is returned.
<<declarations of private functions>>=
static Cmm_Word *locptr(const Cmm_Activation *a, location l);
<<private functions>>=
static Cmm_Word *locptr(const Cmm_Activation *a, location l) {
  int reg;
  switch (Cmm_loctype(l)) {
    case REGISTER:
      reg = Cmm_as_register(l);
      assert(a);
      assert(a->regs);
      if (a->regs[reg] == NULL) 
        die("Tried to find a value in an unrecoverable register.\n"
            "Probable cause: calling C without using the \"paranoid C\" convention.");
      return a->regs[reg];
    case DEAD:
      return NULL;
    case OFFSET:
      return (Cmm_Word *)(a->vfp + Cmm_as_offset(l));
    default:
      die("this can't happen --- badly coded location");
      return 0;
  }
}
@ 
In the current implementation it is not possible to find the location
of a dead variable.
<<implementations of public functions>>=
void* Cmm_FindDeadLocalVar(const Cmm_Activation *a, unsigned n) {
  return Cmm_FindLocalVar(a, n);
}
@
Stack data is stored in a table per procedure. Each PC map entry links
to the correct stack data table.
<<implementations of public functions>>=
void* Cmm_FindStackLabel(const Cmm_Activation *a, unsigned n) {
  pc_map_entry* entry = a->rtdata;
  struct sd *sdt = entry->stackdata_table;
  assert(sdt);
  if (n >= sdt->num_entries)
     die("Stack data index %d out of range [0..%d)\n", n, sdt->num_entries);
  return locptr(a, sdt->entries[n]);
}
@ 
\subsection{Run-time functions written in {\PAL}}

Function [[Cmm_CutTo]] is a convenience; it is easy to write in~{\PAL}.
<<cut.c-->>=
target byteorder little;
export Cmm_CutTo;
foreign "C" Cmm_CutTo(bits32 k) {
  cut to k();
}
@ 
<<yield.c-->>=
target byteorder little;
export Cmm_Yield;
foreign "C" Cmm_Yield(bits32 k,bits32 kold) {
  bits32[kold] = bits32[knew];
  bits32[kold+4] = bits32[knew+4];
  cut to k() also cuts to knew also aborts;
  continuation knew(): foreign "C" return ;
}
@ 
\subsection{Threads}

<<external functions>>=
extern void Cmm_start_thread_helper();
extern void Cmm_thread_helper_fence();
extern int Cmm_stack_growth; /* generated by qc-- -globals */
<<implementations of public functions>>=
int Cmm_is_thread_start_frame(struct cmm_pc_map_entry *rtdata, Cmm_Codeptr pc) {
  return spans(rtdata)[0] == 0xeffaced &&
         (unsigned) Cmm_start_thread_helper <= (unsigned) pc &&
         (unsigned) pc <= (unsigned) Cmm_thread_helper_fence;
}
@ Because the run-time system is split across multiple C~files, this
function needs to be exposed---but it is private to the {\PAL}
run-time system, and it is an unchecked run-time error for client code
to call this function.
<<exposed private functions>>=
int Cmm_is_thread_start_frame(struct cmm_pc_map_entry *rtdata, Cmm_Codeptr pc);
<<implementations of public functions>>=
Cmm_Cont* Cmm_CreateThread(Cmm_Codeptr f, Cmm_Dataptr x, void *s, unsigned n) {
  char *stack = s;
  char *young, *old, *vfp;
  Cmm_Cont *k;
  if (Cmm_stack_growth < 0) {
    <<set up stack for growth downward>>
    return k;
  } else {
    <<set up stack for growth upward>>
    return k;
  }
}
@ 
Here is the layout of a thread with a down-going stack:
\begin{center}
\unitlength=15pt
\def\~{\hspace*{15pt}}
\begin{picture}(22,8)(-14,-5)
  \put(-5,1.5){\framebox(13,1.5)[l]{\~[[k->pc = Cmm_start_thread_helper]]}}
  \put(-5,0){\framebox(13,1.5)[l]{\~[[k->sp = vfp]]}}
  \put(-5,-1.5){\framebox(13,1.5)[l]{\~[[x]]}}
  \put(-5,-3.0){\framebox(13,1.5)[l]{\~[[f]]}}
  \put(-5,-2.7){\makebox(0,0)[r]{[[vfp]]\raisebox{0.5ex}{\vector(1,0){1}}}}
  \put(-5,0.3){\makebox(0,0)[r]{result of [[Cmm_CreateThread]]\raisebox{0.5ex}{\vector(1,0){1}}}}
  \put(-5,-4.5){\makebox(13,2.0)[l]{\vrule\hfill$\vdots$\hfill\vrule}}
\end{picture}
\end{center}
I set up the stack pointer to point to the first empty word.
<<set up stack for growth downward>>=
young = stack;
old   = stack + n;
k = (Cmm_Cont *) old;
k--;
k->sp = (Cmm_Word*) (vfp = old - sizeof(*k) - sizeof(f) - sizeof(x));
k->pc = Cmm_start_thread_helper;
*(Cmm_Codeptr*)vfp = f;
vfp += sizeof(f);
*(Cmm_Dataptr*)vfp = x;
<<set up stack for growth upward>>=
old   = stack;
young = stack + n;
k = (Cmm_Cont *) old;
k++;
k->sp = (Cmm_Word*) (vfp = old + sizeof(*k) + sizeof(f) + sizeof(x));
k->pc = Cmm_start_thread_helper;
*(Cmm_Codeptr*)vfp = f;
vfp -= sizeof(f);
*(Cmm_Dataptr*)vfp = x;
@
<<thread.c-->>=
target byteorder little;
export Cmm_start_thread_helper, Cmm_thread_helper_fence;
import write, abort;
section "text" {
  span 0 0xeffaced {
    foreign "C-- thread" Cmm_start_thread_helper(bits32 f, bits32 x) {  
      f(x) also aborts;
      foreign "C" write(2, "address" msg, msg_end - msg);
      foreign "C" abort() never returns;
    }
  }
  Cmm_thread_helper_fence:
}
section "data" {
  msg: bits8[] "fatal C-- error: function passed to Cmm_CreateStack returned!\n";
  msg_end:
}
@ 
<<implementations of public functions>>=
static void show_span(unsigned key, void *value, void *closure) {
  if (value)
    printf("    span %d == %p\n", key, value);
}

void Cmm_show_activation(const Cmm_Activation *a) {
  printf("activation @ %p = {\n", (void*)a);
  printf("  methods = ");
  if (a->methods == Cmm_cmm_frame_methods)
    printf("C-- methods,\n");
  else if (a->methods == &c_methods) 
    printf("C methods,\n");
  else
    printf("unknown methods at %p,\n", (void*)a->methods);
  printf("  vfp = %p, pc = %p,\n", a->vfp, (void *)a->pc);
  <<print registers in activation [[a]]>>
  printf("  entry = {\n");
  Cmm_show_map_entry(a->rtdata, -1, a->pc, show_span, NULL);
  printf("  }\n}\n");
}
<<print registers in activation [[a]]>>=
{ int any, i;
  char *pfx;
  any = 0;
  for (i = 0; i < NUM_REGS; i++)
    if (a->regs[i]) {
      any = 1;
      break;
    }
  if (any) {
    printf("  regs = { ");
    pfx = "";
    for (i = 0; i < NUM_REGS; i++)
      if (a->regs[i]) {
        printf("%sREG %d @ %p", pfx, i, (void*)a->regs[i]);
        pfx = ", ";
      }
    printf(" },\n");
  } else {
    printf("  regs = (no registers recoverable),\n");
  }
}
@
@
<<definition of [[struct cmm_cont]]>>=
struct cmm_cont {
  Cmm_Codeptr pc;
  Cmm_Word*   sp;
};
@ 
\subsection{Putting it together}
<<runtime.c>>=
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include "qc--runtime.h"
#include "pcmap.h"
<<machine-dependent macro definitions for the implementation>>
<<external functions>>
<<definitions of private data structures>>
<<declarations of private functions>>
<<definitions of method suites>>
<<private functions>>
<<implementations of public functions>>
@ 
<<declarations of private functions>>=
static void die(char *msg,...);
<<private functions>>=
static void die(char *msg,...) {   /* see K&R 2nd ed, page 174 */
  va_list args;
  va_start(args,msg);
  fprintf(stderr, "C-- run-time error: ");
  vfprintf(stderr, msg, args);
  fprintf(stderr,"\n");
  va_end(args);
  abort();
}
