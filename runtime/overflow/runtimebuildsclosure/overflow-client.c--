/*
 * Daniel J. Peng
 * overflow-client.c--
 
 * This file shows a client that uses the overflow handler to reinvoke an
 * overflowed function on a new stack.
 *
 * The client must provide:
 *
 * A closure invocation function that takes the closure as an argument
 * and invokes the function using the arguments in the closure.
 *
 * The closure invocation function is also responsible for freeing the
 * new stack/closure.  Unfortunately, since it runs on the new stack, it
 * cannot free it while running; it must delay freeing it somehow.
 * 
 * The return continuation simply takes its arguments and returns it
 * to the caller on the old stack.
 *
 */
target byteorder little;

import bits32 init_overflow;
import bits32 overflowhandler;
import bits32 freestack;

import bits32 printf;
import bits32 free;

export bits32 main;

const SpanArgs = 1;
const SpanRets = 2;
const SpanFP = 3;

section "data" {
  stack_overflowed : bits32[] { 1::bits32 };
  formatstring  : bits8[] { '%'::bits8, 'd'::bits8, '%'::bits8, 'd'::bits8, '\n'::bits8, 0::bits8 };
}

section "text" {

invokeclosure_takes3_returns2(bits32 closure) {
  bits32 x,y, returns_to, f;

  returns_to = bits32[closure];

  f = bits32[closure+4];
  x, y = f(bits32[closure+8],bits32[closure+12],bits32[closure+16]);

  cut to bits32[freestack](closure, k) also cuts to k;
continuation k():
  cut to returns_to(x, y);
}

span SpanArgs 3 {
span SpanRets 2 {
span SpanFP functionthatoverflows {

functionthatoverflows(bits32 a, bits32 b, bits32 c) {
  bits32 k,closure,x,y;

  if (1 == bits32[stack_overflowed]) {
    bits32[stack_overflowed] = 0;
    cut to bits32[overflowhandler](return_from_new_stack, invokeclosure_takes3_returns2, body) also cuts to return_from_new_stack also cuts to body;
  }
  cut to body() also cuts to body;
continuation body():  
  /* function body*/
  x = a+b;
  y = b+c;
  return (x,y);

continuation return_from_new_stack(x, y):
  return(x, y);
}

}}}

main() {
  bits32 x,y;
  
  init_overflow();

  /* Call a function that overflows and printf the results. */
  x,y = functionthatoverflows(1,2,3);
  x = foreign "C" printf(formatstring,x,y);
  return (0);
}

}
