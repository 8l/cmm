\section{Closure Invocation Function}

@
<<invokeclosure.s>>=
.globl invokeclosure

.section .text

# Calling convention.
.set numargs_passed_in_registers, 1

<<definition of the closure structure>>
<<definition of invokeclosure's frame structure>>
<<definition of the continuation structure>>

<<invokeclosure function implementation>>
@
\subsection{Interface}

After a function [[f]] overflows, it cuts to the overflow handler.  The
overflow handler builds a closure representing [[f]] and then calls the closure invocation
function, [[invokeclosure]], on a new stack.  [[invokeclosure]] is responsible
for reinvoking [[f]] from the closure, freeing the new stack, and returning
[[f]]'s return values to [[f]]'s caller on the old stack.

We need a different [[invokeclosure]] for each calling convention.
[[invokeclosure]] must understand how to reinvoke [[f]] given the arguments in
the closure.  It must know how to copy [[f]]'s overflow block back to [[f]]'s
caller on the old stack.  Finally, it must also know what scratch register is
available for it to save and restore machine state.

This implementation of [[invokeclosure]] assumes the {\PAL} calling convention
and that all arguments are 32 bits.

To do all this, [[invokeclosure]] takes a pointer to a closure struct as its
first argument (in [[%eax]]), which contains information beyond simply [[f]]
and its arguments.  I describe this struct next:

@
<<definition of the closure structure>>=
# Offsets within the closure struct.
.set closure_ra_offset, 0
.set closure_sp_offset, 4
.set closure_overflowblock_offset, 8
.set closure_overflowblocksize_offset, 12
.set closure_function_offset, 16
.set closure_numargs_offset, 20
.set closure_numrets_offset, 24
.set closure_body_continuation_offset, 28
.set closure_args_offset, 32
@

Here is an equivalent pseudo-C definition for the closure struct:
\begin{quote}
[[
foreign "C--" void invokeclosure(struct closure c);
struct closure {
  void *ra, *sp;
  void *overflowblock;
  int overflowblocksize;
  void* function;
  int numargs;
  int numrets;
  Cmm_Cont* body;
  bits32 args[0];
}
]]
\end{quote}
\begin{description}
\item[ra and sp] are the program counter and stack
pointer that [[f]] on the old stack would have restored upon return.  [[sp]],
in particular, is [[f]]'s incoming deallocation point.

\item[overflowblock and overflowblocksize] 
describe the overflow block where [[f]] would place its overflow return values
on the old stack.  [[overflowblocksize]] describes its size in words.  For the {\PAL}
calling convention, [[overflowblock]] is the same as [[sp]], but this will differ
for different calling conventions.

\item[function] gives the function pointer for [[f]].

\item[numargs] gives the number of arguments for [[f]].  This is used to
compute the number of overflow arguments that must be copied and passed to [[f]].

\item[numrets] gives the number of return values for [[f]].  This is
presently unused, but it is related to [[overflowblocksize]].

\item[args] is an array of arguments for [[f]].  The length of the array
is given by [[numargs]].

\item[body] is a continuation representing the body of [[f]] after the continuation.  We give [[body]] to the runtime stack-walking interface to extract information about where callee-save registers are stored.
\end{description}
@
\subsection{[[invokeclosure]] function implementation}

<<invokeclosure function implementation>>=
invokeclosure:
	<<Lay out stack.>>

	<<Allocate space for overflow return value block.>>
	<<Allocate and copy overflow argument block out of closure.>>
	<<Copy register argument(s) into registers.>>
	<<Call function.>>
	<<Save machine state.>>
	<<Copy overflow return block back to original stack.>>
	<<Deallocate space for overflow return value block.>>

	/* We've now saved all the state we need, so we can do anything we want. */
	<<Free the stack.>>
	<<Restore callee-save registers from [[f]]'s frame on the old stack.>>

	<<Modify the stored machine state to return to original caller.>>
	<<Restore machine state.>>
	<<Return to original caller.>>
@

We allocate an 11-word frame.  Two words for the completion continuation,
eight words to save the machine state, and one word to save the argument.
See [[definition of invokeclosure's frame structure]] for the actual
frame layout.

Since we need to stack-allocate space for [[f]]'s overflow return
block and its size is only known at runtime, we will need to maintain
a base pointer, [[%ebp]].  Local variables are accessed as positive
offsets to [[%ebp]].

Since we never return, we don't save [[%ebp]] and other callee-save registers
before use.

<<Lay out stack.>>=
        leal -40(%esp), %ebp
	movl %esp, %ebp

	<<Initialize continuations.>>
	<<Save argument to stack.>>
@
<<Initialize continuations.>>=
        leal .Lcompletion_continuation,%ebx
        movl %ebx,(completion_continuation_offset + continuation_pc_offset)(%ebp)
        movl %esp,(completion_continuation_offset + continuation_sp_offset)(%ebp)
@
<<Save argument to stack.>>=
	movl %eax,closure_offset(%ebp)
        movl %eax,%ebx
@
At this point, [[%ebp]] and [[%esp]] are equal, and the stack looks like
[[
---------------
|  Local      |
|  Variables  |
|             |    <------- %ebp, %esp
---------------
]]
In these diagrams, stacks grow downwards, and addresses increase upwards.

We next allocate space for the overflow return block.
<<Allocate space for overflow return value block.>>=
	movl closure_overflowblocksize_offset(%eax), %ecx # overflow block size in words
	shll $2, %ecx
	subl %ecx, %esp
@
Now, the stack looks like this:
[[
---------------
|  Local      |
|  Variables  |
|             |    <------- %ebp
---------------
|             |
| Overflow    |
| Return      |
| Block       |
|             |    <-------- %esp
---------------
]]

We next allocate space for the overflow argument block.
<<Allocate and copy overflow argument block out of closure.>>=

	#  Check if we need overflow argument space.  If not, skip this chunk.
	#  Note that %ecx remains live until the rep movsd instruction; it
	#  contains the count of the number of words to copy.
	movl closure_numargs_offset(%ebx), %ecx
	cmpl $numargs_passed_in_registers, %ecx 
	jl .Ldone_overflow_arguments

	#  Allocate overflow argument space
	subl $numargs_passed_in_registers, %ecx
	movl %ecx, %eax
	shl $2, %eax
	subl %eax, %esp

	# Copy overflow arguments into overflow argument block
	movl %esp, %edi
	leal (closure_args_offset+numargs_passed_in_registers*4)(%ebx), %esi
	cld
	rep movsd
	
.Ldone_overflow_arguments:
@
Now, the stack looks like this:
[[
---------------
|  Local      |
|  Variables  |
|             |    <------- %ebp
---------------
|             |
| Overflow    |
| Return      |
| Block       |
|             |
---------------
|             |
| Overflow    |
| Argument    |
| Block       |
|             |    <-------- %esp
---------------
]]

Next, we put the register argument into [[%eax]].  If the function takes no
arguments, this dereferences [[closure_args_offset(%ebx)]], so make sure this
is valid memory.

<<Copy register argument(s) into registers.>>=
        movl closure_args_offset     (%ebx),%eax
@
Now, we finally call the function:
<<Call function.>>=
        movl closure_function_offset (%ebx),%ebx
        call *%ebx
@
In the {\PAL} calling convention, the callee is responsible for deallocating the overflow argument block.  Hence, the stack now looks like this:
[[
---------------
|  Local      |
|  Variables  |
|             |    <------- %ebp
---------------
|             |
| Overflow    |
| Return      |
| Block       |
|             |    <-------- %esp
---------------
]]

Next, we save the machine state.  We actually only need to save result
registers [[%eax]] and [[%edx]].  We don't need to save callee-save
(nonvolatile) registers because we don't use them, and our caller doesn't need
us to save them because we never return.  We don't need to save volatile
registers because, well, they're volatile.

Here is a table of how the registers are used in the {\PAL} calling convention:

\begin{tabular}{ll}
[[%eax]] & volatile but used in the {\PAL} calling convention for the first result and first argument\\
[[%ebx]] & nonvolatile\\
[[%ecx]] & volatile\\
[[%edx]] & volatile but used in the {\PAL} calling convention for the second result \\
[[%esi]] & nonvolatile \\
[[%edi]] & nonvolatile\\
[[%ebp]] & nonvolatile\\
[[%esp]] & nonvolatile and special \\
\end{tabular}
<<Save machine state.>>=
	movl %eax,(absmem_offset +  0)(%ebp)
#	movl %ecx,(absmem_offset +  4)(%ebp)
	movl %edx,(absmem_offset +  8)(%ebp)
#	movl %ebx,(absmem_offset + 12)(%ebp)
#	movl %ebp,(absmem_offset + 16)(%ebp)
#	movl %esi,(absmem_offset + 20)(%ebp)
#	movl %edi,(absmem_offset + 24)(%ebp)
#	movl %esp,(absmem_offset + 28)(%ebp)
@

<<Copy overflow return block back to original stack.>>=
	movl closure_offset(%ebp), %eax                   # load closure
	movl closure_overflowblock_offset(%eax), %edi     # dst overflow block
	movl %esp, %esi                                   # src overflow block
	movl closure_overflowblocksize_offset(%eax), %ecx # overflow block size
	cld
	rep movsd
@
<<Deallocate space for overflow return value block.>>=
	movl %ebp, %esp
	# This is actually a no-op since the cut to completion_continuation will restore [[%esp]].
@
At this point, [[%ebp]] and [[%esp]] are equal again, and the stack looks like
[[
---------------
|  Local      |
|  Variables  |
|             |    <------- %ebp, %esp
---------------
]]

Now, we're going to [[cut to freestack(closure, completion_continuation) also cuts to completion_continuation]]:
<<Free the stack.>>=
        movl closure_offset(%ebp),%edx                  # argument 1 (closure)
        leal completion_continuation_offset(%ebp), %ebx # argument 2 (k)
        movl freestack,%eax
        movl continuation_sp_offset(%eax), %esp; jmp *(%eax)
.Lcompletion_continuation:
@

Now, this cut away and back kills all callee-save registers; in particular, it kills
[[%ebp]], so we no longer have a base pointer.  But since [[%ebp]] is equal to
[[%esp]] now, anyway, we just use [[%esp]] instead.

Next, we must restore callee-save registers from [[f]]'s frame on the old
stack.  We call a C function to restore these into the saved abstract
machine state.  The signature is:
[[
struct absmem {
  Cmm_Word eax, ecx, edx, ebx, ebp, esi, edi, esp;
};

void get_callee_save_registers(struct absmem* state, Cmm_Cont* body);
]]

<<Restore callee-save registers from [[f]]'s frame on the old stack.>>=
	movl closure_offset(%esp), %eax
        movl closure_body_continuation_offset(%eax), %eax
	leal absmem_offset(%esp), %ecx
	pushl %eax
	pushl %ecx
	call get_callee_save_registers
	add $8, %esp
@

<<Modify the stored machine state to return to original caller.>>=
        movl closure_offset(%esp), %eax         # loads closure
	movl closure_sp_offset(%eax), %ecx      # old SP
	movl %ecx, (absmem_offset+28)(%esp)     # replace new SP

	movl closure_ra_offset(%eax), %ecx # old RA.  we keep this register.
	
<<Restore machine state.>>=
# restore machine state
	movl (absmem_offset +  0)(%esp), %eax
#	movl (absmem_offset +  4)(%esp), %ecx
	movl (absmem_offset +  8)(%esp), %edx
	movl (absmem_offset + 12)(%esp), %ebx
	movl (absmem_offset + 16)(%esp), %ebp
	movl (absmem_offset + 20)(%esp), %esi
	movl (absmem_offset + 24)(%esp), %edi
	movl (absmem_offset + 28)(%esp), %esp

<<Return to original caller.>>=
	jmp *%ecx
@
\subsection{Internal data structure definitions}
<<definition of invokeclosure's frame structure>>=
# Offsets from base pointer %ebp.
.set absmem_offset, 12
.set completion_continuation_offset, 4
.set closure_offset, 0
@
<<definition of the continuation structure>>=
# Offsets within continuations.
.set continuation_pc_offset, 0
.set continuation_sp_offset, 4
@
