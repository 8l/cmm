% l2h substitution cfg CFG
% l2h substitution dots ...
% l2h substitution AST AST
% l2h substitution ast AST
% l2h substitution rtl RTL
% l2h substitution ir IR
% l2h substitution noweb NOWEB
% l2h substitution qcc QC--
% l2h substitution C C--
% l2h substitution PAL C--
% l2h substitution pal C--
% l2h substitution asdl ASDL
% l2h substitution ocaml OCaml
% l2h substitution forall forall
% l2h macro module 1 <a href="#$1.html"><tt>#1.nw</tt></a>

% ------------------------------------------------------------------ 
\section{The {\PAL} Stack Layout}
% ------------------------------------------------------------------ 

This section is a first attempt to explain possible high-level stack
layout for {\PAL} programs at run-time.  {\PAL} itself is independent
of any particular representation of procedure activations at run-time;
for a first design we assume that activations are organized as a
continuous stack that grows from higher to lower addresses.

% ------------------------------------------------------------------ 
\subsection{Overview}
% ------------------------------------------------------------------ 

The building blocks of the run-time stack are \emph{areas}, an
abstraction for a continuous memory block with a known size and an
alignment requirement for its smallest address (c.f.~\module{area}). 
To save memory areas of disjoint live times can be \emph{overlapped}: 
this results in an area that is big and constrained enough to contain
any of the overlapping areas.  Thus, overlapping of areas results in a
hierarchy where the top areas are the biggest and most constrained
ones.

\begin{figure}[bh]
\centerline{\includegraphics{../figures/stack-0}}
\caption{\label{fig:stack:stacklayout} Stack layout for a procedure
         activation of \texttt{f}.}
\end{figure}

The activation record of a procedure consists of two top-level areas: 
the \emph{incoming} area, and the \emph{private} area.  The incoming
area contains parameters passed to the procedure from its caller, but
is also used for returning values to a caller and for parameter
passing to tail-calls.  More precisely, this area is used for
parameters that could not passed in registers and is therefore also
called the \emph{incoming overflow} area.  The private area contains
data that is entirely private to the current procedure, like saved
registers, and user-allocated data on the stack.  The exact size and
alignment requirement is only known to the active procedure and is
computed during its translation at compile-time. 

\begin{itemize}
\item The \emph{incoming} area is the result of overlaying the areas
      \begin{enumerate}
      \item for the procedures formal parameters,
      \item for all return statements in the body of the procedure,
      \item for the actual parameters of [[jump]] statements in the
            body of the procedure,
      \item and for all formal parameters of continuations in the body
            of the procedure. 
      \end{enumerate}
\item The \emph{private} area can be used for any data used by the procedure that
      is not shared with other procedures or continuations.  This
      includes memory to store a return address, user allocated stack
      data, or saved registers.  
\end{itemize}

\begin{quote}\it
    Now that I have basically expelled the \emph{outgoing} area from
    our terminology and since the incoming area is used for passing
    values into and out of a procedure it might be more appropriate to
    call it \emph{parameter} area, or similar. 
\end{quote}

Figure \ref{fig:stack:stacklayout} shows the principle layout of the stack. 
The incoming area is at the old end of the stack, adjacent to the
activation of [[f]]'s caller.  For convenience, the frame-pointer
[[fp]] points to this end.  The space for private data comes next; the
stack pointer points at its young end.  Because the sizes of the
incoming and private areas are known, the active procedure can address
them relative to the stack pointer [[sp]].  However, these sizes are
\emph{only} known to the active procedure which dictates that the
stack pointer has to point at the extreme young of the activation
which is the border to a callee's activations.  It is the obligation
of the callee to advance the stack pointer [[sp]] according to the
size of its incoming and private areas.  This would be impossible if,
for example, [[sp]] pointed at the old end of the private area because
it would require the callee to know the size of its caller's private
area. 

Adjacent to the private area of the caller lies the incoming area of
the callee, which allows to access it from the stack pointer from both
activations without having to know any area sizes.  The procedure
[[f]] places outgoing overflow parameters into this area.  This will
become part of the incoming area of the callee and therefore is
sometimes also called the area for outgoing overflow parameters.  This
is slightly incorrect because the area used for outgoing parameters is
often smaller that the incoming area of the callee.  The exact size is
only known by the callee since only the callee knows the space
requirements for jump statements in its body.  However, the exact size
of the \emph{sub-area} used for overflow parameters of a particular
call, return, or jump \emph{is} known by the caller and the callee: 
its is deduced from the formal and actual parameters in the respective
procedures.  It is the size of the \emph{entire} incoming area that is
only known by the active procedure.

% ------------------------------------------------------------------ 
\subsection{Examples}
% ------------------------------------------------------------------ 
 
The examples in figure \ref{fig:stack:stack-examples} discuss in addition to
the basic case of a call also the return of a procedures, as well as a
jump.  For a better overview the diagrams are reduced in comparison to
figure \ref{fig:stack:stacklayout}.  The focus is on the size of incoming
and private areas versus the space inside of them that is actually
used in a particular situation.  The used space in the incoming areas
is denoted by bold vertical lines, whereas areas themselves are
separated by small horizontal lines. 

\begin{figure}
\centerline{\includegraphics[width=\hsize]{../figures/stack-1}}
\caption{\label{fig:stack:stack-examples} Examples for 
         activation of \texttt{f}}
\end{figure}

\paragraph{f calls g} The first example on the far left in figure
\ref{fig:stack:stack-examples} shows a situation where the active procedure
[[f]] calls another procedure [[g]].  Any outgoing overflow parameter
is placed into the incoming area of the callee.  However, the exact
size of [[g]] 's incoming area is unknown to [[f]] and therefore all
parameters are placed in a sub-area that is adjacent to the stack
pointer.  Both [[f]] and [[g]] know the internal structure of the
sub-area because it is dictated by the types and sequence of [[g]]'s
formal parameters which are known to both [[f]] and [[g]].

\paragraph{g becomes active} When [[g]] becomes active it advances the
stack pointer [[sp]] by space required for its incoming and private
area and assigns the frame pointer [[fp]] the old value of [[sp]]. 
Note that the incoming area is bigger than what would be required to
hold just the incoming parameters.  Guided by the structure of its
formal parameters [[g]] addresses the sub-area for the incoming
parameter.

\paragraph{g returns} Return values are placed into the incoming area
because there they can be reached easily by the callee and the caller. 
In the example the amount of space for (overflow) return value is
bigger than the space that was used for incoming parameters.  Since
all return statements of [[g]] are known at compile-time the space was
reserved accordingly when [[g]] became active.  Again, access to the
internal parts of the return values is guided by the sequence and
types of the returned values.  Procedure [[g]] knows these from the
return statements in its body, and [[f]] knows them from the left hand
side of the active call statement.  Both must match and thus both
procedures use the same rules to determine the internal structure of
the returned values.

\paragraph{f becomes active} After [[g]] returned the stack and the
frame pointers are restored by [[f]]. The stack pointer is then used
to access the values returned by [[g]].

\paragraph{f jumps to h} A jump from [[f]] to [[h]] initiates a tail-call
that re-uses the stack-space of [[f]]. Values passed to [[h]] are
therefore stored in the \emph{incoming} area of [[f]]. Since all
tail-calls in the body of [[f]] are known the incoming area is big
enough to accommodate these. In the example the entire incoming area is
used for parameters passed to [[h]].

\paragraph{h becomes active} When [[h]] becomes active it behaves
exactly like when it would have been called with a call-statement:  it
advances the stack pointer to make room for its incoming and private
areas.  Again, the knowledge about the structure of the sub-area that
contains the incoming parameters exists in the caller and the callee. 
Both use the sequence and types of the parameters to compute locations
of individual values inside.

\paragraph{continuations} Figure \ref{fig:stack:stack-examples} misses
an example for the activation of a continuation.  A continuation is
basically a pair of a program-counter and a pointer into the stack
that marks an activation.  The [[cut to]] statement allows to pass
values to a continuation.  Overflowing incoming parameters are passed
in the incoming area of the activation belonging to the continuation. 
This requires to find the activation first to pass the values but
makes it easy to access them once the continuation is activated.  This
is done by setting the program-counter to the save value, as well as
setting [[sp]] (and [[fp]]) to their saved values.

% ------------------------------------------------------------------ 
\subsection{Details}
% ------------------------------------------------------------------ 

\begin{itemize}
\item How the inner structure of areas used for parameter passing 
      is communicated.
\item Naming conventions used in the source code for the different
      parts of an activation.
\end{itemize} 
