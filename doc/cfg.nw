% vim: ts=8 sw=4 et:

\documentclass[11pt]{article}
\usepackage{path}
\usepackage{alltt}
\usepackage{noweb}

\author{Christian Lindig}
\title{CFG Design}

\newcommand\PAL{{\small C-{}-}}
\newcommand\AST{{\small AST}}
\newcommand\CFG{{\small CFG}}
\newcommand\qcc{{\small QC-{}-}}
\newcommand\rtl{{\small RTL}}
\newcommand\burg{{\small BURG}}
\let\cfg\CFG

\newenvironment{src}%
    {\begin{quote}\begin{alltt}\small}
    {\end{alltt}\end{quote}}

\parindent0pt
\parskip1.5ex
% ------------------------------------------------------------------ 
\begin{document}
% ------------------------------------------------------------------ 

\maketitle

The current control-flow graph (\cfg) design has several weaknesses, as
pointed out in the \emph{road map} documents. I have no better design at
hand but like to collect requirements and possible choices for the next
{\cfg} design. 

% ------------------------------------------------------------------ 
\section{Back End Phases}
% ------------------------------------------------------------------ 

The executable part of a procedure is represented as {\cfg}. During the
translation of the procedure it passes the following phases. A module
that implements this phase in the current design is given in
parenthesis.

\begin{enumerate}
\item Creation. The abstract syntax tree of a procedure is translated into a
      {\cfg} (\path|Ast3ir|).

\item Copy In/Out. Calls are translated into a sequence of assignments,
      a call, and another sequence of assignments. The assignments
      implement a calling convention. This phase might be joint with the
      previous phase (\path|Ast3ir|, \path|Copyinout|)
      
\item Variable Placement. The {\cfg} includes {\rtl}s that include
      {\PAL} variables. Variables are replaced by temporaries
      (\path|Placevar|).

\item Code Expansion. Code expansion establishes the invariant, that
      every node is representable by a single machine instruction. A node in
      the {\cfg} is expanded into a sub-graph with a single entry and exit
      node. Code expansion introduces many new temporaries in {\rtl}s
      (\path|Sparcexpander|, \path|Dummyexpander|).

\item Liveness Analysis. Register allocation need to know which
      registers are live at any given node. Nodes are annotated with
      this information. Certain {\cfg} transformation invalidate
      liveness informations, in which case the analysis must be
      repeated (\path|Live|).

\item Register Allocation and Spilling. Register allocation replaces
      every temporary in an {\rtl} with a hardware register. This might
      require to insert spilling code into the {\cfg} (\path|Colorgraph|). 

\item Late Compile Time Constant Substitution. After register and
      spilling the stack layout of a procedure is known in principle.
      {\rtl}s contail variable for late compile-time constants that now
      can be replaced (\path|Placevar|).

\item Constant Folding. Constant folding simplifies {\rtl}s as part of
      nodes. (\path|Rtleval2|, \path|Ast3ir|).     
      
\item Before a procedure can be emitted, the {\cfg} must be linearized
      because code has a linear form (\path|Cfg4|). 

\item Recognition. Each {\rtl} in the {\cfg} represents a machine
      instruction. A recognizer determines this instruction and emits
      it (\path|Msparcasm|).
\end{enumerate}

% ------------------------------------------------------------------ 
\section{General Data Structures}
% ------------------------------------------------------------------ 

Since the {\cfg} undergoes many transformations it is not clear whether
it should be represented by one flexible data structure, or several
specialized data structures. The following choices seem possible:

\begin{enumerate}
\item One data structure whose dynamic invariants change over time.

\item Several specialized data structures. For example, the linearized
      form of a {\cfg} has a different data structure than the initial
      {\cfg}. However, data structures would be still allowed to share
      types such that data structures for later phases are not
      completely independent from earlier ones.
      
\item Several data structures that are all instances of the same
      polymorphic type of functor. This ambitious design tries to factor
      out commonalities among different phases.
\end{enumerate}


% ------------------------------------------------------------------ 
\section{Labels}
% ------------------------------------------------------------------ 


{\AST} is a tree that is translated into a graph. Some edges in the
{\AST} are represented by names: an expression can mention a label, but
there is no direct connection between the expression and the label in
the {\AST}. In the {\cfg} some of these relations are made explicit. To
allow an easy translation of these, the {\cfg} must provide two
functions:

\begin{src}
type node
val: label:     string -> succ:node -> node 
val: lookup:    string -> node
\end{src}

The [[label]] function creates a label node under a given name, and
[[lookup]] returns the node for a name. The key is, that a node can be
looked up before it is defined (by [[label]]). The [[lookup]] function
in that case creates a node and returns it. When later [[label]] is
called to define the node, it detects the already existing node and
makes the [[succ]] a successor the existing node and returns the
existing node. If [[label] is called before [[lookup]], [[label]] simply
creates a label node in front of [[succ]] and returns the new node.

The easiest way to implement the above functionality is with explicit
nodes for labels. This way a label has a representation that is
independent for what it labels and thus can be created independently.
Less clear is, whether only labels should have more than one predecessor
in the {\cfg}. This would mean, that all jumps, branches, and so on must
lead to a label. Creating new branches would thus more complicated. 

Labels that are mentioned in the {\AST} are global. They must be thus
preserved  and it is not possible to simply invent labels when the
{\cfg} is linearized. However, the translation of an [[if]] statement
create local labels. These labels are never used before they are created
and could also be derived from the {\cfg} structure when it is
linearized. A distinction between global and local labels seems to be
useful.

It might be possible to implement the {cfg} as a principal tree with
labels the only imperative elements.

The current {\cfg} implementation has a problem with local labels: some
operations require to introduce new labels but no source for the
associated symbol is available. 

% ------------------------------------------------------------------ 
\section{Random Requirements}
% ------------------------------------------------------------------ 

\begin{enumerate}
\item Data-flow analysis must store results in nodes.
\item For graph algorithms it might be beneficial to have a mutable
      [[visited]] flag in every node.

\item Data-flow analysis and register allocation must traverse the
      control-flow graph. Should a traversal function make any promises
      about the order in which nodes are visited? Should a client be
      able to specify its own strategy?

\item {\cfg} linearization should be treated different from traversal
      for data-flow analysis.

\item What is the interface for the code expander? The code expander
      takes a single node with a single predecessor and returns a sub
      graph with an entry and an exit node. The exit node has the same
      successors as the original node. 

\item Do nodes represent single instructions or basic blocks? Basic
      blocks support code expansion and register allocation well as long
      only sequential code is generated.

\item When following an edge, do we have to know whether it is a normal
      or exceptional edge? Therefore, do we need an edge classification
      or are all informations kept in nodes?

\item At some point we might wand to switch the representation of
      instructions during a transformation. If {\cfg} transformations
      are mostly imperative, this requires a very flexible instruction
      type. Otherwise an isomorphic copy of a {\cfg} would have to be
      created. If the {\cfg} is stateful, such a copy difficult to
      implement. It might be better to implement instructions with
      existential types which would allow to switch to a new
      representation gradually.

\end{enumerate}


% ------------------------------------------------------------------ 
\end{document}
% ------------------------------------------------------------------ 


