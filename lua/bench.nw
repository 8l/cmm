% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
\section{Main program for Lua benchmarking}

<<bench.ml>>=
module T = Lua.Lib.Combine.T1 (Luaiolib.T)
module WT = Lua.Lib.WithType (T)
module C = Lua.Lib.Combine.C3 (Luaiolib.Make (T.TV1)) 
                              (WT(Luastrlib.M)) (WT(Luamathlib.M))
module I = Lua.MakeInterp (Lua.Parser.MakeStandard) (Lua.MakeEval (T) (C))

module V = I.Value
  let state = I.mk()
  let run infile = ignore (I.dofile state infile)
  let rec args = function
    | file :: argv ->
        let embed = (V.list V.string).V.embed in
        V.Table.bind state.V.globals (V.String "arg") (embed argv);
        (try ignore (I.dofile state file)
        with I.Error msg -> prerr_string ("Lua error: " ^ msg ^ "\n"))
    | [] -> prerr_string "Usage: oclbench <filename> <arguments>\n"; exit 1
  
  let _ = args (List.tl (Array.to_list (Sys.argv)))

(*
let _ = prerr_string ("Average bucket-list has " ^ string_of_float (Log.avg_length()) ^
                      "elements\n")
*)
