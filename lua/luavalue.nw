% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
\section{Lua values, parameterized by user data}

As in Lua, we keep the value space simple and small.
Unlike Lua, we have only one kind of function.
The type of [[userdata]] is not specified here; it is intended to be a
functor parameter.

This interface is a key for clients because it not only specifies what
a Lua value is, but also provides higher-order embedding/projection
pairs so that Caml values can be mapped to Lua values and back again.

We begin with embedding/projection, which is shared among all modules
matching [[Luavalue.S]].
We need a synonym because to re-export [[ep]] and [[ep]] would be
consider a circular type defintion.
<<signatures>>=
type ('a, 'b, 'c) ep = { embed : 'a -> 'b; project : 'b -> 'a; is : 'c -> bool }
type ('a, 'b, 'c) synonym_for_ep = ('a, 'b, 'c) ep 
  = { embed : 'a -> 'b; project : 'b -> 'a; is : 'c -> bool }
@ 
<<signatures>>=
module type S = sig
  type 'a userdata'
  type srcloc
  type initstate
  type value
    = Nil
    | Number   of float
    | String   of string
    | Function of srcloc * func
    | Userdata of userdata
    | Table    of table
  and func  = value list -> value list (* can also side-effect state *)
  and table = (value, value) Luahash.t
  and userdata  = value userdata'
  and state = { globals : table
              ; fallbacks : (string, value) Hashtbl.t
              ; mutable callstack : activation list
              ; mutable currentloc : Srcmap.location option (* supersedes top of stack *)
              ; startup : initstate
              }
  and activation = srcloc * Srcmap.location option

  val caml_func : func -> value (* each result unique *)
  val lua_func  : file:string -> linedefined:int -> func -> value
  val srcloc    : file:string -> linedefined:int -> srcloc (* must NOT be reused *)
  val eq        : value -> value -> bool
  val to_string : value -> string
  val activation_strings : state -> activation -> string list
  type objname = Fallback of string | Global of string | Element of string * value
  val objname : state -> value -> objname option
     (* 'fallback', 'global', or 'element', name *)

  val state : unit -> state (* empty state, without even fallbacks *)
  val at_init : state -> string list -> unit  (* run code at startup time *)
  val initcode : state -> (string -> unit) -> unit (* for the implementation only *)
@ If a library wants to register Lua code to be executed at startup
time, it can call [[at_init]].  
No library should ever call [[initcode]]; that function is reserved
for the implementation, which uses it to run the registered code.
@
Lua tables are not quite like Caml tables, but they are close.
<<signatures>>=
  module Table : sig
    val create : int -> table
    val find   : table -> key:value -> value   (* returns Nil if not found *)
    val bind   : table -> key:value -> data:value -> unit
    val of_list : (string * value) list -> table
  end
@ 
Now, for embedding and projection.
This is a key, as it completely replaces the stupid stack-based
interface found in~C.
Instead, we use higher-order functions to whip up functionality as needed.
If a projection fails, it raises [[Projection]] giving the value it
tried to project and a string indicating what it tried to project to.
We re-export [[ep]] to make it easier for clients to get the [[embed]]
and [[project]] fields from the locations of their choice.
WE MIGHT HAVE TO ADD FLEXIBILITY BY MAKING
   [[type 'a map = state -> ('a, value) ep]].
<<signatures>>=
  exception Projection of value * string
  val projection : value -> string -> 'a
  type ('a, 'b, 'c) ep = ('a, 'b, 'c) synonym_for_ep 
    = { embed : 'a -> 'b; project : 'b -> 'a; is : 'c -> bool }
  type 'a map  = ('a, value, value) ep
  type 'a mapf  (* used to build function maps that curry/uncurry *)
@ 
These functions enable us to convert the basic types.
<<signatures>>=
  val float    : float  map
  val int      : int    map
  val bool     : bool   map
  val string   : string map
  val userdata : userdata map
  val unit     : unit   map
@ 
To convert a value of option type, we represent [[None]] as [[Nil]].
Woe betide you if [[Nil]] is a valid value of your type!
We won't see it.
<<signatures>>=
  val option : 'a map -> 'a option map
@ 
To project with a default value, we provide [[default ]]$v$[[ t]],
which behaves just as~[[t]] except it projects [[Nil]] to~$v$.
<<signatures>>=
  val default : 'a -> 'a map -> 'a map
@ 
To embed a list of values, we produce a table with a binding of the
length to the name [[n]] and bindings of the values to the numbers $1..n$.
To project a Lua table down to a list, we first look to see if the table 
binds the name~[[n]]. 
If so, we take that to be the number of elements; otherwise we use the table's 
population.  (In the latter case, lists cannot contain [[nil]].)
This way, users are free to include [[n]] or not as they choose.
<<signatures>>=
  val list    : 'a map -> 'a list map   (* does not project nil *)
  val optlist : 'a map -> 'a list map   (* projects nil to empty list *)
@ N.B. [[optlist t = default [] (list t)]].
@
If for some reason a Caml function operates on Lua values, we need an
identity pair.  We also enable functions that expect tables.
<<signatures>>=
  val value  : value map
  val table  : table map
@ 
A common case is to use a table as a record, with string keys
and homogenous values.
<<signatures>>=
  val record : 'a map -> (string * 'a) list map
@ 
Another common case is to represent an enumeration type using strings.
The string passed to [[enum]] is the name of the type, which is used
in projection errors.
The list passed to [[enum]] must contain \emph{every} value of
type~[['a]], which must be comparable using~[[=]].
To do otherwise is to risk an assertion failure during embedding.
<<signatures>>=
  val enum   : string -> (string * 'a) list -> 'a map
@
Here is the support for converting functions.
First, if one wants a Lua function to be curried (as the Caml
functions are), one can simply use [[-->]].
There's a small gotcha, in that we can't make [[-->]] right
associative.
That's OK, as it probably shouldn't be used for curried functions.

For curried functions that should take lists of arguments in Lua,
we use [[**->]], [[pfunc]], [[func]], [[closure]], and [[result]].
The idea is this: if we have a Caml function type
[[t -> u -> v -> w]], we can turn this into a Lua function of three
arguments by using the embedding/projection pair produced by
\begin{quote}
[[pfunc (t **-> u **-> v **-> result w)]]
\end{quote}
<<signatures>>=
  val ( -->  ) : 'a map  -> 'b map  -> ('a -> 'b) map
  val ( **-> ) : 'a map  -> 'b mapf -> ('a -> 'b) mapf
  val result   : 'a map  -> 'a mapf
  val resultvs : value list mapf                   (* functions returning value lists*)
  val resultpair:'a map  -> 'b map  -> ('a * 'b)       mapf
  val dots_arrow:'a map  -> 'b map  -> ('a list -> 'b) mapf     (* varargs functions *)
  val results  : ('a -> value list) -> (value list -> 'a) -> 'a mapf  
                                    (* 'a represents multiple results (general case) *)
  val func     : 'a mapf -> 'a map                 (* function *)
  val closure  : 'a mapf -> 'a map                 (* function or table+apply method *)
  val efunc    : 'a mapf -> 'a -> value            (* efunc f = (closure f).embed *)
@ 
\paragraph{Support for dynamically typed Lua functions}
Type-based dispatch defines several alternatives for a function and
at each call, chooses the right function based on the types of the
arguments. 
<<signatures>>=
  type alt                              (* an alternative *)
  val alt    : 'a mapf -> 'a -> alt     (* create an alternative *)
  val choose : alt list -> value        (* dispatch on type/number of args *)
@ 
It's also possible to combine multiple types for a single argument.
The idea is just like parsing combinators, and we use notation from
Jeroen Fokker's paper \emph{Functional Parsers}.
We can use the choice operator [[<|>]] to combine two maps.
To project, map [[t <|> t']] projects using [[t]] if~[[t]] claims to
recognize the argument.  
If [[t]]~does not recognize the argument, the map projects
using~[[t']].
To embed, map [[t <|> t']] always embeds using [[t']].

We can use the continuation operator [[>>=]] to apply a function to a
value after projection.
To project, the map [[t <@ f]] applies~[[f]] to the result of
projecting with~[[t]].
Because function~[[f]] cannot be inverted, the map [[t <@ f]] is not
capable of embedding.
It is therefore useful primarily on the left-hand side of the [[<|>]]
operator. 
<<signatures>>=
  val ( <|> ) : 'a map -> 'a map -> 'a map 
  val ( <@ ) : 'a map -> ('a -> 'b) -> 'b map   (* apply continuation after project *)
end
@
For the rest of the interface, we can make Lua values by supplying an
appropriate [[userdata]] type.  
<<signatures>>=
module type USERDATA = sig
  type 'a t                             (* type parameter will be Lua value *)
  val tname : string  (* name of this type, for projection errors *)
  val eq : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
  val to_string : ('a -> string) -> 'a t -> string
end
<<luavalue.mli>>=
<<signatures>>
module Make (U : USERDATA) : S with type 'a userdata'  = 'a U.t 
@
\subsection{Implementation}
<<luavalue.ml>>=
<<signatures>>
module Make (U : USERDATA) : S with type 'a userdata'  = 'a U.t 
= struct
  <<value toplevel>>
end
@ 
I have to repeat the datatype definition.
<<value toplevel>>=
type 'a userdata'  = 'a U.t
type srcloc = int * string * int (* unique id, filename, linedefined *)
type value
  = Nil
  | Number   of float
  | String   of string
  | Function of srcloc * func
  | Userdata of userdata
  | Table    of table
and func  = value list -> value list
and table = (value, value) Luahash.t
and userdata  = value userdata'
and state = { globals : table
            ; fallbacks : (string, value) Hashtbl.t
            ; mutable callstack : activation list
            ; mutable currentloc : Srcmap.location option (* supersedes top of stack *)
            ; startup : initstate
            }
and initstate =
  { mutable init_strings : (string -> unit) -> unit; mutable initialized : bool }
and activation = srcloc * Srcmap.location option
@ 
We need suitable equality.
<<value toplevel>>=
let rec eq x y = match x, y with
| Nil,             Nil             -> true
| Number x,        Number y        -> x = y
| String x,        String y        -> x = y
| Userdata x,      Userdata y      -> U.eq eq x y
| Table x,         Table y         -> x == y
| Function ((x, _, _), _), 
           Function ((y, _, _), _) -> x = y
| _,               _               -> false
@ 
Once we have equality, we can make tables.
<<value toplevel>>=
<<table definition>>
@ 
To make this work, every function gets a unique id.  No exceptions.
<<value toplevel>>=
let srcloc =
  let n = ref 0 in
  fun ~file ~linedefined:line -> (n := !n + 1; (!n, file, line))
let lua_func ~file ~linedefined:line f = Function (srcloc file line, f)
let caml_func = lua_func ~file:"(OCaml)" ~linedefined:(-1)
@ 
<<value toplevel>>=
let luastring_of_float x =
  let s = string_of_float x in
  if String.get s (String.length s - 1) = '.' then
    String.sub s 0 (String.length s - 1)
  else
    s

let rec to_string = function
  | Nil             -> "nil"
  | Number x        -> luastring_of_float x
  | String s        -> s
  | Function (_, _) -> "function"
  | Userdata u      -> U.to_string to_string u
  | Table t         -> "table"
@ 
<<value toplevel>>=
type objname = Fallback of string | Global of string | Element of string * value
let key_matching iter t needle =
  let r = ref None in
  iter (fun k v -> if eq needle v then r := Some k else ()) t;
  !r
let objname g needle =
  match key_matching Hashtbl.iter g.fallbacks needle with
  | Some s -> Some (Fallback s)
  | None -> match key_matching Luahash.iter g.globals needle with
    | Some (String s) -> Some (Global s)
    | _ ->
        let r = ref None in
        Luahash.iter (fun k v ->
          match !r with
          | None -> (match k, v with
            | String n, Table t ->
                (match key_matching Luahash.iter t needle with
                | Some v -> r := Some (Element (n, v))
                | None -> ())
            | k, v -> ())
          | Some _ -> ()) g.globals;
        !r
<<value toplevel>>=
let activation_strings g ((uid, file, line) as srcloc, current) =
  let first tail = match objname g (Function (srcloc, fun _ -> assert false)) with
  | Some (Fallback n) -> "`" :: n :: "' fallback" :: tail
  | Some (Global n)   -> "function " :: n :: tail
  | Some (Element (t, String n)) -> "function " :: t :: "." :: n :: tail
  | Some (Element (t, v))    -> "function " :: t :: "[" :: to_string v :: "]" :: tail
  | None -> "unknown function" :: tail
  in let last = match current with
  | None -> " defined in file " :: file ::
             (if line > 0 then [" at line "; string_of_int line ] else [])
(*  | Some (f, l, c) when f = file ->
      [" at line "; string_of_int l; " column "; string_of_int c]
*)
  | Some (f, l, c) ->
      [" in file "; f; ", line "; string_of_int l; " column "; string_of_int c]
  in match line with
  | 0  -> "main of " :: file :: last
  | -1 -> first [" "; file]
  | _  -> first last
@ 
\subsection{Embedding and projection}
Now, for embedding and projection.  More repeats.

The predicate for a value tells whether that value can be projected.
The predicate for a function ([[mapf]]) tells whether a list of arguments would 
be accepted by that function.
When higher-order functions come into play, these predicates are only
an approximation, because they dispatch only on the top-level type
parameter.
So for example,  every function parameter is treated as
equivalent to any other.  Thus, it is not possible to dispatch on the
type of a function but only on whether it is a function or some other
beast.
A~similar limitation applies to lists.
<<value toplevel>>=
exception Projection of value * string
let projection v s = raise (Projection(v, s))
type ('a, 'b, 'c) ep = ('a, 'b, 'c) synonym_for_ep 
  = { embed : 'a -> 'b; project : 'b -> 'a; is : 'c -> bool }
type 'a map  = ('a, value, value) ep
type 'a mapf = ('a, value list -> value list, value list) ep
@
Here are the embedding/projection pairs for the simple types.
There are subtle mismatches between Caml types and Lua types, so I do
my best to patch them.
<<value toplevel>>=
let userdata = { embed = (fun x -> Userdata x)
               ; project = (function Userdata x -> x
                                  | v -> raise (Projection (v, U.tname)))
               ; is = (function Userdata _ -> true | _ -> false)
               } 

let string = { embed = (fun s -> String s)
             ; project = (function String s -> s 
                                 | Number x -> luastring_of_float x
                                 | v -> raise (Projection (v, "string")))
             ; is = (function String _ | Number _ -> true | _ -> false)
             } 

let is_float_literal s = 
  try Luafloat.length (Lexing.from_string s) = String.length s
  with Failure _ -> false
let pervasive_float = float
let float = 
  { embed = (fun x -> Number x)
  ; project = (function Number x -> x
                      | String s when is_float_literal s -> float_of_string s
                      | v -> raise (Projection (v, "float")))
  ; is = (function Number _ -> true | String s -> is_float_literal s | _ -> false)
  } 
<<luafloat.mll>>=
let digit       = ['0'-'9']
let sign        = ['+' '-']
let exp         = ['e''E'] sign? digit+
let number      = sign? digit+ exp?
                | sign? digit+ '.' digit+ exp?
rule length = parse number { Lexing.lexeme_end lexbuf } | _ { -1 }
@ 
<<value toplevel>>=
let to_int x = 
  let n = truncate x in
  if pervasive_float n = x then n else raise (Projection (Number x, "int"))

let int   = { embed = (fun n -> Number (pervasive_float n))
            ; project = (function Number x -> to_int x 
                                | v -> raise (Projection (v, "int")))
            ; is = (function Number x -> pervasive_float (truncate x) = x | _ -> false)
            } 

let bool  = { embed = (fun b -> if b then String "t" else Nil)
            ; project = (function Nil -> false | _ -> true)
            ; is = (fun _ -> true)
            } 
let unit =  { embed = (fun () -> Nil)
            ; project = (function Nil -> () | v -> raise (Projection (v, "unit")))
            ; is = (function Nil -> true | _ -> false)
            } 
@ 
<<value toplevel>>=
let enum typename pairs = 
  { embed = (fun v' -> try String (fst (List.find (fun (k, v) -> v = v') pairs))
                       with Not_found -> assert false)
  ; project = (function String k ->
                 (try List.assoc k pairs
                  with Not_found -> raise (Projection (String k, typename)))
              | v -> raise (Projection (v, typename)))
  ; is = (function String k -> List.mem_assoc k pairs | _ -> false)
  } 
@ 
<<value toplevel>>=
let option t = { embed = (function None -> Nil | Some x -> t.embed x)
               ; project = (function Nil -> None | v -> Some (t.project v))
               ; is = (function Nil -> true | v -> t.is v)
               }
let default d t = 
  { embed = t.embed
  ; project = (function Nil -> d | v -> t.project v)
  ; is = (function Nil -> true | v -> t.is v)
  }
@ 
<<value toplevel>>=
let list (ty : 'a map) = 
  let table l =
    let n = List.length l in
    let t = Table.create n in
    let rec set_elems next = function
      | [] -> Table.bind t (String "n") (Number (pervasive_float n))
      | e :: es -> ( Table.bind t (Number next) (ty.embed e)
                   ; set_elems (next +. 1.0) es)
    in  (set_elems 1.0 l; Table t)
  in
  let untable (t:table) =
    let n = match Table.find t (String "n") with
    | Number x -> to_int x
    | _ -> Luahash.population t  in
    let rec elems i =
      if i > n then []
      else ty.project (Table.find t (Number (pervasive_float i))) :: elems (i + 1) in
    elems 1
  in { embed = table; project = (function Table t -> untable t
                                        | v -> raise (Projection (v, "list"))); 
       is = (function Table t -> true | _ -> false) }
let optlist ty = default [] (list ty)
@
<<value toplevel>>=
let value = { embed = (fun x -> x); project = (fun x -> x); is = (fun _ -> true) }
let table = { embed = (fun x -> Table x)
            ; project = (function Table t -> t | v -> raise (Projection (v, "table")))
            ; is = (function Table t -> true | _ -> false)
            }
@ 
<<value toplevel>>=
let projectRecord ty v = match v with
| Table t ->
    let rec addpairs (k, v) =
      (string.project v, ty.project v) ::
      try addpairs (Luahash.next t k) with Not_found -> [] in
    (try addpairs (Luahash.first t) with Not_found -> [])
| _ -> raise (Projection (v, "table (as record)"))
  
let record ty =
  { embed = (fun pairs ->
             Table (Table.of_list (List.map (fun (k, v) -> (k, ty.embed v)) pairs)))
  ; project = projectRecord ty
  ; is = table.is
  } 
@ 
Here is a simple function from one argument to one result.
We implement the usual Lua game of ``adjusting'' the argument list.
<<value toplevel>>=
let take1 = function  (* take one value from a list of arguments *)
  | [] -> Nil
  | h::t -> h

let take2 = function [] -> Nil, Nil | v :: vs -> v, take1 vs

let const f s = f
let (-->) arg result =
  { embed =   (fun f -> 
               caml_func (fun args -> [result.embed (f (arg.project (take1 args)))]))
  ; project = (function Function (_, f) -> 
                           fun x -> result.project (take1 (f [arg.embed x]))
                      | v -> raise (Projection (v, "function")))
  ; is = (function Function (_, _) -> true | _ -> false)
  } 
@ 
What we have above would be enough, except that Caml likes functions
to be curried and Lua likes them uncurried.
We provide [[**->]], [[results]], and [[func]] for embedding and
projecting curried functions.
The functions are a bit subtle, but if you follow the types, you
shouldn't be too baffled. 
<<value toplevel>>=
let ( **-> ) (firstarg : 'a map) (lastargs : 'b mapf) : ('a -> 'b) mapf =
  let apply (f : 'a -> 'b) args = 
    let h, t = match args with [] -> Nil, [] | h :: t -> h, t in
    let f = f (firstarg.project h) in
    lastargs.embed f t
  in
  let unapp f' =
    fun (x : 'a) -> lastargs.project (function t -> f' (firstarg.embed x :: t)) in
  (* function can match even if args are defaulted, but not if too many args *)
  let is args = 
    let h, t = match args with [] -> Nil, [] | h :: t -> h, t in
    firstarg.is h && lastargs.is t in
  { embed = apply; project = unapp; is = is }

let results (a_to_values : 'a -> value list) (a_of_values : value list -> 'a) = 
  { embed   = (fun (a:'a) -> fun lua_args -> a_to_values a);
    project = (fun f_lua -> (a_of_values (f_lua []) : 'a));
    is = (function [] -> true | _ :: _ -> false)
  } 

let (<<) f g = fun x -> f (g x)

let result r = results (fun v -> [r.embed v]) (r.project << take1)
let resultvs = results (fun l -> l) (fun l -> l)
let resultpair a b =
  let em (x, y) = [a.embed x; b.embed y] in
  let pr vs =
    let x, y = match vs with
    | [] -> Nil, Nil
    | [x] -> x, Nil
    | x :: y :: _ -> x, y in
    (a.project x, b.project y) in
  results em pr

(* other possibilities not exposed in interface *)
let result2 r1 r2 = results (fun (v1, v2) -> [r1.embed v1; r2.embed v2])
                            ((fun (l1, l2) -> r1.project l1, r2.project l2) << take2)
let runit =
  results (fun () -> []) 
          (function [] -> () | h :: _ -> raise (Projection (h, "unit result")))
<<value toplevel>>=
let dots_arrow (varargs : 'a map) (result : 'b map) : ('a list -> 'b) mapf =
  let apply (f : 'a list -> 'b) = 
    fun (args : value list) ->
      [result.embed (f (List.map varargs.project args))] in
  let unapp (f' : value list -> value list) =
    fun (args : 'a list) ->
      result.project (take1 (f' (List.map varargs.embed args))) in
  { embed = apply; project = unapp; is = List.for_all varargs.is }


let func (arrow : 'a mapf) : ('a map) =
  { embed   = (fun (f : 'a) -> caml_func (arrow.embed f))
  ; project = (function Function (_, f) -> (arrow.project f : 'a)
                      | v -> raise (Projection (v, "function")))
  ; is = (function Function(_, _) -> true | _ -> false)
  } 

let closure (arrow : 'a mapf) : ('a map) =
  { embed   = (fun (f : 'a) -> caml_func (arrow.embed f))
  ; project = (function Function (_, f) -> (arrow.project f : 'a)
                      | Table t as v -> (<<project table [[t]] into a function>>)
                      | v -> raise (Projection (v, "function")))
  ; is = (function Function(_, _) -> true | Table t -> <<table [[t]] is a closure>>
                 | _ -> false)
  } 

let efunc t f = (closure t).embed f
<<value toplevel>>=
type alt = (value list -> value list) * (value list -> bool)
let alt t f = (t.embed f, t.is)
let choose alts =
  let run args =
    let f = try fst (List.find (fun (_, is) -> is args) alts)
            with Not_found ->
              let args = (list value).embed args in
              raise (Projection (args, "arguments matching alternatives")) in
    f args in
  caml_func run

let lf = efunc (list value **-> result (list value)) List.rev
<<value toplevel>>=
let ( <|> ) t t' =
  { project = (fun v -> if t.is v then t.project v else t'.project v)
  ; embed   = t'.embed
  ; is      = (fun v -> t.is v || t'.is v)
  }

let ( <@ ) t k =
  { project = (fun v -> k (t.project v))
  ; embed   = (fun _ -> assert false)
  ; is      = t.is
  }
@
A table is a function if it has an apply method that is a function.
<<project table [[t]] into a function>>=
let f = try Table.find t (String "apply")
        with Not_found -> raise (Projection (v, "function"))  in
match f with
| Function (_, f) -> arrow.project (fun vs -> f (v :: vs))
| v -> raise (Projection (v, "'apply' element of table as function"))
<<table [[t]] is a closure>>=
(try
  match Table.find t (String "apply") with
  | Function (_, _) -> true
  | _ -> false
with Not_found -> false)
@ 
A Lua table is very nearly a Caml hash table, except it never has
multiple elements.
<<table definition>>=
module Table = struct
  let create = Luahash.create eq
  let find t ~key:k = try Luahash.find t k with Not_found -> Nil
  let bind t ~key:k ~data:v =
    match v with
    | Nil -> Luahash.remove t k
    | _ -> Luahash.replace t k v
  let of_list l =
    let t = create (List.length l) in
    let _ = List.iter (fun (k, v) -> bind t (String k) v) l in
    t
end
@ 
\subsection{Initialization at startup time}
<<value toplevel>>=
module StringList = struct
  type t = (string -> unit) -> unit
  let empty f = ()
  let of_list l f = List.iter f l
  let append l1 l2 f = l1 f; l2 f
end

let state () = 
 { globals = Table.create 50; fallbacks = Hashtbl.create 10; callstack = [];
   currentloc = None;
   startup = { init_strings = StringList.empty; initialized = false; }
 }

let at_init g ss =
  if g.startup.initialized then
    (prerr_endline
       "Internal Lua-ML error: called at_init after initialiation was complete";
     exit(1))
  else
    g.startup.init_strings <-
      StringList.append g.startup.init_strings (StringList.of_list ss)

let initcode g =
  if g.startup.initialized then
    (prerr_endline "Internal Lua-ML error: a naughty client called initcode";
     exit(1))
  else
    let code = g.startup.init_strings in
    begin
      g.startup.initialized <- true;
      g.startup.init_strings <- StringList.empty;
      code
    end
