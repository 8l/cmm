% -*- mode: Noweb; noweb-code-mode: c-mode -*- %

\ifx\nointro\undefined
This document contains the interface and implementation of {\PAL} primitive operators.
\fi

% ----------------------------------------------------------------------------
\interface{[[value]] : Representing {\PAL} Values}
% ----------------------------------------------------------------------------

<<value.h>>=
#ifndef _VALUE_H
#define _VALUE_H

#include "types.h"
#include <cii/mp.h>

<<type definitions>>
<<macro definitions>>

<<function prototypes>>

#endif /* _VALUE_H */
@ 

% ----------------------------------------------------------------------------
\subsection{Datatypes}
% ----------------------------------------------------------------------------

We define the union type [[value]] to hold {\PAL} values.  
The idea is that a {\PAL} value of type $b$ may be fetched from a C [[value v]] by accessing [[v.]]$b$.  
Similarly, a [[value]] may be projected to a C value of type $t$ by accessing
[[v.]]$t$ (where $t$ is an appropriate type [[typedef]]'d in [[types.nw]]).

Value stacks are represented in C as pointer-style [[value]] arrays, and generic data stacks are represented by pointer-style byte arrays.

<<type definitions>>=
typedef union {
  bool     bool   ;
  bits1    bits1  ;
  bits2    bits2  ;
  bits8    bits8  ;
  bits16   bits16 ;
  bits32   bits32 ;
  MP_T     bits64 ;
  float32  float32;
  float64  float64;
  /*  float96 float96; */  /* UNSUPPORTED for now */

  void    *ptr;
  u_int1   u_int1;
  u_int8   u_int8;
  u_int16  u_int16;
  u_int32  u_int32;

  s_int8   s_int8;
  s_int16  s_int16;
  s_int32  s_int32;
} value;

typedef u_int8 *dataptr;   /* a pointer to arbitrarily-sized data */
typedef value  *vptr   ;   /* a value pointer */
@

% ----------------------------------------------------------------------------
\subsection{Helper Utilities}
% ----------------------------------------------------------------------------

To ensure that {\PAL} values are properly reconciled with the C type system, we use the [[VIEW]] macro.  
This macro takes two arguments: [[VIEW(LVALUE, T)]].  
[[LVALUE]] is some sort of C lvalue and [[T]] is a C type.  
The macro returns [[LVALUE]], properly viewed as a C value of type [[T]].

Additionally, to embed an integer C value of somewhat arbitrary width into a 
[[value]], we provide [[to_CMM_value]].
The only bit widths currently supported are: [[1]], [[2]], [[8]], [[16]], 
[[32]], and [[64]].

<<function prototypes>>=
value to_CMM_value(unsigned v, unsigned width);
@ 

To easily initialize a [[value]] to ``0'', we provide helper function
[[value_zero]] that returns a zeroed-out [[value]].

<<function prototypes>>=
value value_zero(void);
@ 

To perform some quick internal consistency assertions about the [[value]] type
(and to verify assumptions made about this type), we provide helper 
[[check_value_types]].

<<function prototypes>>=
void check_value_types(void);
@ 

% ----------------------------------------------------------------------------
\implementation{Representing {\PAL} Values}
% ----------------------------------------------------------------------------

<<value.c>>=
#include "value.h"

#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "interp.h"

<<function definitions>>
@ 

% ----------------------------------------------------------------------------
\subsection{Utility Functions and Macros}
% ----------------------------------------------------------------------------

We define a few macros/functions to ease the notational burden of value maniuplation.
On the simplest level, we need to be able to interpret the bits of a C lvalue as if the value were a different type.
C type casting does not do the trick, as it actually changes the bit-level value being examined; instead, we define the macro [[VIEW]].

<<macro definitions>>=
#define VIEW(LVALUE, T)       (*((T *) (&(LVALUE))))
@

[[to_CMM_value]] embeds a C value in a [[value]] without subverting the C
type system.
Unfortunately, this helper only works for integer values.

<<function definitions>>=
value to_CMM_value(unsigned v, unsigned width) {
  /* set val = 0 */
  value val = value_zero();

  switch (width) {
  case  1: val.bits1  = v       ; break;
  case  2: val.bits8  = v       ; break;
  case  8: val.bits8  = v       ; break;
  case 16: val.bits16 = v       ; break;
  case 32: val.bits32 = v       ; break;
  case 64: val.bits64 = (MP_T) v; break;

  default:
    cmm_err("unsupported value type; cannot continue"); 
  }

  return val;
}
@ 

[[value_zero]] does nothing special.

<<function definitions>>=
value value_zero(void) {
  static void *zero = NULL;
  value        v;

  if (zero == NULL)  zero = calloc(1, sizeof(v));

  /* zero out the bits of v and return it*/
  memcpy(&v, zero, sizeof(v));
  return v;
}
@ 

% ----------------------------------------------------------------------------
\subsection{Sanity Check}
% ----------------------------------------------------------------------------

We perform checks to make sure that our standardized basic data types are of the expected bit widths.
For now, we also assert that a pointer is 32-bits.
Some of our code is dependent on this, so we want to cause an error early on if this interpreter is being executed on a machine with a different pointer-size.

The commented-out code is for types not currently supported within the 
[[value]] type.

<<function definitions>>=
void check_value_types (void) {
  value v;
  assert(sizeof(v.bits8 ) == 1);
  assert(sizeof(v.bits16) == 2);
  assert(sizeof(v.bits32) == 4);

  assert(sizeof(v.float32) == 4);
  assert(sizeof(v.float64) == 8);
/*  assert(sizeof(v.float96) == 12); */

  assert(sizeof(u_int8)  == 1);
  assert(sizeof(u_int16) == 2);
  assert(sizeof(u_int32) == 4);

  assert(sizeof(s_int8)  == 1);
  assert(sizeof(s_int16) == 2);
  assert(sizeof(s_int32) == 4);

  /* make sure function pointers are of same size as data pointers */
  assert(sizeof(void (*) (void)) == sizeof(void *));

  /* make sure pointers are 32 bits */
  assert(sizeof(void *)          == sizeof(v.bits32));
}
@

