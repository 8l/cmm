% -*- mode: Noweb; noweb-code-mode: c-mode -*- %

\ifx\nointro\undefined
This document contains the interface and implementation of a {\PAL} activation record.
\fi

% ----------------------------------------------------------------------------
\interface{[[activation]] : {\PAL} Activation Frames}
% ----------------------------------------------------------------------------

<<activation.h>>=
#ifndef _ACTIVATION_H
#define _ACTIVATION_H

#include "table.h"
#include "types.h"
#include "uid.h"
#include "stack.h"

<<type definitions>>
<<function prototypes>>

#endif /* _ACTIVATION_H */
@ 

% ----------------------------------------------------------------------------
\subsection{Data Structures}
% ----------------------------------------------------------------------------

\paragraph{{\PAL} Call-site Annotations}

We make use of Lua tables in storing call-site annotations, and thus represent
the members of type [[annotations]] with references to Lua tables.

<<type definitions>>=
typedef struct {
  table also_cuts_to;
  table also_unwinds_to;
  table also_returns_to;
  bool  also_aborts;
} annotations;
@

\paragraph{Activation Records}

The [[activation]] type is straightforward; its members are the elements of the formal activation tuple presented in [[interp.nw]]. 
Pointers [[locals_end]] and [[stackdata_end]] help delimit the space used by an activation's local environment; this becomes important when we need to recover space allocated to recently-deceased activations.  
Note also that an activation's program counter is stored as an actual pointer into bytecode and not a relocatable address; by the time that activation records are generated (at runtime), {\PAL} program memory is well-addressed.

<<type definitions>>=
typedef struct activation_t {
  bytecodeptr          pc;

  vptr                 locals;
  vptr                 locals_end;

  dataptr              stackdata;
  dataptr              stackdata_end;

  annotations         *kappa;

  uid                  u;

  struct activation_t *caller;
  struct activation_t *callee;

  const char          *name;
  struct procedure    *proc;
} activation;

typedef activation *actstack;
typedef activation *actptr;
@

% ----------------------------------------------------------------------------
\subsection{Utility Functions}
% ----------------------------------------------------------------------------

We provide a utility function for performing a stack trace, given
a pointer to the current activation frame.

<<function prototypes>>=
void activation_trace(activation *act);
@

% ----------------------------------------------------------------------------
\implementation{{\PAL} Activation Frames}
% ----------------------------------------------------------------------------

<<activation.c>>=
#include "activation.h"

#include <stdio.h>

<<function definitions>>
@

% ----------------------------------------------------------------------------
\subsection{Utility Functions}
% ----------------------------------------------------------------------------

<<function definitions>>=
void activation_trace(activation *act) {
  int i;
  for (i = 1; act != NULL && act->name != NULL; act = act->caller, i++)
    fprintf(stderr, "| %d: %s()\n", i, act->name);

  fprintf(stderr, "| End of Stack Trace (oldest activation was #%d)\n", i - 1);
}
@