% -*- mode: Noweb; noweb-code-mode: c-mode -*- %

\ifx\nointro\undefined 
This document contains the interface and implementation of the C
representations of {\PAL} control flow structures.
\fi

% ----------------------------------------------------------------------------
\interface{[[controlflow]] : {\PAL} Control Flow Elements}
% ----------------------------------------------------------------------------

<<controlflow.h>>=
#ifndef _CONTROLFLOW_H
#define _CONTROLFLOW_H

#include <mclib.h>
#include "activation.h"
#include "table.h"
#include "uid.h"

<<type definitions>>

<<function prototypes>>

#endif /* _CONTROLFLOW_H */
@ 

% ----------------------------------------------------------------------------
\subsection{Procedures}
% ----------------------------------------------------------------------------

The operational semantics for procedure-calling instructions require
more information about procedures than simply program counters.  We
create the type [[procedure]] to encapsulate the necessary information
for representing procedures.  Note that we use [[RAddr]]s to represent
addresses in program memory, for these structures are used during the
interpretation of the input Lua script before sections of program
memory are permanently located at addresses.  An [[RAddr]] is a
relocatable address and is defined by the NJ Machine-Code Toolkit.

<<type definitions>>=
typedef struct procedure {
  RAddr         raddr;
  unsigned int  num_locals;
  unsigned int  stackdata_size;
  table         stackdata_labels;
} procedure;
@

% ----------------------------------------------------------------------------
\subsection{Continuations}
% ----------------------------------------------------------------------------

{\PAL} continuations are represented by a pair of values: a code
pointer and a stack pointer.

<<type definitions>>=
typedef struct {
  void *code;
  void *sp;
} continuation;
@ 

We provide a simple helper function to do minimal verification of
a continuation (to see if its a valid continuation).

<<function prototypes>>=
void check_cont(const continuation *k);
@ 

% ----------------------------------------------------------------------------
\subsection{Memory Management}
% ----------------------------------------------------------------------------

To abstract away from the details of memory management, this interface
provides functions to create new [[procedure]]s and
[[annotations]], as well as a function that frees \emph{all} such objects in 
memory.

<<function prototypes>>=
procedure    *procedure_new(void);
annotations  *annotations_new(void);

void          controlflow_free_all(void);
@ 

Note that the  $T$[[_new]] functions return pointers to \emph{uninitialized} 
structures.

% ----------------------------------------------------------------------------
\implementation{{\PAL} Control Flow Elements}
% ----------------------------------------------------------------------------

<<controlflow.c>>=
#include "controlflow.h"

#include "interp.h"
#include <cii/arena.h>

<<internal static variable definitions>>

<<function definitions>>
@

% ----------------------------------------------------------------------------
\subsection{Memory Allocation}
% ----------------------------------------------------------------------------

We make use of Hanson's ``arenas'' (see \emph{C Interfaces and
Implementations}) to assist in allocating and de-allocating memory for
control-flow related structures.  We use one shared arena for
[[procedure]]s and [[annotations]] because they usually die all at
once anyway.

<<internal static variable definitions>>=
static Arena_T controlflow_arena = NULL;
@ 

<<function definitions>>=
procedure *procedure_new(void) {
  procedure *proc;

  if (controlflow_arena == NULL) {
    controlflow_arena = Arena_new();
    mem_assert(controlflow_arena);
  }

  proc = (procedure *) Arena_alloc(controlflow_arena, sizeof(procedure),
                                   __FILE__, __LINE__);
  mem_assert(proc);
  return(proc);
}
annotations *annotations_new(void) {
  annotations *ann;

  if (controlflow_arena == NULL) {
    controlflow_arena = Arena_new();
    mem_assert(controlflow_arena);
  }

  ann = (annotations *) Arena_alloc(controlflow_arena, sizeof(annotations),
                                    __FILE__, __LINE__);
  mem_assert(ann);
  return(ann);
}
@

To free all:

<<function definitions>>=
void controlflow_free_all(void) {
  if (controlflow_arena != NULL) {
    Arena_free(controlflow_arena);
    Arena_dispose(&controlflow_arena);
    controlflow_arena = NULL;
  }
}
@ 

% ----------------------------------------------------------------------------
\subsection{Error Checking}
% ----------------------------------------------------------------------------

We do some simple [[NULL]] checks with continuations.

<<function definitions>>=
void check_cont(const continuation *k) {
  cmm_assert(k != NULL && k->code != NULL && k->sp != NULL,
             "illegal continuation passed to interpreter!");
}
@