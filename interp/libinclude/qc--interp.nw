<<qc--interp.h>>=
#ifndef _QC__INTERP_H_
#define _QC__INTERP_H_

<<interpreter's version of the run-time interface>>

#define mem_assert(EXP) ((EXP) ? (void)0 \
                               : cmm_err("(out of) memory error " \
                                         "<"__FILE__":%d>", __LINE__))

typedef enum { SRC_STRING, SRC_FILE, SRC_STDIN } assembly_unit_type;

extern void       cmm_err(char *fmt, ...);

extern int        Cmm_open(int valstack_size, int argspace_size);
extern void       Cmm_close(void);

extern void       register_c_func(const char *name, void (*f) (void),
                                  const char *sig);
extern int        load_assembly_unit(char *s, assembly_unit_type source_type);
extern Cmm_Codeptr cmm_find_export(const char *arg);

#endif /* _QC__INTERP_H_ */
@
The code below is an old version of the run-time interface.
One day we will make it compatible again.
Don't hold your breath.
<<interpreter's version of the run-time interface>>=
typedef void        *Cmm_Dataptr;
typedef void       (*Cmm_Codeptr) (void);
typedef unsigned int Cmm_Word;

typedef struct {
  void *X0[10];
  unsigned int X2;
} Cmm_Activation;

typedef struct { void *X0; void *X1; } Cmm_Cont ;

Cmm_Cont        Cmm_CreateThread(Cmm_Codeptr f, Cmm_Dataptr x, void *s,
                                 unsigned n, void **limit_cookie);
Cmm_Cont        Cmm_RunThread   (Cmm_Cont *k);
void            Fe_AddThread  (Cmm_Codeptr k);
void            Fe_Go();
void Fe_StealMyReturnContinuation(Cmm_Cont* k);
void Fe_DontStealMyReturnContinuation(Cmm_Cont* k);
Cmm_Activation  Cmm_YoungestActivation(const Cmm_Cont *k);
int             Cmm_isOldestActivation(const Cmm_Activation *a);
Cmm_Activation  Cmm_NextActivation(const Cmm_Activation *a);
Cmm_Activation  Cmm_NextActivationUnsafe(const Cmm_Activation *a);
int             Cmm_ChangeActivation(Cmm_Activation *a);
void           *Cmm_FindLocalVar(const Cmm_Activation *a, unsigned n);
unsigned        Cmm_LocalVarCount(const Cmm_Activation *a);
void           *Cmm_FindDeadLocalVar(const Cmm_Activation *a, unsigned n);
void           *Cmm_FindStackLabel(const Cmm_Activation *a, unsigned n);
Cmm_Dataptr     Cmm_GetDescriptor(const Cmm_Activation *a, Cmm_Word token);
Cmm_Cont        Cmm_GetUnwindCont(const Cmm_Activation *a, Cmm_Word index);
void           *Cmm_FindGlobalVar(void *gp, int n);
unsigned        Cmm_GlobalCount  (void);
unsigned        Cmm_GlobalSize   (void);
typedef void Cmm_Reloc;
void  Cmm_CopyFrames(Cmm_Cont* c, int num_frames,
			 void *newstack, unsigned n, void **limitp, Cmm_Reloc **relocp);
@
