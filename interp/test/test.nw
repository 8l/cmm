% ------------------------------------------------------------------  
\section{Testing}
% ------------------------------------------------------------------  

Testing is a good thing.
In hopes of easing the process of testing the {\PAL} interpreter, this file 
was borrowed (copied) from the [[qc--]] compiler's testing mechanism and
modified for use with the interpreter.
There is one type of test: a regression test.
It runs the interpreter and compares its results to previously recorded
results of the expected outcome.

% ------------------------------------------------------------------ 
\subsection{Writing a test case}
% ------------------------------------------------------------------ 

These are the general rules for testing:

\begin{itemize}
\item A test case should be a file with a [[.lua]] suffix because the
      [[mk test]] target uses all these files as test cases.

\item A test case includes shell commands to perform the test. They
      are embedded in a Lua comment [[---]] starting at the
      beginning of a line:

\begin{verbatim}
-- execute the commands below to use this file as a test case
--- ./regr "../interp test1.lua"  -err test1.2 -x 0

CMM.section("section")
CMM.procedure("main", 0, 0, {})
   CMM.return(0, 0)
\end{verbatim}

      It is a convention to name the file for the expected output on
      standard output and standard error after the base name of the
      test case and using the suffix [[.1]] and [[.2]] respectively.
\end{itemize}

In the example above the same test case is used for a regression test 
[[regr]].  More precisely, the compiler is expected to exit with an
exit code of 0 ([[-x 0]]) 

The price for the flexibility to include many tests into the same test
case is, that some familiarity with the available tests is required. 
Reusing tests when a new test is added also requires to edit the test
cases because they decide which test to use.

% ------------------------------------------------------------------ 
\subsection{Regression Test}
% ------------------------------------------------------------------ 

Here is a little script for regression testing that assists in this
job:  it runs a command and compares the exit code, standard output,
and standard error produced by the program with expected results:  

\begin{quote}
    regr "../interp foo.lua" -out foo.1 -x 0
\end{quote}

This command [[regr]] runs [[../interp foo.lua]], compares the standard
output with [[foo.1]] and the exit code with [[0]].  Any differences
to the expected outcome are reported.  The [[regr]] script is flexible
enough to provide optionally standard input ([[-in]]) to the command
it runs and can compare files ([[-f]]) the commands creates with
existing files.  Options accepted by [[regr]]:

\begin{itemize}
\item [[-in file]]: The command gets its standard input from [[file]].
\item [[-out file]]: The standard output of the command is compared to
      [[file]]. 
\item [[-err file]]: The standard error output of the command is
      compared to [[file]].
\item [[-x n]]: The command is expected to exit with exit code [[n]].
\item [[-f /some/file]]:  The command is expected to create a file
      [[/some/file]]. The contents of [[/some/file]] and [[file]] in
      the local directory are compared.
\item [[-r]] recording mode: the output of the command is captured in
      the respective files for later comparison.
\end{itemize}

The script can be used in a recording mode where the standard and
error output of a command are recored in files for later comparison.
Running the regression test is especially useful after changes to the
interpreter to make sure the old behavior is still matched.

<<regr>>=
#! /usr/bin/env bash 
##
##
## regr cmd [-r] [-v] [-in ifile] [-out ofile] [-err efile] [-x n] [-f file].. 
##
## see usage below or call without parameters for usage
##

## set defaults

case $VERBOSE in
  -v) verbosity=on ;;
  *)  verbosity=off ;;
esac
this="regr"
tmp="${TMP:-/tmp}/$this.$$"
stdin="/dev/null"
stdout="/dev/null"
stderr="/dev/null"
exitc="0"
recording=off
files=""

## interrupt handler

trap "rm -f $tmp.* ; exit 1" 1 2 3 15


## parse command line arguments and show usage

if [ $# -lt 1 ]; then
    cat <<EOF
    
     $this cmd [-r] [-in ifile] [-out ofile] [-err efile] [-x n]  [-f file] .. 
    
     Regression test tool. Runs cmd and matches its behavior against specs
     on the command line.  Verbosity is off unless VERBOSE is -v.  Options:

     
     -x n:        cmd is expected to exit with exitcode n (default 0)
     -out ofile:  cmd's stdout should match ofile         (default /dev/null)
     -err efile:  cmd's stderr should match efile         (default /dev/null)
     -in  ifile:  cmd gets its stdin from ifile           (default /dev/null)
    
     -f   /some/file    
                  cmd is expected to create /some/file. /some/file should 
                  NOT be placed into the \$CWD. /some/file is compared against
                  \$CWD/file. /some/file is deleted after comparison
    
     -r           recording mode: no comparisons are done. Instead all
                  output of cmd is directed to the files specified on the
                  command line.
                  In case of -f /some/file is moved to \$CWD/file
    
                  The recording mode helps to build all the files for
                  later regression testing.  

     -q           Verbosity off (quiet).

     -v           Verbosity on (verbose).
EOF
exit 2
fi

cmd="$1"
shift
while : ; do
    case "$1" in
        "")
            break;;
        -in)
            stdin="$2"; shift;;
        -out)
            stdout="$2"; shift;;
        -err)
            stderr="$2"; shift;;
        -x)
            exitc="$2"; shift;;
        -v)
            verbosity="on";;
        -q)
            verbosity="off";;
        -r)
            recording="on";;
        -f)
            files="$files $2"; shift;;
        *)
            echo "unknown option: $1" 2>&1;
            exit 2;;
    esac
    shift
done


#
# run cmd
# shell quoting hell is upon us.

function echov {  # echo if verbose
  case $verbosity in
    on) echo "$*" ;;
  esac
}

echov "testing command: '$cmd'"

if [ "$recording" = "off" ]; then 
    eval "$cmd < '$stdin' 2> '$tmp.stderr' > '$tmp.stdout'"
    returnc="$?"
else
    # recording mode - do not compare but create files 
    # as specified on the cmd line

    eval "$cmd < '$stdin' 2> '$stderr' > '$stdout'"
    for f in $files; do
        mv $f `basename $f`
    done
    exit 0
fi

#
# check results (only if not in recording mode)
#

# return code for $this

rc=0

if ! [ "$returnc" = "$exitc" ]; then
    echov "failed: '$cmd' exit code $returnc does not match $exitc"
    failmsg="unexpected return code"
    rc=1
fi

if [ ! -r "$stderr" ]; then
    echo "Error in test suite: cannot compare '$stderr' with stderr" 1>&2
    exit 1
elif ! cmp "$stderr" "$tmp.stderr" > /dev/null ; then
    echov "failed: '$cmd' stderr does not match expectation"
    failmsg="stderr does not match"
    if [ "$verbosity" = on ]; then diff "$stderr" "$tmp.stderr"; fi
    rc=1
fi

if [ ! -r "$stdout" ]; then
    echo "Error in test suite: cannot compare '$stdout' with stdout" 1>&2
    exit 1
elif ! cmp "$stdout" "$tmp.stdout" > /dev/null ; then
    echov "failed: '$cmd' stdout does not match expectation"
    failmsg="stdout does not match"
    if [ "$verbosity" = on ]; then diff "$stdout" "$tmp.stdout"; fi
    rc=1
fi

for f in $files; do
    expect=`basename $f`
    if [ ! -r "$expect" -o ! -r "$f" ]; then
       echo "Error in test suite: cannot compare '$expect' with '$f'" 1>&2
       exit 1
    elif ! cmp $f $expect > /dev/null ; then 
        echov "failed: $f does not match expectation $expect"
        failmsg="$f does not match"
        if [ "$verbosity" = on ]; then diff -c $f $expect; fi
        rm -f $f
        rc=1
        break
    else
        rm -f $f
    fi
done

#
# clean up
#

rm -f $tmp.*

#
# exit
#

if [ $verbosity = off -a $rc -ne 0 ]; then
  echo "mk VERBOSE=-v $MKTARGET # (FAILED: $failmsg)"
fi

exit $rc
@

% ------------------------------------------------------------------  
\section{Helper Scripts}
% ------------------------------------------------------------------  

To help test the interpreter with actual {\PAL} code, we provide a script
that runs {\PAL} code through the front-end of the compiler, has the compiler
emit Lua code, and runs the Lua code through the interpreter.

<<qrun>>=
#!/bin/sh
rm -f a.out
${QCMM-../../bin/qc--} -globals -interp -o a.out $@
${INTERP-../../bin/qc--interp} a.out
rc=$?
rm -f a.out
exit $rc
@ 

<<qrun-gc>>=
#!/bin/sh
rm -f a.out
${QCMM-../../bin/qc--} -globals -interp -o a.out $@
${GC-../clients/gc_client} a.out -v
rc=$?
rm -f a.out
exit $rc
@ 

<<qrun-exn>>=
#!/bin/sh
rm -f a.out
${QCMM-../../bin/qc--} -globals -interp -o a.out $@
${EXN-../clients/exn_client} a.out
rc=$?
rm -f a.out
exit $rc
@
