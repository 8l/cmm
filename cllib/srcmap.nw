% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% l2h substitution C C--
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
% l2h substitution asdl ASDL
% l2h substitution ocaml OCaml

\input{../config/macros.tex}

% ------------------------------------------------------------------  
\section{Source Code Locations}\label{srcmap}
% ------------------------------------------------------------------  

The scanner (section \ref{sec:scanner}) operates on a character
stream.  An offset from the beginning of the stream marks a
\textit{position} inside the stream; the first character in the stream
has position 0.  The parser (section \ref{sec:parser}) takes positions
reported by the scanner to mark nodes in the abstract syntax with
regions.  A region is a pair of two positions and defines the span a
node covers in the source code.

Positions are easy to manipulate by a program but less useful for a
programmer who likes to think in terms of line numbers and columns in
a file.  A \textit{source map} translates source code
\textit{positions} into source code \textit{locations} that are made
up from

\begin{itemize}
\item a file name,
\item a line number in that file (first line has number 1),
\item and a column (first column is 1). There seems to be no
      convention whether the first column in a line is considered 0 or
      1. The Emacs editor adheres to the first, the Vi editor to the
      latter perspective.
\end{itemize}

To establish the connection between simple positions and complex
locations these two views must be \textit{synchronized}.  The result
of all synchronizations is a source map.  The views must synchronize
whenever advancing in the stream of characters is different from
moving to the next column in the position's view.  This happens
typically at the following points in a source file:

\begin{itemize} 
\item Start of a new source file.
\item Beginning of a new line.
\item A tab character that skips some columns.
\item Some directive like [[#line]] from the C pre-processor
      indicates a non-linearity in the source code. 
\end{itemize}

A synchronization establishes a connection between a source code
position and a (filename, line, column) location.  The point of
synchronization is called a synchronization point or sync point.  

In principle, synchronization points can be placed in any order into a
stream of characters.  The following restriction usually does not harm
and helps to to build efficient source maps:  source code positions
increase in the order synchronization points are established.  This
means, that never a position to the left of an existing
synchronization point is synchronized.

Building and using a source map involves the following key operations:

\begin{itemize}
\item Create an initially empty source map.
\item Enter synchronization points into the map.
\item Return the location of a given position.
\end{itemize}

To make any position meaningful, position 0 should be a
synchronization point. So whenever a source map is created a sync
point for position 0 should be placed into it.

% ------------------------------------------------------------------  
\subsection{Interface}
% ------------------------------------------------------------------  

Position are non negative characters counts in the input stream.  They
are represented by [[pos]].  A continuous region in the input
stream consists of the first character in the span and the first one
following it.

<<srcmap.mli>>=
type pos            = int
type rgn            = pos * pos
@
The [[null]] region is sometimes used a special value when no real
region information is available.

<<srcmap.mli>>=
val null            : rgn
@

Programmers think in terms of locations, describing a line and
column in a file; they have type [[loc]].  I have chosen to use a
tuple to represent a location instead of a record type.  There is some
danger of confusing lines and columns because they share the same
type.  Records avoid this but have other drawbacks:  labels must be
unique which leads to long names and ugly pattern matching.

<<srcmap.mli>>=
type location       = string    (* file   *)
                    * int       (* line   *)
                    * int       (* column *)
@
A source map is a mutable data structure with an undisclosed
representation.  A source map should never be empty but should contain
a synchronization point for [[pos]] 0.  The [[mk]] function returns an
empty source map for a file.

<<srcmap.mli>>=
type map
val mk:             unit -> map (* empty map *)
@

A synchronization is announced with [[sync]].  It synchronizes a
position [[pos]] with a [[location]].  A common case is the
synchronization for a new line trough [[nl]].  A new line stays in the
same file as the previous sync point and advances one line.  The
[[pos]] passed to [[nl]] is that of the first character on the new
line.  Another common case are tab characters which we currently
ignore.

<<srcmap.mli>>=
val sync :          map -> pos -> location -> unit
val nl :            map -> pos -> unit
@
[[last]] returns the location of the last sync point. It is useful
to get the current file name and line number.

<<srcmap.mli>>=
val last :          map -> location
@
The corresponding location for a position can be obtained with
[[location]].  For debugging a source map can be dumped to stdout
using [[dump]]. 

<<srcmap.mli>>=
val location :      map -> pos -> location
val dump:           map -> unit
@
To make positions meaningful they can be bundled with a source map
that keeps track of their origins. 

<<srcmap.mli>>=
type point          = map * pos
type region         = map * rgn
@
The [[Str]] module provides string representations for points and regions.

<<srcmap.mli>>=
module Str:
sig
    val point       : point  -> string
    val region      : region -> string
end
@

% ------------------------------------------------------------------  
\subsection{Implementation}
% ------------------------------------------------------------------  

A single compilation unit can easily contain some thousand lines of
code and at least as many synchronization points. An implementation
should thus pay attention to memory requirements and run time
performance. 

<<srcmap.ml>>=
type pos            = int
type rgn            = pos * pos
type location       = string    (* file   *)
                    * int       (* line   *)
                    * int       (* column *)
<<srcmap.ml>>=
let null = (0,0)
@

A [[syncpoint]] associates a [[pos]] with a [[location]]. To
lower memory requirements a bit this could be also defined as a
quadruple. 

<<srcmap.ml>>=
type syncpoint      = pos * location
@

We have chosen to use an array to implement a source map.  Binary
search can be used to implement the lookup operation and an array
is compact in memory.  When an array fills up it is copied
into a new one twice of the size of the old. 

Using an array also requires the restriction mentioned above:  sync
point positions must have an increasing order.  This could be dropped
when the array is sorted before it is first used for the lookup
operation.

Storing the file name for every sync point requires lots of memory,
especially when long path names are involved.  The number of different
files referenced by all sync point is probably small.  Storing every
name only once thus can help to save memory.  For this purpose a hash
table is established.  A file name is never stored directly in the
array but looked up first in the hash table.  The instance found there
goes into the array.  Although it looks like the one from the location
it is a different one that is shared among all sync points using this
name.

<<srcmap.ml>>=
type map =          { mutable points:       syncpoint array 
                    ; mutable top:          int
                    ; files :               (string, string) Hashtbl.t
                    }
type point          = map * pos
type region         = map * rgn
@

The [[top]] component maintains the index of the first free position
in the [[points]] array.  In \ocaml~every array cell must be
initialized upon creation.  We use [[undefined]] for this.  The
initial size of the array is [[size]].

<<srcmap.ml>>=
let size        =  2    (* small to test alloc *)
let undefined   =  (0, ("undefined", -1, -1))    

<<srcmap.ml>>=
let mk () =
    { points  = Array.create size undefined 
    ; top     = 0
    ; files   = Hashtbl.create 17
    }    
@

To prevent that the array fills up [[alloc]] makes sure there is at
least space for the next sync point.  In case the array is full it
copies the existing array into a new one, twice of the size of the
old. 

<<srcmap.ml>>=

let alloc srcmap =
    let length = Array.length srcmap.points in
        if   srcmap.top < length then 
            ()
        else 
            let points' = Array.create length undefined in
                srcmap.points <- Array.append srcmap.points points'
@            

Synchronizing means simply to enter the position and the
corresponding location into the array.  The file name in the location
is replaced by an instance that comes from the hash table and is
shared by many sync points.  We check also for the increasing order of
positions.

<<srcmap.ml>>=
let sync srcmap pos (file,line,col) =
    let _     = alloc srcmap in
    let file' = try  Hashtbl.find srcmap.files file
                with Not_found -> ( Hashtbl.add srcmap.files file file
                                  ; file
                                  ) 
    in
    let location' = (file', line, col) in
    let top   = srcmap.top   in
        ( assert ((pos = 0) || (fst srcmap.points.(top-1) < pos))
        ; srcmap.points.(top) <- (pos,location')
        ; srcmap.top <- srcmap.top + 1
        )
@

[[last]] returns the location of the last sync point. It is useful
to get the current file name and line number.

<<srcmap.ml>>=
let last map =
    ( assert (map.top > 0 && map.top <= Array.length map.points)
    ; snd map.points.(map.top-1)
    )
@

Entering a sync point for a new line is so common that it deserves
its own function.  The sync point is actually at the position
following the newline character because we know that this will be at the
beginning of the next line; thus [[position]] must point to this first
character of the new line.  The new line is in the same file as the
last sync point.

Since [[last]] already returns the shared instance of the file name, the
hash table lookup in [[sync]] is superficial. Because [[nl]] is the most
frequently called sync function it is worth implementing it as a
specialed version of [[sync]] instead of calling [[sync]]:

<<nl specification>>=
let nl map pos = 
    let (file, line, _) = last map in
        sync map pos (file, line+1, 1)
@

<<srcmap.ml>>=
let nl srcmap pos =
    let _               = alloc srcmap  in
    let (file, line, _) = last srcmap   in
    let location' = (file, line+1,1) in
    let top   = srcmap.top   in
        ( assert ((pos = 0) || (fst srcmap.points.(top-1) < pos))
        ; srcmap.points.(top) <- (pos,location')
        ; srcmap.top <- srcmap.top + 1
        )
@
        
Function [[cmp]] compares a [[pos]] with a [[(pos,location)]]
pair; the [[pos]] is the one we like to find in the array.

<<srcmap.ml>>=
let cmp x (y,_) = compare x y
@

We want to find the element in the array with the position we are
looking for, or, if it is not there, the element to the left of it.
We expect that the array is not empty when it is used and secure this
by an assertion.  Only the first [[length]] entries are searched in
the array.

<<srcmap.ml>>=
let search x array length cmp =
    let rec loop left right =
        if left > right then
            ( assert (0 <= right && right < Array.length array)
            ; array.(right)
            )
        else
            let pivot = (left + right)/2 in
            let res   = cmp x array.(pivot) in
            let _     = assert (0 <= pivot && pivot < Array.length array) in
                
                if res = 0 then 
                    array.(pivot)
                else if res < 0 then
                    loop left (pivot-1)
                else
                    loop (pivot+1) right
    in
        ( assert (length > 0)
        ; loop 0 (length-1)
        )
@

To calculate the location of a position we have to find the sync
point to its left.  We do a binary search for this point in the map
which gives us a location.  The actual location is possibly to the
right of this point:  we simply have to add the missing columns to go
there.

<<srcmap.ml>>=
let location map pos =
    let pos',(file,line,col) = search pos map.points map.top cmp in
    (file,line,pos - pos' + col)
@

To aid debugging we provide a function [[dump]] to write the
contents of a [[srcmap]] to stdout.

<<srcmap.ml>>=
let dump map =
    let point (pos,(file,line,col)) = 
        Printf.printf "%5d: %-32s %4d %3d\n" pos file line col
    in
        for i=0 to map.top-1 do
            point map.points.(i)
        done
@

For reporting locations to the user they must be available as
strings. The [[Str]] module provides conversions.

<<srcmap.ml>>=
module Str = struct
    let point  (map,pos) =
      let (file,line,column) = location map pos in
      Printf.sprintf "File \"%s\", line %d, character %d" file line column

    
    let region (map,rgn) =
        match rgn with 
        | (0,0)        -> Printf.sprintf "<unknown location>"
        | (left,right) -> 
        let (file1,l1,col1) = location map left   in
        let (file2,l2,col2) = location map right  in
        let (=$=) : string -> string -> bool = Pervasives.(=) in
            if file1 =$= file2 && l1 = l2 then
                Printf.sprintf 
                "File \"%s\", line %d, characters %d-%d" file1 l1 col1 col2
            else if file1 =$= file2 then
                Printf.sprintf 
                "File \"%s\", line %d, character %d - line %d, character %d"
                file1 l1 col1 l2 col2
            else
                Printf.sprintf 
                "File \"%s\", line %d, character %d - file %s, line %d, character %d"
                file1 l1 col2 file2 l2 col2
end
@
