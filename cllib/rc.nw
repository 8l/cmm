
% ------------------------------------------------------------------ 
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
\section{Generic Configuration Files}
% ------------------------------------------------------------------ 

This module provides a parser for generic configuration files.  A
configuration file binds names to values, where values can be
integers, floats, booleans, strings and lists of the mentioned simple
types. 
        
\begin{verbatim}
        rcfile  : rclines EOF

        rclines :
                | rclines rcline

        rcline  : ID EQUAL value
                | ID EQUAL values

        value   : ID
                | STR
                | TRUE
                | FALSE
                | INT
                | FLOAT

        values  : value COMMA value
                | values COMMA value

        digit       = ['0'-'9']
        letter      = ['a'-'z' 'A'-'Z' '_']
        ID          = letter (letter|digit)*
        INT         = digit+
        FLOAT       = integer '.' integer ('E' ('+'|'-')? integer)? 
        TRUE        = "true"
        FALSE       = "false" 
        STR         = '"' .... '"'      
\end{verbatim}

Comments start with a [[#]] and reach to the line end.  The
representation of values is defined in the module [[Rc_ast]].  Both
strings and id values are represented as [[RCstr]]; this means, that
string values made up from digits and letters don't need to be
included into double quotes.
         
% ------------------------------------------------------------------ 
\subsection{Interface}
% ------------------------------------------------------------------         

<<rc.mli>>=
type id         = Rc_ast.id
type rc         = Rc_ast.rc
type rcdict     = Rc_ast.rcdict

exception       Error of string         (* reports parse/scan errors *)
@

[[find id dict]] returns the value bound to [[id]] or raises [[Not_found]]
in case there is no binding.

<<rc.mli>>=
val find        : id -> rcdict -> rc 
@

[[read file]] reads onfiguration from [[file]].

<<rc.mli>>=
val read        : string -> rcdict
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

<<rc.ml>>=
type id         = Rc_ast.id
type rc         = Rc_ast.rc
type rcdict     = Rc_ast.rcdict

exception Error of string
let error msg   = raise (Error msg)
@

[[find id rcdict]] looks up a value for [[id]]; raises [[Not_found]] in
case [[id]] is undefined.

<<rc.ml>>=
let find   = Rc_ast.find
let asList = Rc_ast.asList
@

[[read file]] reads rcfile [[file]], parses it, and returns it contents 
as value of type [[rcfile]].

<<rc.ml>>=
let read file = 
    let file_ic         = try open_in file with 
                          Sys_error msg -> error msg            in
    let lexbuf          = Lexing.from_channel file_ic           in
    let finally ()      = close_in file_ic                      in
    let rc              = try 
                                Rc_parse.rcfile Rc_scan.scan lexbuf
                          with
                          | Parsing.Parse_error ->
                                finally ();
                                error ("parse error in `" ^ file ^ "'")
                          | Rc_scan.ScanError msg -> error msg
                          | e                   ->
                                finally ();
                                raise e                         in
        finally ();
        rc
@

% ------------------------------------------------------------------ 
\subsection{Abstract Syntax}
% ------------------------------------------------------------------ 

<<rc_ast.mli>>=
type id         = string

type rc         =
                | RCstr         of string
                | RCbool        of bool
                | RCint         of int
                | RCfloat       of float
                | RClist        of rc list
@

[[rcdict]] is a dictionary that maps [[id]]s to [[rc]] values. It captures 
a configuration read from a file using the [[read]] function. 

<<rc_ast.mli>>=
type rcdict
@

[[find id dict]] returns the value bound to [[id]] or raises [[Not_found]]
in case there is no binding *)
   
<<rc_ast.mli>>=
val find        : id -> rcdict -> rc 
@

The following functions are used by the parser and are not for
clients of [[Rc]].

[[empty]] - an empty [[rcdict]]

<<rc_ast.mli>>=
val empty       : rcdict 
@

[[add id rc dict]] adds binding [[id]] $\to$ [[rc]] to [[dict]].

<<rc_ast.mli>>=
val add         : id -> rc -> rcdict -> rcdict 
@

[[asList dict]] returns all bindings of [[dict]] in a list; for debugging.

<<rc_ast.mli>>=
val asList      : rcdict -> (id * rc) list
@

<<rc_ast.ml>>=
type id         =       string

type rc         =
                | RCstr of string
                | RCbool of bool
                | RCint of int
                | RCfloat of float
                | RClist of rc list

module IdMap    = 
    Map.Make(struct type t=id let compare=Pervasives.compare end)

(* rc files are maps (or dictinoaries) which map identifiers 
   to values (of type rc from above) *)
                
type rcdict     =       rc IdMap.t


let empty               = IdMap.empty
let find                = IdMap.find
let add                 = IdMap.add

(* [asList dictfile] returns the contents of [dictfile] as a lsit of
   id/rc pairs. This is for debugging only *)

let asList dict =
    let insert id rc list = (id,rc)::list       in
        IdMap.fold insert dict []
@
       

% ------------------------------------------------------------------ 
\subsection{Parser}
% ------------------------------------------------------------------ 

<<rc_parse.mly>>=
%{
open Rc_ast 
%}

%token <string> STR
%token <string> ID
%token <bool>   BOOL
%token <float>  FLOAT
%token <int>    INT

%token COMMA EQUAL TRUE FALSE EOF 


%start                  rcfile
%type  <Rc_ast.rcdict>  rcfile

%%

rcfile          : rclines EOF                   { $1            }

rclines         : /**/                          { empty         }
                | rclines rcline                { let (id,rc) = $2 in
                                                  add id rc $1
                                                } 

rcline          : ID EQUAL value                { ($1,$3)       }
                | ID EQUAL values               { ($1,RClist(List.rev $3))  }

value           : ID                            { RCstr($1)     }
                | STR                           { RCstr($1)     }
                | TRUE                          { RCbool(true)  }
                | FALSE                         { RCbool(false) }
                | INT                           { RCint($1)     }
                | FLOAT                         { RCfloat($1)   }

values          : value  COMMA value            { [$3  ; $1]    }
                | values COMMA value            {  $3 :: $1     }
@

% ------------------------------------------------------------------ 
\subsection{Scanner}
% ------------------------------------------------------------------ 


<<rc_scan.mll>>=
{
    
    open Rc_parse       (* tokens are defined here *)

    exception ScanError of string

    let error msg = raise (ScanError msg)

    let keywords = Hashtbl.create 127
    let keyword s = Hashtbl.find keywords s
    let _ = Array.iter (fun (x,y) -> Hashtbl.add keywords x y)
        [|
             ("true"        ,TRUE);
             ("false"       ,FALSE);
        |]

    let get = Lexing.lexeme

    (* buffer for string literals *)
    let strBuffer = Buffer.create 80

    let debug msg = print_endline msg

    let init () =
        Buffer.clear strBuffer
}

<<rc_scan.mll>>=
let digit       = ['0'-'9']
let letter      = ['a'-'z' 'A'-'Z' '_']
let ident       = letter (letter|digit)*
let integer     = digit+
let float       = integer '.' integer ('E' ('+'|'-')? integer)? 
let ws          = [' ' '\r' '\011' '\012' ]
let nl          = '\n'
let tab         = '\t'


<<rc_scan.mll>>=
rule scan = parse
    | eof               { EOF }
    | ws                { scan lexbuf }
    | nl                { scan lexbuf }
    | tab               { scan lexbuf }
    | '#' [^'\n']* nl   { scan lexbuf } 

    | ident             { let s = get lexbuf in
                          try  keyword s 
                          with Not_found -> debug "id"; ID(s) 
                        }
    | integer           { try 
                            INT   (int_of_string (get lexbuf)) 
                          with Failure _ -> 
                            let msg = "illegal integer `" ^ (get lexbuf) ^ "'"
                            in  error msg 
                        }
    | float             { try
                            FLOAT (float_of_string (get lexbuf)) 
                          with Failure _ -> 
                            let msg = "illegal float `" ^ (get lexbuf) ^ "'"
                            in  error msg 
                        }
    | '"'               { Buffer.clear strBuffer
                        ; string lexbuf 
                        ; STR(Buffer.contents strBuffer)
                        }
                        
    | '='               { EQUAL }
    | ','               { COMMA }
    
    |  _                { let c = get lexbuf in
                            error ("illegal character `" ^ c ^ "'")
                        }    
<<rc_scan.mll>>=
and string = parse
    | eof               { error "unterminated string" }
    | '"'               { (* return *) }

    | '\\' _            { let c = String.get (get lexbuf) 1 in
                            Buffer.add_char strBuffer c;
                            string lexbuf
                        }
    | _                 { Buffer.add_string strBuffer (get lexbuf)
                        ; string lexbuf
                        }  
@

