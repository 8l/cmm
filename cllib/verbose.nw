% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
\section{Diagnostic output}

Uses environment level [[VERBOSITY]] to make noise.
<<verbose.mli>>=
val say : int -> string list -> unit
  (* if VERBOSITY >= k, then say k l writes every string in l to stderr *)
val eprintf : int -> ('a, out_channel, unit) format -> 'a
  (* if VERBOSITY >= k, then say k l writes every string in l to stderr *)
val verbosity : int  (* current verbosity *)
@ 
<<verbose.ml>>=
let verbosity = try int_of_string (Sys.getenv "VERBOSITY") with _ -> 0
let err l = List.iter prerr_string l; flush stderr
let say k = if verbosity >= k then err else ignore

let rec ign x = Obj.magic ign
let eprintf k = if verbosity >= k then Printf.eprintf else ign
