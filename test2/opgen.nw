% -*- mode: Noweb; noweb-code-mode: lua-mode -*-

\section{Generating operator tests}

The basic idea is to test C~code and {\PAL}~code on random data.
We do this as follows:
\begin{enumerate} 
\item
Define a canonical name for each operator, which is the name of the
operator, followed by its type parameters.
If the operator takes multiple type parameters, they are separated by
underscores.
Examples: [[add32]], [[sx8_32]].
\item
For each operator we may wish to test, define a C~function whose name
begins with [[ctest_]], e.g., [[ctest_add32]].
This work may or may not be done with the help of interpreter macros
from the [[interp]] directory.
\item
\label{cmmgen}
From the capability record of a back end, generate an externally callable
implementation of each claimed operator.
Then generate a table in which each record has the following form:
\begin{quote}
\textit{opname}, \textit{{\PAL}-function}, \textit{C-function},
   \textit{print-function}, \emph{stride}
\end{quote}
where \emph{stride} is the number of bytes of memory used as input.

Each function is to have the same signature, i.e.,
\begin{verbatim}
  int (*f)(void *result, void *xarg, void *yarg, void *zarg);
\end{verbatim}
The function takes pointers to three arguments, some of which may be
ignored, and it writes its result through the [[result]] pointer.
The value returned is the number of bytes written.
(Except a print function returns zero.)
\item
Have a test driver walk the table and compare {\PAL} with~C on random
inputs. 
\end{enumerate}

The code here implements step~\ref{cmmgen}: generating the {\PAL} code
and the table.


<<opgen.lua>>=
$debug 1
Testgen = Testgen or { }
Testgen.hard_round = 'true'  -- use hardware rounding modes
@ 
We want to be able to emit things into the data section even when
we're in the middle of something else.
<<opgen.lua>>=
Testgen.pending_data = { }

function Testgen.emitdata(...)
  if Testgen.section == 'data' then
    Util.call(w, arg)
  else
    tinsert(Testgen.pending_data, Util.call(format, arg))
  end
end

function Testgen.drain_pending(newsec)
  local i = 1
  while Testgen.pending_data[i] do
    write(Testgen.pending_data[i])
    i = i + 1
  end
  Testgen.pending_data = { }
  Testgen.section = newsec
end
@ 
Label generation.
<<opgen.lua>>=
Testgen.lcount = 1

function Testgen.label()
  local l = 'tL' .. Testgen.lcount
  Testgen.lcount = Testgen.lcount + 1
  return l
end
@ 
We like string literals, so here's support for them.
We accept only characters we know don't have to be escaped.
<<opgen.lua>>=
function Testgen.emitstring(s, l)
  l = l or Testgen.label()
  if strfind(s, '[^%a%d _!@#$%%^&*()[%].,-+=]') then
    error('suspicious character in C-- literal string ' .. Inspect.image(s))
  end
  local data = format('  %s: bits8[] "%s\\0";\n', l, s)
  Testgen.emitdata(data)
  return l
end
@ 
Canonical name of an operator, as described above.
<<opgen.lua>>=
function Testgen.canonical_name(op)
  local s = op.name
  local i = 1
  while op.widths[i] do
    if i > 1 then s = s .. '_' end
    s = s .. op.widths[i]
    i = i + 1
  end
  return s
end
@ 
Number of memory cells needed to represent a value.
<<opgen.lua>>=
function Testgen.round_up(k, n) -- round k to multiple of n
  return n * floor((k + n - 1) / n)
end

function Testgen.cellcount(t, ty) -- number of cells to represent value of type ty
  if not ty then error('missing argument to Testgen.cellcount') end
  if type(ty) == 'string' then
    return 1
  else
    local m = Target.metrics(t)
    return floor((ty + m.memsize - 1) / m.memsize)
  end
end
@ 
Stride of an operator---number of memcells in the largest argument or result.
<<opgen.lua>>=
function Testgen.stride(t, op)
  local args, result = Rtlop.mono(op)
  local n = Testgen.cellcount(t, result)
  local i = 1
  while args[i] do
    local m = Testgen.cellcount(t, args[i])
    if m > n then n = m end
    i = i + 1
  end
  return n
end
@   
And off we go\ldots
<<opgen.lua>>=
function Testgen.emit(t)
  t = t or backend or error('default back end did not get set')
  if type(t) == 'table' then t = t.target end
  if type(t) ~= 'userdata' then
    error(tostring(t) .. ' is not a target')
  end
  local cap = Target.capabilities(t)
  Testgen.memsizes = cap.memory or error('no memsizes?!')
  Testgen.itemps = cap.itemps or error('no itemps?!')
  Testgen.ftemps = cap.ftemps or error('no ftemps?!')
  local name = Target.name(t)
  local metrics = Target.metrics(t)
  Target.emitmetrics(t)
  w('bits2 rm = "IEEE 754 rounding mode";\n\n')

  w('section "data" {\n')
  w('  align 8;\n')
  w('  optable:\n')
  w('  export optable;\n')
  w('  bits%d[] {\n', metrics.pointersize)
  Testgen.section = 'pending'

  local block_stride = 200

  if cap.block_copy then
    local stride = block_stride
    w('    %s, cmmtest_copy%d, ctest_copy%d, cprint_copy%d, %d,\n',
      Testgen.emitstring(format("copy%d", stride)), stride, stride, stride, stride)
    Testgen.emitdata('  import ctest_copy%d, cprint_copy%d;\n', stride, stride)
  end

  local defined = { }
  local i = 1
  local ops = cap.operators
  while ops[i] do
    local op = ops[i]
    defined[op.name] = 1
    local opname = Testgen.canonical_name(op)
    local namel = Testgen.emitstring(opname)
    w('    %s, cmmtest_%s, ctest_%s, cprint_%s, %d,\n',
      namel, opname, opname, opname, Testgen.stride(t, op))
    Testgen.emitdata('  import ctest_%s, cprint_%s;\n', opname, opname)
    i = i + 1
  end
  w('  0, 0, 0, 0\n')
  w('  };\n\n')

  Testgen.drain_pending('data')
  w('}\n')

  if cap.block_copy then
    local stride = block_stride
    local opname = 'copy' .. stride
    local ptr = metrics.pointersize
    w('foreign "C" cmmtest_%s("address" bits%d pr, "address" bits%d px, ' ..
      '"address" bits%d py, "address" bits%d pz) {\n',
      opname, ptr, ptr, ptr, ptr)
    w('  bits%d[pr] = bits%d[px];\n', stride, stride)
    w('  foreign "C" return (%d);\n', Testgen.cellcount(t, stride))
    w('}\n\n')
  end

  i = 1
  while ops[i] do
    local op = ops[i]
    local opname = Testgen.canonical_name(op)
    local ptr = metrics.pointersize
    w('foreign "C" cmmtest_%s("address" bits%d pr, "address" bits%d px, ' ..
      '"address" bits%d py, "address" bits%d pz) {\n',
      opname, ptr, ptr, ptr, ptr)
    Testgen.emitbody(t, op)
    local _, result = Rtlop.mono(op)
    w('  foreign "C" return (%d);\n', Testgen.cellcount(t, result))
    w('}\n\n')
    i = i + 1
  end


  w('section "data" {\n')
  w('  unimptable:\n')
  w('  export unimptable;\n')
  w('  bits%d[] {\n', metrics.pointersize)
  Testgen.section = 'pending'
  i = 1
  local allops = Rtlop.opnames ()
  while allops[i] do
    if not defined[allops[i]] then
      w('    %s,\n', Testgen.emitstring(allops[i]))
    end
    i = i + 1
  end
  w('    0\n')
  w('  };\n')
  Testgen.drain_pending('data')
  w('}\n')

  --  if cap.iwiden then Target.widen_ok (name, 'integer')        end
  --  if cap.fwiden then Target.widen_ok (name, 'floating-point') end
  --  if cap.block_copy then <announce block-copy support> end
end
@ 
<<opgen.lua>>=

Testgen.floats = Util.set { 'f2f', 'f2i', 'i2f', 'fadd', 'fsub', 'fdiv', 'fmul' }
Testgen.polymorphic =
  Util.set { 'f2f', 'f2i', 'i2f', 'sx', 'zx', 'lobits', 'NaN', 'minf', 'pinf',
             'mzero', 'pzero', }
Testgen.shifts = Util.set { 'shl', 'shrl', 'shra', 'rotl', 'rotr' }

Testgen.argnames = { 'x', 'y', 'z' }

function Testgen.emitbody(t, opr)
  local metrics = Target.metrics(t)
  local args, result = Rtlop.mono(opr)
  local tyw = { bool = 1 }
  local i = 1
  local argnames = Testgen.argnames
  local opname = Testgen.polymorphic[opr.name] and (opr.name .. result) or opr.name
  local apps = { opname }
  while args[i] do
    local arg = Testgen.getmem(metrics.memsize, 'p' .. argnames[i], args[i])
    if Testgen.shifts[opr.name] and i == 2 then
      arg = Testgen.app('modu', arg, opr.widths[1] .. ' :: bits' .. opr.widths[1])
    end
    tinsert(apps, arg)
    i = i + 1
  end
  write('  ',
        Testgen.setmem(metrics.memsize, 'pr', result, Util.call(Testgen.app, apps)),
        ';\n')
end

function Testgen.findmin(n, l)
  -- return smallest element in l containing n
  local candidate
  local i = 1
  while l[i] do
    local m = l[i]
    if m >= n and (not candidate or m < candidate) then
      candidate = m
    end
    i = i + 1
  end
  return candidate
end

function Testgen.findmemsize(ty, memsize) -- smallest legal memsize containing ty
  return Testgen.findmin(ty, Testgen.memsizes) or Testgen.round_up(ty, memsize)
end

function Testgen.tempfor(ty)
  return Testgen.findmin(ty, Testgen.itemps) or Testgen.findmin(ty, Testgen.ftemps)
    or error('cannot find temporary for value of types bits' .. ty)
end

function Testgen.getmem(memsize, addr, ty)
  if ty == 'bool' then
    -- following generates evil 8-bit temps
    -- return Testgen.bool(Testgen.lobits(memsize, 1, Testgen.memref(memsize, addr)))
    local tmpwidth = Testgen.tempfor(1)
    return Testgen.bool(Testgen.lobits(tmpwidth, 1,
                 Testgen.zx(memsize, tmpwidth, Testgen.memref(memsize, addr)))) 
  elseif Testgen.hard_round and ty == 2 then
    return 'rm'
  else
    local tmpwidth = Testgen.tempfor(ty)
    local multiple = Testgen.findmemsize(ty, memsize)
    local ref = Testgen.memref(multiple, addr)
    local tmp = Testgen.zx(multiple, tmpwidth, ref) 
    return Testgen.lobits(tmpwidth, ty, tmp)
  end
end

function Testgen.setmem(memsize, addr, ty, val)
  if ty == 'bool' then
    -- following generates evil 8-bit temps
    -- return Testgen.memref(memsize, addr) .. ' = ' ..
    --   Testgen.zx(1, memsize, Testgen.bit(val))
    local tmpwidth = 32 --- bogus
    return Testgen.memref(memsize, addr) .. ' = ' ..
      Testgen.lobits(tmpwidth, memsize, Testgen.zx(1, tmpwidth, Testgen.bit(val)))
  else
    local tmpwidth = Testgen.tempfor(ty)
    local multiple = Testgen.findmemsize(ty, memsize)
    local tmp = Testgen.zx(ty, tmpwidth, val) 
    local ref = Testgen.lobits(tmpwidth, multiple, tmp)
    return Testgen.memref(multiple, addr) .. ' = ' .. ref
  end
end

function Testgen.app(op, ...)
  local s = '%' .. op .. '('
  local i = 1
  while arg[i] do s = s .. arg[i] .. ', '; i = i + 1; end
  s = s .. ')'
  return s
end

function Testgen.bit (v) return Testgen.app('bit',  v) end
function Testgen.bool(v) return Testgen.app('bool', v) end
    

function Testgen.zx(n, w, v)
  if n == w then return v
  else return format('%%zx%d(%s)', w, v)
  end
end

function Testgen.sx(n, w, v)
  if n == w then return v
  else return format('%%sx%d(%s)', w, v)
  end
end

function Testgen.lobits(w, n, v)
  if n == w then return v
  else return format('%%lobits%d(%s)', n, v)
  end
end

function Testgen.memref(size, addr)
  return format('bits%d[%s]', size, addr)
end
