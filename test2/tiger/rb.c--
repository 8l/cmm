target byteorder little;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_flush" as flush;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_ord" as ord;
import bits32 "tig_chr" as chr;
import bits32 "tig_size" as size;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_not" as not;
import bits32 "tig_exit" as exit;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_call_gc" as call_gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
import bits32 "tig_set_handler" as set_handler;
import bits32 "tig_raise" as raise;
import bits32 "tig_unwind" as unwind;
export tiger_main;

bits32 alloc_ptr;
import space_end;

section "data" { align 4;
 Lgbl_289: bits32 { 0 }; bits8[] "\000";
 Lgbl_271: bits32 { 1 }; bits8[] "z\000";
 Lgbl_252: bits32 { 1 }; bits8[] "A\000";
 Lgbl_240: bits32 { 1 }; bits8[] "\t\000";
 Lgbl_208: bits32 { 6 }; bits8[] "error!\000";
 Lgbl_52: bits32 { 2 }; bits8[] "? \000";
 Lgbl_255: bits32 { 1 }; bits8[] "Z\000";
 Lgbl_57: bits32 { 1 }; bits8[] "\n\000";
 Lgbl_264: bits32 { 1 }; bits8[] "a\000";
}

err_43(bits32 pfp,bits32 s) {
 span 1 err_43_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = s;
  bits32 temp_62;
  bits32 temp_61;
  bits32 temp_60;
  bits32 temp_59;
  bits32 temp_58;
  bits32 temp_56;
  bits32 temp_55;
  bits32 temp_54;
  bits32 temp_53;
  temp_53 = alloc_ptr;
  temp_54 = foreign "C"  print(Lgbl_52) also aborts ;
  alloc_ptr = temp_53;
  /* eliminated: temp_54 */
  temp_55 = alloc_ptr;
  temp_56 = foreign "C"  print(bits32[%add(fp, 4)]) also aborts ;
  alloc_ptr = temp_55;
  /* eliminated: temp_56 */
  temp_58 = alloc_ptr;
  temp_59 = foreign "C"  print(Lgbl_57) also aborts ;
  alloc_ptr = temp_58;
  /* eliminated: temp_59 */
  temp_60 = alloc_ptr;
  temp_61 = foreign "C"  exit(1) also aborts ;
  alloc_ptr = temp_60;
  temp_62 = temp_61;
  return(temp_62);
}}
section "data" {
 err_43_gc_data:
   bits32[] { 2,1,1 };
   bits32[] { 11,1,1,0,0,0,0,0,0,0,0,0 };
}

balance_44(bits32 pfp,bits32 color,bits32 count,bits32 word,bits32 left,bits32 right) {
 span 1 balance_44_gc_data {
  stackdata { align 4; fp : bits32[6]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = color;
  bits32[fp+8] = count;
  bits32[fp+12] = word;
  bits32[fp+16] = left;
  bits32[fp+20] = right;
  bits32 temp_96;
  bits32 temp_92;
  bits32 temp_89;
  bits32 temp_88;
  bits32 temp_85;
  bits32 temp_84;
  bits32 temp_80;
  bits32 temp_79;
  bits32 temp_75;
  bits32 temp_71;
  bits32 temp_67;
  bits32 temp_63;
  bits32 temp_196;
  bits32 temp_192;
  bits32 temp_188;
  bits32 temp_184;
  bits32 temp_180;
  bits32 temp_177;
  bits32 temp_176;
  bits32 temp_173;
  bits32 temp_172;
  bits32 temp_169;
  bits32 temp_168;
  bits32 temp_165;
  bits32 temp_164;
  bits32 temp_160;
  bits32 temp_156;
  bits32 temp_152;
  bits32 temp_148;
  bits32 temp_145;
  bits32 temp_144;
  bits32 temp_141;
  bits32 temp_140;
  bits32 temp_137;
  bits32 temp_136;
  bits32 temp_132;
  bits32 temp_128;
  bits32 temp_124;
  bits32 temp_120;
  bits32 temp_117;
  bits32 temp_116;
  bits32 temp_113;
  bits32 temp_112;
  bits32 temp_109;
  bits32 temp_108;
  bits32 temp_104;
  bits32 temp_100;
  if(%eq(bits32[%add(fp, 4)], bits32[%add(bits32[fp], 8)])) {goto LifTrue_64;} else {goto LifFalse_65;}
  LifTrue_64:
  temp_63 = %sx32(%bit(%ne(bits32[%add(fp, 16)], 0)));
  goto LifEnd_66;
  LifFalse_65:
  temp_63 = 0;
  LifEnd_66:
  if(%ne(temp_63, 0)) {goto LifTrue_68;} else {goto LifFalse_69;}
  LifTrue_68:
  temp_67 = %sx32(%bit(%ne(bits32[%add(bits32[%add(fp, 16)], 12)], 0)));
  goto LifEnd_70;
  LifFalse_69:
  temp_67 = 0;
  LifEnd_70:
  if(%ne(temp_67, 0)) {goto LifTrue_72;} else {goto LifFalse_73;}
  LifTrue_72:
  temp_71 = %sx32(%bit(%eq(bits32[%add(bits32[%add(fp, 16)], 0)], bits32[%add(bits32[fp], 12)])));
  goto LifEnd_74;
  LifFalse_73:
  temp_71 = 0;
  LifEnd_74:
  if(%ne(temp_71, 0)) {goto LifTrue_76;} else {goto LifFalse_77;}
  LifTrue_76:
  temp_75 = %sx32(%bit(%eq(bits32[%add(bits32[%add(bits32[%add(fp, 16)], 12)], 0)], bits32[%add(bits32[fp], 12)])));
  goto LifEnd_78;
  LifFalse_77:
  temp_75 = 0;
  LifEnd_78:
  if(%ne(temp_75, 0)) {goto LifTrue_193;} else {goto LifFalse_194;}
  LifTrue_193:
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_90;} else {goto Lalc_gc_90;}
  Lalc_gc_90:
   call_gc() also aborts ;
  Lalc_91:
  bits32[alloc_ptr] = 24;
  temp_89 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_88 = temp_89;
  bits32[%add(temp_88, 0)] = bits32[%add(bits32[fp], 12)];
  bits32[%add(temp_88, 4)] = bits32[%add(bits32[%add(fp, 16)], 4)];
  bits32[%add(temp_88, 8)] = bits32[%add(bits32[%add(fp, 16)], 8)];
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_81;} else {goto Lalc_gc_81;}
  Lalc_gc_81:
   call_gc() also aborts ;
  Lalc_82:
  bits32[alloc_ptr] = 24;
  temp_80 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_79 = temp_80;
  bits32[%add(temp_79, 0)] = bits32[%add(bits32[fp], 8)];
  bits32[%add(temp_79, 4)] = bits32[%add(bits32[%add(bits32[%add(fp, 16)], 12)], 4)];
  bits32[%add(temp_79, 8)] = bits32[%add(bits32[%add(bits32[%add(fp, 16)], 12)], 8)];
  bits32[%add(temp_79, 12)] = bits32[%add(bits32[%add(bits32[%add(fp, 16)], 12)], 12)];
  bits32[%add(temp_79, 16)] = bits32[%add(bits32[%add(bits32[%add(fp, 16)], 12)], 16)];
  bits32[%add(temp_88, 12)] = temp_79;
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_86;} else {goto Lalc_gc_86;}
  Lalc_gc_86:
   call_gc() also aborts ;
  Lalc_87:
  bits32[alloc_ptr] = 24;
  temp_85 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_84 = temp_85;
  bits32[%add(temp_84, 0)] = bits32[%add(bits32[fp], 8)];
  bits32[%add(temp_84, 4)] = bits32[%add(fp, 8)];
  bits32[%add(temp_84, 8)] = bits32[%add(fp, 12)];
  bits32[%add(temp_84, 12)] = bits32[%add(bits32[%add(fp, 16)], 16)];
  bits32[%add(temp_84, 16)] = bits32[%add(fp, 20)];
  bits32[%add(temp_88, 16)] = temp_84;
  temp_192 = temp_88;
  goto LifEnd_195;
  LifFalse_194:
  if(%eq(bits32[%add(fp, 4)], bits32[%add(bits32[fp], 8)])) {goto LifTrue_93;} else {goto LifFalse_94;}
  LifTrue_93:
  temp_92 = %sx32(%bit(%ne(bits32[%add(fp, 16)], 0)));
  goto LifEnd_95;
  LifFalse_94:
  temp_92 = 0;
  LifEnd_95:
  if(%ne(temp_92, 0)) {goto LifTrue_97;} else {goto LifFalse_98;}
  LifTrue_97:
  temp_96 = %sx32(%bit(%ne(bits32[%add(bits32[%add(fp, 16)], 16)], 0)));
  goto LifEnd_99;
  LifFalse_98:
  temp_96 = 0;
  LifEnd_99:
  if(%ne(temp_96, 0)) {goto LifTrue_101;} else {goto LifFalse_102;}
  LifTrue_101:
  temp_100 = %sx32(%bit(%eq(bits32[%add(bits32[%add(fp, 16)], 0)], bits32[%add(bits32[fp], 12)])));
  goto LifEnd_103;
  LifFalse_102:
  temp_100 = 0;
  LifEnd_103:
  if(%ne(temp_100, 0)) {goto LifTrue_105;} else {goto LifFalse_106;}
  LifTrue_105:
  temp_104 = %sx32(%bit(%eq(bits32[%add(bits32[%add(bits32[%add(fp, 16)], 16)], 0)], bits32[%add(bits32[fp], 12)])));
  goto LifEnd_107;
  LifFalse_106:
  temp_104 = 0;
  LifEnd_107:
  if(%ne(temp_104, 0)) {goto LifTrue_189;} else {goto LifFalse_190;}
  LifTrue_189:
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_118;} else {goto Lalc_gc_118;}
  Lalc_gc_118:
   call_gc() also aborts ;
  Lalc_119:
  bits32[alloc_ptr] = 24;
  temp_117 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_116 = temp_117;
  bits32[%add(temp_116, 0)] = bits32[%add(bits32[fp], 12)];
  bits32[%add(temp_116, 4)] = bits32[%add(bits32[%add(bits32[%add(fp, 16)], 16)], 4)];
  bits32[%add(temp_116, 8)] = bits32[%add(bits32[%add(bits32[%add(fp, 16)], 16)], 8)];
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_110;} else {goto Lalc_gc_110;}
  Lalc_gc_110:
   call_gc() also aborts ;
  Lalc_111:
  bits32[alloc_ptr] = 24;
  temp_109 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_108 = temp_109;
  bits32[%add(temp_108, 0)] = bits32[%add(bits32[fp], 8)];
  bits32[%add(temp_108, 4)] = bits32[%add(bits32[%add(fp, 16)], 4)];
  bits32[%add(temp_108, 8)] = bits32[%add(bits32[%add(fp, 16)], 8)];
  bits32[%add(temp_108, 12)] = bits32[%add(bits32[%add(fp, 16)], 12)];
  bits32[%add(temp_108, 16)] = bits32[%add(bits32[%add(bits32[%add(fp, 16)], 16)], 12)];
  bits32[%add(temp_116, 12)] = temp_108;
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_114;} else {goto Lalc_gc_114;}
  Lalc_gc_114:
   call_gc() also aborts ;
  Lalc_115:
  bits32[alloc_ptr] = 24;
  temp_113 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_112 = temp_113;
  bits32[%add(temp_112, 0)] = bits32[%add(bits32[fp], 8)];
  bits32[%add(temp_112, 4)] = bits32[%add(fp, 8)];
  bits32[%add(temp_112, 8)] = bits32[%add(fp, 12)];
  bits32[%add(temp_112, 12)] = bits32[%add(bits32[%add(bits32[%add(fp, 16)], 16)], 16)];
  bits32[%add(temp_112, 16)] = bits32[%add(fp, 20)];
  bits32[%add(temp_116, 16)] = temp_112;
  temp_188 = temp_116;
  goto LifEnd_191;
  LifFalse_190:
  if(%eq(bits32[%add(fp, 4)], bits32[%add(bits32[fp], 8)])) {goto LifTrue_121;} else {goto LifFalse_122;}
  LifTrue_121:
  temp_120 = %sx32(%bit(%ne(bits32[%add(fp, 20)], 0)));
  goto LifEnd_123;
  LifFalse_122:
  temp_120 = 0;
  LifEnd_123:
  if(%ne(temp_120, 0)) {goto LifTrue_125;} else {goto LifFalse_126;}
  LifTrue_125:
  temp_124 = %sx32(%bit(%ne(bits32[%add(bits32[%add(fp, 20)], 16)], 0)));
  goto LifEnd_127;
  LifFalse_126:
  temp_124 = 0;
  LifEnd_127:
  if(%ne(temp_124, 0)) {goto LifTrue_129;} else {goto LifFalse_130;}
  LifTrue_129:
  temp_128 = %sx32(%bit(%eq(bits32[%add(bits32[%add(fp, 20)], 0)], bits32[%add(bits32[fp], 12)])));
  goto LifEnd_131;
  LifFalse_130:
  temp_128 = 0;
  LifEnd_131:
  if(%ne(temp_128, 0)) {goto LifTrue_133;} else {goto LifFalse_134;}
  LifTrue_133:
  temp_132 = %sx32(%bit(%eq(bits32[%add(bits32[%add(bits32[%add(fp, 20)], 16)], 0)], bits32[%add(bits32[fp], 12)])));
  goto LifEnd_135;
  LifFalse_134:
  temp_132 = 0;
  LifEnd_135:
  if(%ne(temp_132, 0)) {goto LifTrue_185;} else {goto LifFalse_186;}
  LifTrue_185:
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_146;} else {goto Lalc_gc_146;}
  Lalc_gc_146:
   call_gc() also aborts ;
  Lalc_147:
  bits32[alloc_ptr] = 24;
  temp_145 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_144 = temp_145;
  bits32[%add(temp_144, 0)] = bits32[%add(bits32[fp], 12)];
  bits32[%add(temp_144, 4)] = bits32[%add(bits32[%add(fp, 20)], 4)];
  bits32[%add(temp_144, 8)] = bits32[%add(bits32[%add(fp, 20)], 8)];
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_138;} else {goto Lalc_gc_138;}
  Lalc_gc_138:
   call_gc() also aborts ;
  Lalc_139:
  bits32[alloc_ptr] = 24;
  temp_137 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_136 = temp_137;
  bits32[%add(temp_136, 0)] = bits32[%add(bits32[fp], 8)];
  bits32[%add(temp_136, 4)] = bits32[%add(fp, 8)];
  bits32[%add(temp_136, 8)] = bits32[%add(fp, 12)];
  bits32[%add(temp_136, 12)] = bits32[%add(fp, 16)];
  bits32[%add(temp_136, 16)] = bits32[%add(bits32[%add(fp, 20)], 12)];
  bits32[%add(temp_144, 12)] = temp_136;
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_142;} else {goto Lalc_gc_142;}
  Lalc_gc_142:
   call_gc() also aborts ;
  Lalc_143:
  bits32[alloc_ptr] = 24;
  temp_141 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_140 = temp_141;
  bits32[%add(temp_140, 0)] = bits32[%add(bits32[fp], 8)];
  bits32[%add(temp_140, 4)] = bits32[%add(bits32[%add(bits32[%add(fp, 20)], 16)], 4)];
  bits32[%add(temp_140, 8)] = bits32[%add(bits32[%add(bits32[%add(fp, 20)], 16)], 8)];
  bits32[%add(temp_140, 12)] = bits32[%add(bits32[%add(bits32[%add(fp, 20)], 16)], 12)];
  bits32[%add(temp_140, 16)] = bits32[%add(bits32[%add(bits32[%add(fp, 20)], 16)], 16)];
  bits32[%add(temp_144, 16)] = temp_140;
  temp_184 = temp_144;
  goto LifEnd_187;
  LifFalse_186:
  if(%eq(bits32[%add(fp, 4)], bits32[%add(bits32[fp], 8)])) {goto LifTrue_149;} else {goto LifFalse_150;}
  LifTrue_149:
  temp_148 = %sx32(%bit(%ne(bits32[%add(fp, 20)], 0)));
  goto LifEnd_151;
  LifFalse_150:
  temp_148 = 0;
  LifEnd_151:
  if(%ne(temp_148, 0)) {goto LifTrue_153;} else {goto LifFalse_154;}
  LifTrue_153:
  temp_152 = %sx32(%bit(%ne(bits32[%add(bits32[%add(fp, 20)], 12)], 0)));
  goto LifEnd_155;
  LifFalse_154:
  temp_152 = 0;
  LifEnd_155:
  if(%ne(temp_152, 0)) {goto LifTrue_157;} else {goto LifFalse_158;}
  LifTrue_157:
  temp_156 = %sx32(%bit(%eq(bits32[%add(bits32[%add(fp, 20)], 0)], bits32[%add(bits32[fp], 12)])));
  goto LifEnd_159;
  LifFalse_158:
  temp_156 = 0;
  LifEnd_159:
  if(%ne(temp_156, 0)) {goto LifTrue_161;} else {goto LifFalse_162;}
  LifTrue_161:
  temp_160 = %sx32(%bit(%eq(bits32[%add(bits32[%add(bits32[%add(fp, 20)], 12)], 0)], bits32[%add(bits32[fp], 12)])));
  goto LifEnd_163;
  LifFalse_162:
  temp_160 = 0;
  LifEnd_163:
  if(%ne(temp_160, 0)) {goto LifTrue_181;} else {goto LifFalse_182;}
  LifTrue_181:
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_174;} else {goto Lalc_gc_174;}
  Lalc_gc_174:
   call_gc() also aborts ;
  Lalc_175:
  bits32[alloc_ptr] = 24;
  temp_173 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_172 = temp_173;
  bits32[%add(temp_172, 0)] = bits32[%add(bits32[fp], 12)];
  bits32[%add(temp_172, 4)] = bits32[%add(bits32[%add(bits32[%add(fp, 20)], 12)], 4)];
  bits32[%add(temp_172, 8)] = bits32[%add(bits32[%add(bits32[%add(fp, 20)], 12)], 8)];
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_166;} else {goto Lalc_gc_166;}
  Lalc_gc_166:
   call_gc() also aborts ;
  Lalc_167:
  bits32[alloc_ptr] = 24;
  temp_165 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_164 = temp_165;
  bits32[%add(temp_164, 0)] = bits32[%add(bits32[fp], 8)];
  bits32[%add(temp_164, 4)] = bits32[%add(fp, 8)];
  bits32[%add(temp_164, 8)] = bits32[%add(fp, 12)];
  bits32[%add(temp_164, 12)] = bits32[%add(fp, 16)];
  bits32[%add(temp_164, 16)] = bits32[%add(bits32[%add(bits32[%add(fp, 20)], 12)], 12)];
  bits32[%add(temp_172, 12)] = temp_164;
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_170;} else {goto Lalc_gc_170;}
  Lalc_gc_170:
   call_gc() also aborts ;
  Lalc_171:
  bits32[alloc_ptr] = 24;
  temp_169 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_168 = temp_169;
  bits32[%add(temp_168, 0)] = bits32[%add(bits32[fp], 8)];
  bits32[%add(temp_168, 4)] = bits32[%add(bits32[%add(fp, 20)], 4)];
  bits32[%add(temp_168, 8)] = bits32[%add(bits32[%add(fp, 20)], 8)];
  bits32[%add(temp_168, 12)] = bits32[%add(bits32[%add(bits32[%add(fp, 20)], 12)], 16)];
  bits32[%add(temp_168, 16)] = bits32[%add(bits32[%add(fp, 20)], 16)];
  bits32[%add(temp_172, 16)] = temp_168;
  temp_180 = temp_172;
  goto LifEnd_183;
  LifFalse_182:
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_178;} else {goto Lalc_gc_178;}
  Lalc_gc_178:
   call_gc() also aborts ;
  Lalc_179:
  bits32[alloc_ptr] = 24;
  temp_177 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_176 = temp_177;
  bits32[%add(temp_176, 0)] = bits32[%add(fp, 4)];
  bits32[%add(temp_176, 4)] = bits32[%add(fp, 8)];
  bits32[%add(temp_176, 8)] = bits32[%add(fp, 12)];
  bits32[%add(temp_176, 12)] = bits32[%add(fp, 16)];
  bits32[%add(temp_176, 16)] = bits32[%add(fp, 20)];
  temp_180 = temp_176;
  LifEnd_183:
  temp_184 = temp_180;
  LifEnd_187:
  temp_188 = temp_184;
  LifEnd_191:
  temp_192 = temp_188;
  LifEnd_195:
  temp_196 = temp_192;
  return(temp_196);
}}
section "data" {
 balance_44_gc_data:
   bits32[] { 6,1,0,0,1,1,1 };
   bits32[] { 53,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0 };
}

ins_45(bits32 pfp,bits32 word,bits32 p) {
 span 1 ins_45_gc_data {
  stackdata { align 4; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = word;
  bits32[fp+8] = p;
  bits32 temp_326;
  bits32 temp_325;
  bits32 temp_324;
  bits32 temp_323;
  bits32 temp_322;
  bits32 temp_321;
  bits32 temp_320;
  bits32 temp_319;
  bits32 temp_318;
  bits32 temp_317;
  bits32 temp_316;
  bits32 temp_231;
  bits32 temp_227;
  bits32 temp_223;
  bits32 temp_219;
  bits32 temp_216;
  bits32 temp_215;
  bits32 temp_211;
  bits32 temp_210;
  bits32 temp_209;
  bits32 temp_207;
  bits32 temp_206;
  bits32 temp_205;
  bits32 temp_204;
  bits32 temp_203;
  bits32 temp_202;
  bits32 temp_198;
  bits32 temp_197;
  if(%eq(bits32[%add(fp, 8)], 0)) {goto LifTrue_228;} else {goto LifFalse_229;}
  LifTrue_228:
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_199;} else {goto Lalc_gc_199;}
  Lalc_gc_199:
   call_gc() also aborts ;
  Lalc_200:
  bits32[alloc_ptr] = 24;
  temp_198 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_197 = temp_198;
  bits32[%add(temp_197, 0)] = bits32[%add(bits32[fp], 12)];
  bits32[%add(temp_197, 4)] = 1;
  bits32[%add(temp_197, 8)] = bits32[%add(fp, 4)];
  bits32[%add(temp_197, 12)] = 0;
  bits32[%add(temp_197, 16)] = 0;
  temp_227 = temp_197;
  goto LifEnd_230;
  LifFalse_229:
  temp_202 = alloc_ptr;
  temp_203 = foreign "C"  compare_str(bits32[%add(fp, 4)],bits32[%add(bits32[%add(fp, 8)], 8)]) also aborts ;
  alloc_ptr = temp_202;
  if(%lt(temp_203, 0)) {goto LifTrue_224;} else {goto LifFalse_225;}
  LifTrue_224:
  temp_326 = bits32[fp];
  temp_325 = bits32[%add(bits32[%add(fp, 8)], 0)];
  temp_324 = bits32[%add(bits32[%add(fp, 8)], 4)];
  temp_323 = bits32[%add(bits32[%add(fp, 8)], 8)];
  temp_322 =  ins_45(bits32[fp],bits32[%add(fp, 4)],bits32[%add(bits32[%add(fp, 8)], 12)]) also aborts ;
  temp_223 =  balance_44(temp_326,temp_325,temp_324,temp_323,temp_322,bits32[%add(bits32[%add(fp, 8)], 16)]) also aborts ;
  goto LifEnd_226;
  LifFalse_225:
  temp_204 = alloc_ptr;
  temp_205 = foreign "C"  compare_str(bits32[%add(fp, 4)],bits32[%add(bits32[%add(fp, 8)], 8)]) also aborts ;
  alloc_ptr = temp_204;
  if(%gt(temp_205, 0)) {goto LifTrue_220;} else {goto LifFalse_221;}
  LifTrue_220:
  temp_321 = bits32[fp];
  temp_320 = bits32[%add(bits32[%add(fp, 8)], 0)];
  temp_319 = bits32[%add(bits32[%add(fp, 8)], 4)];
  temp_318 = bits32[%add(bits32[%add(fp, 8)], 8)];
  temp_317 = bits32[%add(bits32[%add(fp, 8)], 12)];
  temp_316 =  ins_45(bits32[fp],bits32[%add(fp, 4)],bits32[%add(bits32[%add(fp, 8)], 16)]) also aborts ;
  temp_219 =  balance_44(temp_321,temp_320,temp_319,temp_318,temp_317,temp_316) also aborts ;
  goto LifEnd_222;
  LifFalse_221:
  temp_206 = alloc_ptr;
  temp_207 = foreign "C"  compare_str(bits32[%add(fp, 4)],bits32[%add(bits32[%add(fp, 8)], 8)]) also aborts ;
  alloc_ptr = temp_206;
  if(%ne(temp_207, 0)) {goto LifTrue_212;} else {goto LifFalse_213;}
  LifTrue_212:
  temp_209 = alloc_ptr;
  temp_210 = foreign "C"  print(Lgbl_208) also aborts ;
  alloc_ptr = temp_209;
  temp_211 = temp_210;
  goto LifEnd_214;
  LifFalse_213:
  temp_211 = 0;
  LifEnd_214:
  /* eliminated: temp_211 */
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_217;} else {goto Lalc_gc_217;}
  Lalc_gc_217:
   call_gc() also aborts ;
  Lalc_218:
  bits32[alloc_ptr] = 24;
  temp_216 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_215 = temp_216;
  bits32[%add(temp_215, 0)] = bits32[%add(bits32[%add(fp, 8)], 0)];
  bits32[%add(temp_215, 4)] = %add(bits32[%add(bits32[%add(fp, 8)], 4)], 1);
  bits32[%add(temp_215, 8)] = bits32[%add(fp, 4)];
  bits32[%add(temp_215, 12)] = bits32[%add(bits32[%add(fp, 8)], 12)];
  bits32[%add(temp_215, 16)] = bits32[%add(bits32[%add(fp, 8)], 16)];
  temp_219 = temp_215;
  LifEnd_222:
  temp_223 = temp_219;
  LifEnd_226:
  temp_227 = temp_223;
  LifEnd_230:
  temp_231 = temp_227;
  return(temp_231);
}}
section "data" {
 ins_45_gc_data:
   bits32[] { 3,1,1,1 };
   bits32[] { 31,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1 };
}

insert_46(bits32 pfp,bits32 word,bits32 p) {
 span 1 insert_46_gc_data {
  stackdata { align 4; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = word;
  bits32[fp+8] = p;
  bits32 temp_327;
  bits32 temp_236;
  bits32 temp_233;
  bits32 temp_232;
  temp_327 =  ins_45(bits32[fp],bits32[%add(fp, 4)],bits32[%add(fp, 8)]) also aborts ;
  bits32[%add(fp, 12)] = temp_327;
  if(%gt(%add(alloc_ptr, 24), bits32[space_end])) {goto Lalc_gc_234;} else {goto Lalc_gc_234;}
  Lalc_gc_234:
   call_gc() also aborts ;
  Lalc_235:
  bits32[alloc_ptr] = 24;
  temp_233 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 24);
  temp_232 = temp_233;
  bits32[%add(temp_232, 0)] = bits32[%add(bits32[fp], 8)];
  bits32[%add(temp_232, 4)] = bits32[%add(bits32[%add(fp, 12)], 4)];
  bits32[%add(temp_232, 8)] = bits32[%add(bits32[%add(fp, 12)], 8)];
  bits32[%add(temp_232, 12)] = bits32[%add(bits32[%add(fp, 12)], 12)];
  bits32[%add(temp_232, 16)] = bits32[%add(bits32[%add(fp, 12)], 16)];
  temp_236 = temp_232;
  return(temp_236);
}}
section "data" {
 insert_46_gc_data:
   bits32[] { 4,1,1,1,1 };
   bits32[] { 7,1,1,1,1,1,1,1 };
}

add_word_47(bits32 pfp,bits32 word) {
 span 1 add_word_47_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = word;
  bits32 temp_328;
  bits32 temp_237;
  temp_328 =  insert_46(bits32[fp],bits32[%add(fp, 4)],bits32[%add(bits32[fp], 4)]) also aborts ;
  bits32[%add(bits32[fp], 4)] = temp_328;
  temp_237 = 0;
  return(temp_237);
}}
section "data" {
 add_word_47_gc_data:
   bits32[] { 2,1,1 };
   bits32[] { 4,1,1,1,0 };
}

tprint_48(bits32 pfp,bits32 tree) {
 span 1 tprint_48_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = tree;
  bits32 temp_251;
  bits32 temp_247;
  bits32 temp_246;
  bits32 temp_245;
  bits32 temp_244;
  bits32 temp_243;
  bits32 temp_242;
  bits32 temp_241;
  bits32 temp_239;
  bits32 temp_238;
  if(%ne(bits32[%add(fp, 4)], 0)) {goto LifTrue_248;} else {goto LifFalse_249;}
  LifTrue_248:
   tprint_48(bits32[fp],bits32[%add(bits32[%add(fp, 4)], 12)]) also aborts ;
  temp_238 = alloc_ptr;
  temp_239 = foreign "C"  printi(bits32[%add(bits32[%add(fp, 4)], 4)]) also aborts ;
  alloc_ptr = temp_238;
  /* eliminated: temp_239 */
  temp_241 = alloc_ptr;
  temp_242 = foreign "C"  print(Lgbl_240) also aborts ;
  alloc_ptr = temp_241;
  /* eliminated: temp_242 */
  temp_243 = alloc_ptr;
  temp_244 = foreign "C"  print(bits32[%add(bits32[%add(fp, 4)], 8)]) also aborts ;
  alloc_ptr = temp_243;
  /* eliminated: temp_244 */
  temp_245 = alloc_ptr;
  temp_246 = foreign "C"  print(Lgbl_57) also aborts ;
  alloc_ptr = temp_245;
  /* eliminated: temp_246 */
  temp_247 =  tprint_48(bits32[fp],bits32[%add(bits32[%add(fp, 4)], 16)]) also aborts ;
  goto LifEnd_250;
  LifFalse_249:
  temp_247 = 0;
  LifEnd_250:
  temp_251 = temp_247;
  return(temp_251);
}}
section "data" {
 tprint_48_gc_data:
   bits32[] { 2,1,1 };
   bits32[] { 12,1,1,0,0,0,0,0,0,0,0,0,0 };
}

isletter_49(bits32 pfp,bits32 c) {
 span 1 isletter_49_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = c;
  bits32 temp_330;
  bits32 temp_329;
  bits32 temp_288;
  bits32 temp_284;
  bits32 temp_280;
  bits32 temp_279;
  bits32 temp_278;
  bits32 temp_274;
  bits32 temp_273;
  bits32 temp_272;
  bits32 temp_270;
  bits32 temp_269;
  bits32 temp_268;
  bits32 temp_267;
  bits32 temp_266;
  bits32 temp_265;
  bits32 temp_263;
  bits32 temp_262;
  bits32 temp_258;
  bits32 temp_257;
  bits32 temp_256;
  bits32 temp_254;
  bits32 temp_253;
  temp_253 = alloc_ptr;
  temp_254 = foreign "C"  compare_str(bits32[%add(fp, 4)],Lgbl_252) also aborts ;
  alloc_ptr = temp_253;
  if(%ge(temp_254, 0)) {goto LifTrue_259;} else {goto LifFalse_260;}
  LifTrue_259:
  temp_256 = alloc_ptr;
  temp_257 = foreign "C"  compare_str(bits32[%add(fp, 4)],Lgbl_255) also aborts ;
  alloc_ptr = temp_256;
  temp_258 = %sx32(%bit(%le(temp_257, 0)));
  goto LifEnd_261;
  LifFalse_260:
  temp_258 = 0;
  LifEnd_261:
  if(%ne(temp_258, 0)) {goto LifTrue_285;} else {goto LifFalse_286;}
  LifTrue_285:
  temp_262 = alloc_ptr;
  temp_263 = foreign "C"  ord(bits32[%add(fp, 4)]) also aborts ;
  alloc_ptr = temp_262;
  temp_329 = temp_263;
  temp_265 = alloc_ptr;
  temp_266 = foreign "C"  ord(Lgbl_264) also aborts ;
  alloc_ptr = temp_265;
  temp_330 = %add(temp_329, temp_266);
  temp_267 = alloc_ptr;
  temp_268 = foreign "C"  ord(Lgbl_252) also aborts ;
  alloc_ptr = temp_267;
  temp_284 = %sub(temp_330, temp_268);
  goto LifEnd_287;
  LifFalse_286:
  temp_269 = alloc_ptr;
  temp_270 = foreign "C"  compare_str(bits32[%add(fp, 4)],Lgbl_264) also aborts ;
  alloc_ptr = temp_269;
  if(%ge(temp_270, 0)) {goto LifTrue_275;} else {goto LifFalse_276;}
  LifTrue_275:
  temp_272 = alloc_ptr;
  temp_273 = foreign "C"  compare_str(bits32[%add(fp, 4)],Lgbl_271) also aborts ;
  alloc_ptr = temp_272;
  temp_274 = %sx32(%bit(%le(temp_273, 0)));
  goto LifEnd_277;
  LifFalse_276:
  temp_274 = 0;
  LifEnd_277:
  if(%ne(temp_274, 0)) {goto LifTrue_281;} else {goto LifFalse_282;}
  LifTrue_281:
  temp_278 = alloc_ptr;
  temp_279 = foreign "C"  ord(bits32[%add(fp, 4)]) also aborts ;
  alloc_ptr = temp_278;
  temp_280 = temp_279;
  goto LifEnd_283;
  LifFalse_282:
  temp_280 = 0;
  LifEnd_283:
  temp_284 = temp_280;
  LifEnd_287:
  temp_288 = temp_284;
  return(temp_288);
}}
section "data" {
 isletter_49_gc_data:
   bits32[] { 2,1,1 };
   bits32[] { 25,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
}

getword_50(bits32 pfp) {
 span 1 getword_50_gc_data {
  stackdata { align 4; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32 temp_338;
  bits32 temp_337;
  bits32 temp_336;
  bits32 temp_335;
  bits32 temp_334;
  bits32 temp_333;
  bits32 temp_332;
  bits32 temp_331;
  bits32 temp_308;
  bits32 temp_302;
  bits32 temp_301;
  bits32 temp_300;
  bits32 temp_293;
  bits32 temp_292;
  bits32 temp_291;
  bits32[%add(fp, 4)] = Lgbl_289;
  bits32[%add(fp, 8)] = Lgbl_289;
  temp_331 =  getchar() also aborts ;
  bits32[%add(fp, 8)] = temp_331;
  Lloop_start_297:
  temp_291 = alloc_ptr;
  temp_292 = foreign "C"  compare_str(bits32[%add(fp, 8)],Lgbl_289) also aborts ;
  alloc_ptr = temp_291;
  if(%ne(temp_292, 0)) {goto LifTrue_294;} else {goto LifFalse_295;}
  LifTrue_294:
  temp_333 =  isletter_49(bits32[fp],bits32[%add(fp, 8)]) also aborts ;
  temp_293 = %sx32(%bit(%eq(temp_333, 0)));
  goto LifEnd_296;
  LifFalse_295:
  temp_293 = 0;
  LifEnd_296:
  if(%ne(temp_293, 0)) {goto Lloop_body_298;} else {goto Lloop_end_290;}
  Lloop_body_298:
  temp_332 =  getchar() also aborts ;
  bits32[%add(fp, 8)] = temp_332;
  goto Lloop_start_297;
  Lloop_end_290:
  Lloop_start_306:
  temp_300 = alloc_ptr;
  temp_301 = foreign "C"  compare_str(bits32[%add(fp, 8)],Lgbl_289) also aborts ;
  alloc_ptr = temp_300;
  if(%ne(temp_301, 0)) {goto LifTrue_303;} else {goto LifFalse_304;}
  LifTrue_303:
  temp_302 =  isletter_49(bits32[fp],bits32[%add(fp, 8)]) also aborts ;
  goto LifEnd_305;
  LifFalse_304:
  temp_302 = 0;
  LifEnd_305:
  if(%ne(temp_302, 0)) {goto Lloop_body_307;} else {goto Lloop_end_299;}
  Lloop_body_307:
  temp_337 = bits32[%add(fp, 4)];
  temp_336 =  isletter_49(bits32[fp],bits32[%add(fp, 8)]) also aborts ;
  temp_335 =  chr(temp_336) also aborts ;
  temp_334 =  concat(temp_337,temp_335) also aborts ;
  bits32[%add(fp, 4)] = temp_334;
  temp_338 =  getchar() also aborts ;
  bits32[%add(fp, 8)] = temp_338;
  goto Lloop_start_306;
  Lloop_end_299:
  temp_308 = bits32[%add(fp, 4)];
  return(temp_308);
}}
section "data" {
 getword_50_gc_data:
   bits32[] { 3,1,1,1 };
   bits32[] { 16,1,1,1,0,1,1,0,1,1,1,0,0,0,0,0,0 };
}

main_51(bits32 pfp) {
 span 1 main_51_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32 temp_340;
  bits32 temp_339;
  bits32 temp_314;
  bits32 temp_311;
  bits32 temp_310;
  bits32[%add(fp, 4)] = Lgbl_289;
  temp_339 =  getword_50(bits32[fp]) also aborts ;
  bits32[%add(fp, 4)] = temp_339;
  Lloop_start_312:
  temp_310 = alloc_ptr;
  temp_311 = foreign "C"  size(bits32[%add(fp, 4)]) also aborts ;
  alloc_ptr = temp_310;
  if(%gt(temp_311, 0)) {goto Lloop_body_313;} else {goto Lloop_end_309;}
  Lloop_body_313:
   add_word_47(bits32[fp],bits32[%add(fp, 4)]) also aborts ;
  temp_340 =  getword_50(bits32[fp]) also aborts ;
  bits32[%add(fp, 4)] = temp_340;
  goto Lloop_start_312;
  Lloop_end_309:
  temp_314 =  tprint_48(bits32[fp],bits32[%add(bits32[fp], 4)]) also aborts ;
  return(temp_314);
}}
section "data" {
 main_51_gc_data:
   bits32[] { 2,1,1 };
   bits32[] { 6,1,1,1,0,0,0 };
}

tiger_main(bits32 pfp) {
 span 1 tiger_main_gc_data {
  stackdata { align 4; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32 temp_315;
  bits32[%add(fp, 4)] = 0;
  bits32[%add(fp, 8)] = 0;
  bits32[%add(fp, 12)] = 1;
  temp_315 =  main_51(fp) also aborts ;
  return(temp_315);
}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 4,1,1,0,0 };
   bits32[] { 2,1,0 };
}

