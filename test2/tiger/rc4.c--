target byteorder little;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_flush" as flush;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_ord" as ord;
import bits32 "tig_chr" as chr;
import bits32 "tig_size" as size;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_not" as not;
import bits32 "tig_exit" as exit;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_call_gc" as call_gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
import bits32 "tig_set_handler" as set_handler;
import bits32 "tig_raise" as raise;
import bits32 "tig_unwind" as unwind;
export tiger_main;

bits32 alloc_ptr;
import space_end;

section "data" { align 4;
 Lgbl_92: bits32 { 0 }; bits8[] "\000";
}

add_mod_256_49(bits32 pfp,bits32 x,bits32 y) {
 span 1 add_mod_256_49_gc_data {
  stackdata { align 4; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = x;
  bits32[fp+8] = y;
  bits32 temp_57;
  bits32 temp_53;
  bits32[%add(fp, 12)] = %add(bits32[%add(fp, 4)], bits32[%add(fp, 8)]);
  if(%ge(bits32[%add(fp, 12)], 256)) {goto LifTrue_54;} else {goto LifFalse_55;}
  LifTrue_54:
  temp_53 = %sub(bits32[%add(fp, 12)], 256);
  goto LifEnd_56;
  LifFalse_55:
  temp_53 = bits32[%add(fp, 12)];
  LifEnd_56:
  temp_57 = temp_53;
  return(temp_57);
}}
section "data" {
 add_mod_256_49_gc_data:
   bits32[] { 4,1,0,0,0 };
   bits32[] { 5,1,0,0,0,0 };
}

compute_bit_58(bits32 pfp,bits32 bit_value) {
 span 1 compute_bit_58_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = bit_value;
  bits32 temp_83;
  bits32 temp_79;
  bits32 temp_75;
  bits32 temp_71;
  bits32 temp_67;
  bits32 temp_63;
  bits32 temp_59;
  if(%ge(bits32[%add(bits32[fp], 4)], bits32[%add(fp, 4)])) {goto LifTrue_60;} else {goto LifFalse_61;}
  LifTrue_60:
  temp_59 = %sx32(%bit(%ge(bits32[%add(bits32[fp], 8)], bits32[%add(fp, 4)])));
  goto LifEnd_62;
  LifFalse_61:
  temp_59 = 0;
  LifEnd_62:
  if(%ne(temp_59, 0)) {goto LifTrue_80;} else {goto LifFalse_81;}
  LifTrue_80:
  bits32[%add(bits32[fp], 4)] = %sub(bits32[%add(bits32[fp], 4)], bits32[%add(fp, 4)]);
  bits32[%add(bits32[fp], 8)] = %sub(bits32[%add(bits32[fp], 8)], bits32[%add(fp, 4)]);
  temp_79 = 0;
  goto LifEnd_82;
  LifFalse_81:
  if(%ge(bits32[%add(bits32[fp], 4)], bits32[%add(fp, 4)])) {goto LifTrue_64;} else {goto LifFalse_65;}
  LifTrue_64:
  temp_63 = %sx32(%bit(%lt(bits32[%add(bits32[fp], 8)], bits32[%add(fp, 4)])));
  goto LifEnd_66;
  LifFalse_65:
  temp_63 = 0;
  LifEnd_66:
  if(%ne(temp_63, 0)) {goto LifTrue_76;} else {goto LifFalse_77;}
  LifTrue_76:
  bits32[%add(bits32[fp], 4)] = %sub(bits32[%add(bits32[fp], 4)], bits32[%add(fp, 4)]);
  temp_75 = bits32[%add(fp, 4)];
  goto LifEnd_78;
  LifFalse_77:
  if(%lt(bits32[%add(bits32[fp], 4)], bits32[%add(fp, 4)])) {goto LifTrue_68;} else {goto LifFalse_69;}
  LifTrue_68:
  temp_67 = %sx32(%bit(%ge(bits32[%add(bits32[fp], 8)], bits32[%add(fp, 4)])));
  goto LifEnd_70;
  LifFalse_69:
  temp_67 = 0;
  LifEnd_70:
  if(%ne(temp_67, 0)) {goto LifTrue_72;} else {goto LifFalse_73;}
  LifTrue_72:
  bits32[%add(bits32[fp], 8)] = %sub(bits32[%add(bits32[fp], 8)], bits32[%add(fp, 4)]);
  temp_71 = bits32[%add(fp, 4)];
  goto LifEnd_74;
  LifFalse_73:
  temp_71 = 0;
  LifEnd_74:
  temp_75 = temp_71;
  LifEnd_78:
  temp_79 = temp_75;
  LifEnd_82:
  temp_83 = temp_79;
  return(temp_83);
}}
section "data" {
 compute_bit_58_gc_data:
   bits32[] { 2,1,0 };
   bits32[] { 9,1,0,0,0,0,0,0,0,0 };
}

xor_50(bits32 pfp,bits32 x,bits32 y) {
 span 1 xor_50_gc_data {
  stackdata { align 4; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = x;
  bits32[fp+8] = y;
  bits32 temp_84;
  bits32 temp_140;
  bits32 temp_139;
  bits32 temp_138;
  bits32 temp_137;
  bits32 temp_136;
  bits32 temp_135;
  bits32 temp_134;
  bits32 temp_133;
  bits32 temp_132;
  bits32 temp_131;
  bits32 temp_130;
  bits32 temp_129;
  bits32 temp_128;
  bits32 temp_127;
  bits32 temp_126;
  bits32 temp_125;
  bits32[%add(fp, 12)] = 0;
  temp_126 = bits32[%add(fp, 12)];
  temp_125 =  compute_bit_58(fp,128) also aborts ;
  bits32[%add(fp, 12)] = %add(temp_126, temp_125);
  temp_128 = bits32[%add(fp, 12)];
  temp_127 =  compute_bit_58(fp,64) also aborts ;
  bits32[%add(fp, 12)] = %add(temp_128, temp_127);
  temp_130 = bits32[%add(fp, 12)];
  temp_129 =  compute_bit_58(fp,32) also aborts ;
  bits32[%add(fp, 12)] = %add(temp_130, temp_129);
  temp_132 = bits32[%add(fp, 12)];
  temp_131 =  compute_bit_58(fp,16) also aborts ;
  bits32[%add(fp, 12)] = %add(temp_132, temp_131);
  temp_134 = bits32[%add(fp, 12)];
  temp_133 =  compute_bit_58(fp,8) also aborts ;
  bits32[%add(fp, 12)] = %add(temp_134, temp_133);
  temp_136 = bits32[%add(fp, 12)];
  temp_135 =  compute_bit_58(fp,4) also aborts ;
  bits32[%add(fp, 12)] = %add(temp_136, temp_135);
  temp_138 = bits32[%add(fp, 12)];
  temp_137 =  compute_bit_58(fp,2) also aborts ;
  bits32[%add(fp, 12)] = %add(temp_138, temp_137);
  temp_140 = bits32[%add(fp, 12)];
  temp_139 =  compute_bit_58(fp,1) also aborts ;
  bits32[%add(fp, 12)] = %add(temp_140, temp_139);
  temp_84 = bits32[%add(fp, 12)];
  return(temp_84);
}}
section "data" {
 xor_50_gc_data:
   bits32[] { 4,1,0,0,0 };
   bits32[] { 20,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
}

init_sbox_51(bits32 pfp) {
 span 1 init_sbox_51_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32 temp_91;
  bits32 temp_88;
  bits32 temp_87;
  bits32 temp_144;
  bits32 temp_143;
  bits32 temp_142;
  bits32 temp_141;
  bits32[%add(fp, 4)] = 0;
  Lloop_start_89:
  if(%le(bits32[%add(fp, 4)], 255)) {goto Lloop_body_90;} else {goto Lloop_end_85;}
  Lloop_body_90:
  temp_87 = alloc_ptr;
  temp_88 = foreign "C"  bounds_check(bits32[%add(bits32[fp], 4)],bits32[%add(fp, 4)],49) also aborts ;
  alloc_ptr = temp_87;
  /* eliminated: temp_88 */
  temp_144 = bits32[fp];
  temp_143 = bits32[%add(fp, 4)];
  temp_142 =  add_mod_256_49(bits32[fp],bits32[%add(fp, 4)],31) also aborts ;
  temp_141 =  add_mod_256_49(temp_144,temp_143,temp_142) also aborts ;
  bits32[%add(bits32[%add(bits32[fp], 4)], %mul(%add(bits32[%add(fp, 4)], 1), 4))] = temp_141;
  bits32[%add(fp, 4)] = %add(bits32[%add(fp, 4)], 1);
  goto Lloop_start_89;
  Lloop_end_85:
  temp_91 = 0;
  return(temp_91);
}}
section "data" {
 init_sbox_51_gc_data:
   bits32[] { 2,1,0 };
   bits32[] { 8,1,0,0,0,1,0,0,0 };
}

swap_93(bits32 pfp,bits32 i,bits32 j) {
 span 1 swap_93_gc_data {
  stackdata { align 4; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = i;
  bits32[fp+8] = j;
  bits32 temp_99;
  bits32 temp_98;
  bits32 temp_97;
  bits32 temp_96;
  bits32 temp_95;
  bits32 temp_103;
  bits32 temp_102;
  bits32 temp_101;
  bits32 temp_100;
  temp_95 = alloc_ptr;
  temp_96 = foreign "C"  bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(fp, 4)],57) also aborts ;
  alloc_ptr = temp_95;
  /* eliminated: temp_96 */
  bits32[%add(fp, 12)] = bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(bits32[%add(fp, 4)], 1), 4))];
  temp_97 = alloc_ptr;
  temp_98 = foreign "C"  bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(fp, 8)],58) also aborts ;
  alloc_ptr = temp_97;
  /* eliminated: temp_98 */
  temp_99 = alloc_ptr;
  temp_100 = foreign "C"  bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(fp, 4)],58) also aborts ;
  alloc_ptr = temp_99;
  /* eliminated: temp_100 */
  bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(bits32[%add(fp, 4)], 1), 4))] = bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(bits32[%add(fp, 8)], 1), 4))];
  temp_101 = alloc_ptr;
  temp_102 = foreign "C"  bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(fp, 8)],58) also aborts ;
  alloc_ptr = temp_101;
  /* eliminated: temp_102 */
  bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(bits32[%add(fp, 8)], 1), 4))] = bits32[%add(fp, 12)];
  temp_103 = 0;
  return(temp_103);
}}
section "data" {
 swap_93_gc_data:
   bits32[] { 4,1,0,0,0 };
   bits32[] { 12,1,0,0,0,0,0,0,0,0,0,0,0 };
}

encrypt_94(bits32 pfp,bits32 ch) {
 span 1 encrypt_94_gc_data {
  stackdata { align 4; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = ch;
  bits32 temp_151;
  bits32 temp_150;
  bits32 temp_149;
  bits32 temp_148;
  bits32 temp_147;
  bits32 temp_146;
  bits32 temp_145;
  bits32 temp_112;
  bits32 temp_111;
  bits32 temp_110;
  bits32 temp_109;
  bits32 temp_108;
  bits32 temp_107;
  bits32 temp_106;
  bits32 temp_105;
  bits32 temp_104;
  bits32[%add(fp, 8)] = 0;
  bits32[%add(fp, 12)] = 0;
  temp_145 =  add_mod_256_49(bits32[bits32[fp]],bits32[%add(bits32[fp], 4)],1) also aborts ;
  bits32[%add(bits32[fp], 4)] = temp_145;
  temp_148 = bits32[bits32[fp]];
  temp_147 = bits32[%add(bits32[fp], 8)];
  temp_104 = alloc_ptr;
  temp_105 = foreign "C"  bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(bits32[fp], 4)],64) also aborts ;
  alloc_ptr = temp_104;
  /* eliminated: temp_105 */
  temp_146 =  add_mod_256_49(temp_148,temp_147,bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(bits32[%add(bits32[fp], 4)], 1), 4))]) also aborts ;
  bits32[%add(bits32[fp], 8)] = temp_146;
   swap_93(bits32[fp],bits32[%add(bits32[fp], 4)],bits32[%add(bits32[fp], 8)]) also aborts ;
  temp_151 = bits32[bits32[fp]];
  temp_106 = alloc_ptr;
  temp_107 = foreign "C"  bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(bits32[fp], 4)],66) also aborts ;
  alloc_ptr = temp_106;
  /* eliminated: temp_107 */
  temp_150 = bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(bits32[%add(bits32[fp], 4)], 1), 4))];
  temp_108 = alloc_ptr;
  temp_109 = foreign "C"  bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(bits32[fp], 8)],66) also aborts ;
  alloc_ptr = temp_108;
  /* eliminated: temp_109 */
  temp_149 =  add_mod_256_49(temp_151,temp_150,bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(bits32[%add(bits32[fp], 8)], 1), 4))]) also aborts ;
  bits32[%add(fp, 8)] = temp_149;
  temp_110 = alloc_ptr;
  temp_111 = foreign "C"  bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(fp, 8)],67) also aborts ;
  alloc_ptr = temp_110;
  /* eliminated: temp_111 */
  bits32[%add(fp, 12)] = bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(bits32[%add(fp, 8)], 1), 4))];
  temp_112 =  xor_50(bits32[bits32[fp]],bits32[%add(fp, 12)],bits32[%add(fp, 4)]) also aborts ;
  return(temp_112);
}}
section "data" {
 encrypt_94_gc_data:
   bits32[] { 4,1,0,0,0 };
   bits32[] { 18,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0 };
}

cypher_52(bits32 pfp) {
 span 1 cypher_52_gc_data {
  stackdata { align 4; fp : bits32[5]; }
  bits32[fp+0] = pfp;
  bits32 temp_157;
  bits32 temp_156;
  bits32 temp_155;
  bits32 temp_154;
  bits32 temp_153;
  bits32 temp_152;
  bits32 temp_121;
  bits32 temp_118;
  bits32 temp_117;
  bits32 temp_116;
  bits32 temp_115;
  bits32[%add(fp, 4)] = 0;
  bits32[%add(fp, 8)] = 0;
  bits32[%add(fp, 12)] = Lgbl_92;
  bits32[%add(fp, 16)] = Lgbl_92;
  temp_152 =  getchar() also aborts ;
  bits32[%add(fp, 16)] = temp_152;
  Lloop_start_119:
  temp_115 = alloc_ptr;
  temp_116 = foreign "C"  compare_str(bits32[%add(fp, 16)],Lgbl_92) also aborts ;
  alloc_ptr = temp_115;
  if(%ne(temp_116, 0)) {goto Lloop_body_120;} else {goto Lloop_end_113;}
  Lloop_body_120:
  temp_156 = bits32[%add(fp, 12)];
  temp_117 = alloc_ptr;
  temp_118 = foreign "C"  ord(bits32[%add(fp, 16)]) also aborts ;
  alloc_ptr = temp_117;
  temp_155 =  encrypt_94(fp,temp_118) also aborts ;
  temp_154 =  chr(temp_155) also aborts ;
  temp_153 =  concat(temp_156,temp_154) also aborts ;
  bits32[%add(fp, 12)] = temp_153;
  temp_157 =  getchar() also aborts ;
  bits32[%add(fp, 16)] = temp_157;
  goto Lloop_start_119;
  Lloop_end_113:
  temp_121 = bits32[%add(fp, 12)];
  return(temp_121);
}}
section "data" {
 cypher_52_gc_data:
   bits32[] { 5,1,0,0,1,1 };
   bits32[] { 12,1,1,1,0,1,1,1,1,0,0,0,0 };
}

tiger_main(bits32 pfp) {
 span 1 tiger_main_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32 temp_44;
  bits32 temp_41;
  bits32 temp_40;
  bits32 temp_158;
  bits32 temp_124;
  bits32 temp_123;
  bits32 temp_122;
  if(%gt(%add(alloc_ptr, 1032), bits32[space_end])) {goto Lalc_gc_45;} else {goto Lalc_gc_45;}
  Lalc_gc_45:
   call_gc() also aborts ;
  Lalc_46:
  bits32[alloc_ptr] = 1032;
  temp_44 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, 1032);
  temp_40 = temp_44;
  bits32[temp_40] = 256;
  temp_41 = 1;
  Linit_start_42:
  bits32[%add(temp_40, %mul(temp_41, 4))] = 0;
  temp_41 = %add(temp_41, 1);
  if(%le(temp_41, 257)) {goto Linit_start_42;} else {goto Linit_end_43;}
  Linit_end_43:
  bits32[%add(fp, 4)] = temp_40;
   init_sbox_51(fp) also aborts ;
  temp_122 = alloc_ptr;
  temp_158 =  cypher_52(fp) also aborts ;
  temp_123 = foreign "C"  print(temp_158) also aborts ;
  alloc_ptr = temp_122;
  temp_124 = temp_123;
  return(temp_124);
}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 2,1,1 };
   bits32[] { 8,1,1,0,1,1,0,0,0 };
}

