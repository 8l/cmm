target byteorder little;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_flush" as flush;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_ord" as ord;
import bits32 "tig_chr" as chr;
import bits32 "tig_size" as size;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_not" as not;
import bits32 "tig_exit" as exit;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_call_gc" as call_gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
import bits32 "tig_set_handler" as set_handler;
import bits32 "tig_raise" as raise;
import bits32 "tig_unwind" as unwind;
export tiger_main;

bits32 alloc_ptr;
import space_end;

section "data" { align 4;
 Lgbl_59: bits32 { 1 }; bits8[] "\n\000";
}

mod_36(bits32 pfp,bits32 n,bits32 m) {
 span 1 mod_36_gc_data {
  stackdata { align 4; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = n;
  bits32[fp+8] = m;
  bits32 temp_39;
  temp_39 = %sub(bits32[%add(fp, 4)], %mul(bits32[%add(fp, 8)], %quot(bits32[%add(fp, 4)], bits32[%add(fp, 8)])));
  return(temp_39);
}}
section "data" {
 mod_36_gc_data:
   bits32[] { 3,1,0,0 };
   bits32[] { 4,1,0,0,0 };
}

mark_multiples_37(bits32 pfp,bits32 n) {
 span 1 mark_multiples_37_gc_data {
  stackdata { align 4; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = n;
  bits32 temp_71;
  bits32 temp_52;
  bits32 temp_46;
  bits32 temp_45;
  bits32 temp_44;
  bits32 temp_42;
  bits32 temp_41;
  bits32[%add(fp, 8)] = bits32[%add(fp, 4)];
  Lloop_start_50:
  if(%lt(bits32[%add(fp, 8)], bits32[%add(bits32[fp], 4)])) {goto Lloop_body_51;} else {goto Lloop_end_40;}
  Lloop_body_51:
  temp_41 = alloc_ptr;
  temp_71 =  mod_36(bits32[fp],bits32[%add(fp, 8)],bits32[%add(fp, 4)]) also aborts ;
  temp_42 = foreign "C"  not(temp_71) also aborts ;
  alloc_ptr = temp_41;
  if(%ne(temp_42, 0)) {goto LifTrue_47;} else {goto LifFalse_48;}
  LifTrue_47:
  temp_44 = alloc_ptr;
  temp_45 = foreign "C"  bounds_check(bits32[%add(bits32[fp], 8)],bits32[%add(fp, 8)],18) also aborts ;
  alloc_ptr = temp_44;
  /* eliminated: temp_45 */
  bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(bits32[%add(fp, 8)], 1), 4))] = 1;
  temp_46 = 0;
  goto LifEnd_49;
  LifFalse_48:
  temp_46 = 0;
  LifEnd_49:
  /* eliminated: temp_46 */
  bits32[%add(fp, 8)] = %add(bits32[%add(fp, 8)], bits32[%add(fp, 4)]);
  goto Lloop_start_50;
  Lloop_end_40:
  temp_52 = 0;
  return(temp_52);
}}
section "data" {
 mark_multiples_37_gc_data:
   bits32[] { 3,1,0,0 };
   bits32[] { 9,1,0,0,0,0,0,0,0,0 };
}

step_38(bits32 pfp,bits32 n) {
 span 1 step_38_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = n;
  bits32 temp_66;
  bits32 temp_62;
  bits32 temp_61;
  bits32 temp_60;
  bits32 temp_58;
  bits32 temp_57;
  bits32 temp_56;
  bits32 temp_55;
  bits32 temp_54;
  bits32 temp_53;
  temp_55 = alloc_ptr;
  temp_53 = alloc_ptr;
  temp_54 = foreign "C"  bounds_check(bits32[%add(bits32[fp], 8)],bits32[%add(fp, 4)],24) also aborts ;
  alloc_ptr = temp_53;
  /* eliminated: temp_54 */
  temp_56 = foreign "C"  not(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(bits32[%add(fp, 4)], 1), 4))]) also aborts ;
  alloc_ptr = temp_55;
  if(%ne(temp_56, 0)) {goto LifTrue_63;} else {goto LifFalse_64;}
  LifTrue_63:
  temp_57 = alloc_ptr;
  temp_58 = foreign "C"  printi(bits32[%add(fp, 4)]) also aborts ;
  alloc_ptr = temp_57;
  /* eliminated: temp_58 */
  temp_60 = alloc_ptr;
  temp_61 = foreign "C"  print(Lgbl_59) also aborts ;
  alloc_ptr = temp_60;
  /* eliminated: temp_61 */
  temp_62 =  mark_multiples_37(bits32[fp],bits32[%add(fp, 4)]) also aborts ;
  goto LifEnd_65;
  LifFalse_64:
  temp_62 = 0;
  LifEnd_65:
  temp_66 = temp_62;
  return(temp_66);
}}
section "data" {
 step_38_gc_data:
   bits32[] { 2,1,0 };
   bits32[] { 12,1,0,0,0,0,0,0,0,0,0,0,0 };
}

tiger_main(bits32 pfp) {
 span 1 tiger_main_gc_data {
  stackdata { align 4; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32 temp_70;
  bits32 temp_32;
  bits32 temp_29;
  bits32 temp_28;
  bits32[%add(fp, 4)] = 1000;
  if(%gt(%add(alloc_ptr, %mul(%add(%add(bits32[%add(fp, 4)], 1), 1), 4)), bits32[space_end])) {goto Lalc_gc_33;} else {goto Lalc_gc_33;}
  Lalc_gc_33:
   call_gc() also aborts ;
  Lalc_34:
  bits32[alloc_ptr] = %mul(%add(%add(bits32[%add(fp, 4)], 1), 1), 4);
  temp_32 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, %mul(%add(%add(bits32[%add(fp, 4)], 1), 1), 4));
  temp_28 = temp_32;
  bits32[temp_28] = bits32[%add(fp, 4)];
  temp_29 = 1;
  Linit_start_30:
  bits32[%add(temp_28, %mul(temp_29, 4))] = 0;
  temp_29 = %add(temp_29, 1);
  if(%le(temp_29, %add(bits32[%add(fp, 4)], 1))) {goto Linit_start_30;} else {goto Linit_end_31;}
  Linit_end_31:
  bits32[%add(fp, 8)] = temp_28;
  bits32[%add(fp, 12)] = 2;
  Lloop_start_68:
  if(%le(bits32[%add(fp, 12)], %sub(bits32[%add(fp, 4)], 1))) {goto Lloop_body_69;} else {goto Lloop_end_67;}
  Lloop_body_69:
   step_38(fp,bits32[%add(fp, 12)]) also aborts ;
  bits32[%add(fp, 12)] = %add(bits32[%add(fp, 12)], 1);
  goto Lloop_start_68;
  Lloop_end_67:
  temp_70 = 0;
  return(temp_70);
}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 4,1,0,1,0 };
   bits32[] { 5,1,0,1,0,1 };
}

