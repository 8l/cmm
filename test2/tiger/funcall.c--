target byteorder little;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_flush" as flush;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_ord" as ord;
import bits32 "tig_chr" as chr;
import bits32 "tig_size" as size;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_not" as not;
import bits32 "tig_exit" as exit;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_call_gc" as call_gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
import bits32 "tig_set_handler" as set_handler;
import bits32 "tig_raise" as raise;
import bits32 "tig_unwind" as unwind;
export tiger_main;

bits32 alloc_ptr;
import space_end;

section "data" { align 4;
 Lgbl_38: bits32 { 6 }; bits8[] " str2 \000";
 Lgbl_40: bits32 { 6 }; bits8[] " str1 \000";
 Lgbl_41: bits32 { 1 }; bits8[] "\n\000";
}

a_a_28(bits32 pfp,bits32 c,bits32 d) {
 span 1 a_a_28_gc_data {
  stackdata { align 4; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = c;
  bits32[fp+8] = d;
  bits32 temp_32;
  bits32 temp_31;
  bits32 temp_30;
  temp_30 = alloc_ptr;
  temp_31 = foreign "C"  print(bits32[%add(fp, 8)]) also aborts ;
  alloc_ptr = temp_30;
  /* eliminated: temp_31 */
  temp_32 =  fb_27(bits32[bits32[fp]],bits32[%add(fp, 4)]) also aborts ;
  return(temp_32);
}}
section "data" {
 a_a_28_gc_data:
   bits32[] { 3,1,0,1 };
   bits32[] { 6,1,0,1,0,0,0 };
}

fa_26(bits32 pfp,bits32 a,bits32 b) {
 span 1 fa_26_gc_data {
  stackdata { align 4; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = a;
  bits32[fp+8] = b;
  bits32 temp_37;
  bits32 temp_33;
  if(%lt(bits32[%add(fp, 4)], 5)) {goto LifTrue_34;} else {goto LifFalse_35;}
  LifTrue_34:
  temp_33 =  a_a_28(fp,%add(bits32[%add(fp, 4)], 1),bits32[%add(fp, 8)]) also aborts ;
  goto LifEnd_36;
  LifFalse_35:
  temp_33 = 0;
  LifEnd_36:
  temp_37 = temp_33;
  return(temp_37);
}}
section "data" {
 fa_26_gc_data:
   bits32[] { 3,1,0,1 };
   bits32[] { 5,1,0,1,0,0 };
}

fb_27(bits32 pfp,bits32 d) {
 span 1 fb_27_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = d;
  bits32 temp_39;
  temp_39 =  fa_26(bits32[fp],bits32[%add(fp, 4)],Lgbl_38) also aborts ;
  return(temp_39);
}}
section "data" {
 fb_27_gc_data:
   bits32[] { 2,1,0 };
   bits32[] { 3,1,0,0 };
}

tiger_main(bits32 pfp) {
 span 1 tiger_main_gc_data {
  stackdata { align 4; fp : bits32[1]; }
  bits32[fp+0] = pfp;
  bits32 temp_44;
  bits32 temp_43;
  bits32 temp_42;
   fa_26(fp,4,Lgbl_40) also aborts ;
   fb_27(fp,1) also aborts ;
  temp_42 = alloc_ptr;
  temp_43 = foreign "C"  print(Lgbl_41) also aborts ;
  alloc_ptr = temp_42;
  temp_44 = temp_43;
  return(temp_44);
}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 1,1 };
   bits32[] { 4,1,0,0,0 };
}

