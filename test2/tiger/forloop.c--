target byteorder little;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_flush" as flush;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_ord" as ord;
import bits32 "tig_chr" as chr;
import bits32 "tig_size" as size;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_not" as not;
import bits32 "tig_exit" as exit;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_call_gc" as call_gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
import bits32 "tig_set_handler" as set_handler;
import bits32 "tig_raise" as raise;
import bits32 "tig_unwind" as unwind;
export tiger_main;

bits32 alloc_ptr;
import space_end;

section "data" { align 4;
 Lgbl_27: bits32 { 1 }; bits8[] "\n\000";
}

tiger_main(bits32 pfp) {
 span 1 tiger_main_gc_data {
  stackdata { align 4; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32 temp_31;
  bits32 temp_30;
  bits32 temp_29;
  bits32 temp_28;
  bits32 temp_24;
  bits32 temp_23;
  bits32[%add(fp, 4)] = 0;
  bits32[%add(fp, 8)] = 0;
  Lloop_start_25:
  if(%le(bits32[%add(fp, 8)], 25)) {goto Lloop_body_26;} else {goto Lloop_end_22;}
  Lloop_body_26:
  bits32[%add(fp, 4)] = %add(bits32[%add(fp, 4)], 1);
  temp_23 = alloc_ptr;
  temp_31 =  chr(%add(bits32[%add(fp, 4)], 64)) also aborts ;
  temp_24 = foreign "C"  print(temp_31) also aborts ;
  alloc_ptr = temp_23;
  /* eliminated: temp_24 */
  bits32[%add(fp, 8)] = %add(bits32[%add(fp, 8)], 1);
  goto Lloop_start_25;
  Lloop_end_22:
  temp_28 = alloc_ptr;
  temp_29 = foreign "C"  print(Lgbl_27) also aborts ;
  alloc_ptr = temp_28;
  temp_30 = temp_29;
  return(temp_30);
}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 3,1,0,0 };
   bits32[] { 7,1,1,0,0,0,0,0 };
}

