target byteorder little;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_flush" as flush;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_ord" as ord;
import bits32 "tig_chr" as chr;
import bits32 "tig_size" as size;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_not" as not;
import bits32 "tig_exit" as exit;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_call_gc" as call_gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
import bits32 "tig_set_handler" as set_handler;
import bits32 "tig_raise" as raise;
import bits32 "tig_unwind" as unwind;
export tiger_main;

bits32 alloc_ptr;
import space_end;

section "data" { align 4;
 Lgbl_70: bits32 { 0 }; bits8[] "\000";
 Lgbl_117: bits32 { 15 }; bits8[] "too many items\n\000";
 Lgbl_84: bits32 { 1 }; bits8[] "\n\000";
 Lgbl_102: bits32 { 1 }; bits8[] " \000";
}

mod_48(bits32 pfp,bits32 n,bits32 m) {
 span 1 mod_48_gc_data {
  stackdata { align 4; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = n;
  bits32[fp+8] = m;
  bits32 temp_51;
  temp_51 = %sub(bits32[%add(fp, 4)], %mul(bits32[%add(fp, 8)], %quot(bits32[%add(fp, 4)], bits32[%add(fp, 8)])));
  return(temp_51);
}}
section "data" {
 mod_48_gc_data:
   bits32[] { 3,1,0,0 };
   bits32[] { 4,1,0,0,0 };
}

cmfirst_49(bits32 pfp,bits32 sz,bits32 cls) {
 span 1 cmfirst_49_gc_data {
  stackdata { align 4; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = sz;
  bits32[fp+8] = cls;
  bits32 temp_52;
  bits32 temp_149;
  bits32[%add(bits32[fp], 4)] = bits32[%add(fp, 4)];
  bits32[%add(bits32[fp], 20)] = bits32[%add(fp, 8)];
  bits32[%add(bits32[fp], 16)] = %quot(bits32[%add(bits32[fp], 4)], bits32[%add(bits32[fp], 20)]);
  temp_149 =  mod_48(bits32[fp],bits32[%add(bits32[fp], 4)],bits32[%add(bits32[fp], 20)]) also aborts ;
  bits32[%add(bits32[fp], 24)] = temp_149;
  bits32[%add(bits32[fp], 8)] = 0;
  bits32[%add(bits32[fp], 12)] = 0;
  temp_52 = 0;
  return(temp_52);
}}
section "data" {
 cmfirst_49_gc_data:
   bits32[] { 3,1,0,0 };
   bits32[] { 5,1,0,0,0,0 };
}

cmnext_50(bits32 pfp) {
 span 1 cmnext_50_gc_data {
  stackdata { align 4; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32 temp_69;
  bits32 temp_65;
  bits32 temp_61;
  bits32 temp_57;
  bits32 temp_53;
  bits32 temp_150;
  bits32[%add(bits32[fp], 12)] = %add(bits32[%add(bits32[fp], 12)], 1);
  if(%ge(bits32[%add(bits32[fp], 12)], bits32[%add(bits32[fp], 20)])) {goto LifTrue_54;} else {goto LifFalse_55;}
  LifTrue_54:
  bits32[%add(bits32[fp], 12)] = 0;
  bits32[%add(bits32[fp], 8)] = %add(bits32[%add(bits32[fp], 8)], 1);
  temp_53 = 0;
  goto LifEnd_56;
  LifFalse_55:
  temp_53 = 0;
  LifEnd_56:
  /* eliminated: temp_53 */
  temp_150 = %add(bits32[%add(bits32[fp], 8)], %mul(bits32[%add(bits32[fp], 12)], bits32[%add(bits32[fp], 16)]));
  if(%gt(bits32[%add(bits32[fp], 12)], bits32[%add(bits32[fp], 24)])) {goto LifTrue_58;} else {goto LifFalse_59;}
  LifTrue_58:
  temp_57 = bits32[%add(bits32[fp], 24)];
  goto LifEnd_60;
  LifFalse_59:
  temp_57 = bits32[%add(bits32[fp], 12)];
  LifEnd_60:
  bits32[%add(fp, 4)] = %add(temp_150, temp_57);
  if(%ge(bits32[%add(bits32[fp], 8)], bits32[%add(bits32[fp], 16)])) {goto LifTrue_62;} else {goto LifFalse_63;}
  LifTrue_62:
  temp_61 = %sx32(%bit(%ge(bits32[%add(bits32[fp], 12)], bits32[%add(bits32[fp], 24)])));
  goto LifEnd_64;
  LifFalse_63:
  temp_61 = 0;
  LifEnd_64:
  if(%ne(temp_61, 0)) {goto LifTrue_66;} else {goto LifFalse_67;}
  LifTrue_66:
  temp_65 = %sub(0, 1);
  goto LifEnd_68;
  LifFalse_67:
  temp_65 = bits32[%add(fp, 4)];
  LifEnd_68:
  temp_69 = temp_65;
  return(temp_69);
}}
section "data" {
 cmnext_50_gc_data:
   bits32[] { 2,1,0 };
   bits32[] { 7,1,0,0,0,0,0,0 };
}

getline_79(bits32 pfp) {
 span 1 getline_79_gc_data {
  stackdata { align 4; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32 temp_93;
  bits32 temp_87;
  bits32 temp_86;
  bits32 temp_85;
  bits32 temp_83;
  bits32 temp_82;
  bits32 temp_153;
  bits32 temp_152;
  bits32 temp_151;
  temp_151 =  getchar() also aborts ;
  bits32[%add(fp, 4)] = temp_151;
  bits32[%add(fp, 8)] = Lgbl_70;
  Lloop_start_91:
  temp_82 = alloc_ptr;
  temp_83 = foreign "C"  compare_str(bits32[%add(fp, 4)],Lgbl_70) also aborts ;
  alloc_ptr = temp_82;
  if(%ne(temp_83, 0)) {goto LifTrue_88;} else {goto LifFalse_89;}
  LifTrue_88:
  temp_85 = alloc_ptr;
  temp_86 = foreign "C"  compare_str(bits32[%add(fp, 4)],Lgbl_84) also aborts ;
  alloc_ptr = temp_85;
  temp_87 = %sx32(%bit(%ne(temp_86, 0)));
  goto LifEnd_90;
  LifFalse_89:
  temp_87 = 0;
  LifEnd_90:
  if(%ne(temp_87, 0)) {goto Lloop_body_92;} else {goto Lloop_end_80;}
  Lloop_body_92:
  temp_152 =  concat(bits32[%add(fp, 8)],bits32[%add(fp, 4)]) also aborts ;
  bits32[%add(fp, 8)] = temp_152;
  temp_153 =  getchar() also aborts ;
  bits32[%add(fp, 4)] = temp_153;
  goto Lloop_start_91;
  Lloop_end_80:
  temp_93 = bits32[%add(fp, 8)];
  return(temp_93);
}}
section "data" {
 getline_79_gc_data:
   bits32[] { 3,1,1,1 };
   bits32[] { 10,1,1,0,0,0,0,0,1,1,1 };
}

print_width_94(bits32 pfp,bits32 n,bits32 s) {
 span 1 print_width_94_gc_data {
  stackdata { align 4; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = n;
  bits32[fp+8] = s;
  bits32 temp_99;
  bits32 temp_96;
  bits32 temp_95;
  bits32 temp_107;
  bits32 temp_104;
  bits32 temp_103;
  bits32 temp_100;
  temp_95 = alloc_ptr;
  temp_96 = foreign "C"  print(bits32[%add(fp, 8)]) also aborts ;
  alloc_ptr = temp_95;
  /* eliminated: temp_96 */
  temp_99 = alloc_ptr;
  temp_100 = foreign "C"  size(bits32[%add(fp, 8)]) also aborts ;
  alloc_ptr = temp_99;
  bits32[%add(fp, 12)] = temp_100;
  Lloop_start_105:
  if(%le(bits32[%add(fp, 12)], bits32[%add(fp, 4)])) {goto Lloop_body_106;} else {goto Lloop_end_101;}
  Lloop_body_106:
  temp_103 = alloc_ptr;
  temp_104 = foreign "C"  print(Lgbl_102) also aborts ;
  alloc_ptr = temp_103;
  /* eliminated: temp_104 */
  bits32[%add(fp, 12)] = %add(bits32[%add(fp, 12)], 1);
  goto Lloop_start_105;
  Lloop_end_101:
  temp_107 = 0;
  return(temp_107);
}}
section "data" {
 print_width_94_gc_data:
   bits32[] { 4,1,0,1,0 };
   bits32[] { 10,1,0,1,0,0,0,0,0,0,0 };
}

tiger_main(bits32 pfp) {
 span 1 tiger_main_gc_data {
  stackdata { align 4; fp : bits32[18]; }
  bits32[fp+0] = pfp;
  bits32 temp_75;
  bits32 temp_72;
  bits32 temp_71;
  bits32 temp_158;
  bits32 temp_157;
  bits32 temp_156;
  bits32 temp_155;
  bits32 temp_154;
  bits32 temp_148;
  bits32 temp_144;
  bits32 temp_143;
  bits32 temp_142;
  bits32 temp_136;
  bits32 temp_135;
  bits32 temp_134;
  bits32 temp_133;
  bits32 temp_132;
  bits32 temp_128;
  bits32 temp_127;
  bits32 temp_122;
  bits32 temp_121;
  bits32 temp_120;
  bits32 temp_119;
  bits32 temp_118;
  bits32 temp_113;
  bits32 temp_112;
  bits32 temp_111;
  bits32 temp_110;
  bits32 temp_109;
  bits32[%add(fp, 4)] = 0;
  bits32[%add(fp, 8)] = 0;
  bits32[%add(fp, 12)] = 0;
  bits32[%add(fp, 16)] = 0;
  bits32[%add(fp, 20)] = 0;
  bits32[%add(fp, 24)] = 0;
  bits32[%add(fp, 28)] = 1024;
  if(%gt(%add(alloc_ptr, %mul(%add(%add(bits32[%add(fp, 28)], 1), 1), 4)), bits32[space_end])) {goto Lalc_gc_76;} else {goto Lalc_gc_76;}
  Lalc_gc_76:
   call_gc() also aborts ;
  Lalc_77:
  bits32[alloc_ptr] = %mul(%add(%add(bits32[%add(fp, 28)], 1), 1), 4);
  temp_75 = %add(alloc_ptr, 4);
  alloc_ptr = %add(alloc_ptr, %mul(%add(%add(bits32[%add(fp, 28)], 1), 1), 4));
  temp_71 = temp_75;
  bits32[temp_71] = bits32[%add(fp, 28)];
  temp_72 = 1;
  Linit_start_73:
  bits32[%add(temp_71, %mul(temp_72, 4))] = Lgbl_70;
  temp_72 = %add(temp_72, 1);
  if(%le(temp_72, %add(bits32[%add(fp, 28)], 1))) {goto Linit_start_73;} else {goto Linit_end_74;}
  Linit_end_74:
  bits32[%add(fp, 32)] = temp_71;
  bits32[%add(fp, 36)] = 0;
  bits32[%add(fp, 40)] = 80;
  bits32[%add(fp, 44)] = Lgbl_70;
  bits32[%add(fp, 48)] = 0;
  temp_154 =  getline_79(fp) also aborts ;
  bits32[%add(fp, 44)] = temp_154;
  Lloop_start_129:
  temp_109 = alloc_ptr;
  temp_110 = foreign "C"  size(bits32[%add(fp, 44)]) also aborts ;
  alloc_ptr = temp_109;
  if(%gt(temp_110, 0)) {goto Lloop_body_130;} else {goto Lloop_end_108;}
  Lloop_body_130:
  temp_111 = alloc_ptr;
  temp_112 = foreign "C"  size(bits32[%add(fp, 44)]) also aborts ;
  alloc_ptr = temp_111;
  bits32[%add(fp, 52)] = temp_112;
  if(%lt(bits32[%add(fp, 48)], bits32[%add(fp, 52)])) {goto LifTrue_114;} else {goto LifFalse_115;}
  LifTrue_114:
  bits32[%add(fp, 48)] = bits32[%add(fp, 52)];
  temp_113 = 0;
  goto LifEnd_116;
  LifFalse_115:
  temp_113 = 0;
  LifEnd_116:
  /* eliminated: temp_113 */
  if(%ge(bits32[%add(fp, 36)], bits32[%add(fp, 28)])) {goto LifTrue_123;} else {goto LifFalse_124;}
  LifTrue_123:
  temp_118 = alloc_ptr;
  temp_119 = foreign "C"  print(Lgbl_117) also aborts ;
  alloc_ptr = temp_118;
  /* eliminated: temp_119 */
  temp_120 = alloc_ptr;
  temp_121 = foreign "C"  exit(1) also aborts ;
  alloc_ptr = temp_120;
  temp_122 = temp_121;
  goto LifEnd_125;
  LifFalse_124:
  temp_122 = 0;
  LifEnd_125:
  /* eliminated: temp_122 */
  temp_127 = alloc_ptr;
  temp_128 = foreign "C"  bounds_check(bits32[%add(fp, 32)],bits32[%add(fp, 36)],83) also aborts ;
  alloc_ptr = temp_127;
  /* eliminated: temp_128 */
  bits32[%add(bits32[%add(fp, 32)], %mul(%add(bits32[%add(fp, 36)], 1), 4))] = bits32[%add(fp, 44)];
  bits32[%add(fp, 36)] = %add(bits32[%add(fp, 36)], 1);
  temp_155 =  getline_79(fp) also aborts ;
  bits32[%add(fp, 44)] = temp_155;
  goto Lloop_start_129;
  Lloop_end_108:
  bits32[%add(fp, 56)] = %quot(bits32[%add(fp, 40)], %add(bits32[%add(fp, 48)], 2));
  bits32[%add(fp, 60)] = bits32[%add(fp, 56)];
  bits32[%add(fp, 64)] = %add(bits32[%add(fp, 48)], 2);
  temp_156 =  cmfirst_49(fp,bits32[%add(fp, 36)],bits32[%add(fp, 60)]) also aborts ;
  bits32[%add(fp, 68)] = temp_156;
  Lloop_start_140:
  if(%ge(bits32[%add(fp, 68)], 0)) {goto Lloop_body_141;} else {goto Lloop_end_131;}
  Lloop_body_141:
  temp_157 = bits32[%add(fp, 64)];
  temp_132 = alloc_ptr;
  temp_133 = foreign "C"  bounds_check(bits32[%add(fp, 32)],bits32[%add(fp, 68)],93) also aborts ;
  alloc_ptr = temp_132;
  /* eliminated: temp_133 */
   print_width_94(fp,temp_157,bits32[%add(bits32[%add(fp, 32)], %mul(%add(bits32[%add(fp, 68)], 1), 4))]) also aborts ;
  bits32[%add(fp, 56)] = %sub(bits32[%add(fp, 56)], 1);
  if(%eq(bits32[%add(fp, 56)], 0)) {goto LifTrue_137;} else {goto LifFalse_138;}
  LifTrue_137:
  temp_134 = alloc_ptr;
  temp_135 = foreign "C"  print(Lgbl_84) also aborts ;
  alloc_ptr = temp_134;
  /* eliminated: temp_135 */
  bits32[%add(fp, 56)] = bits32[%add(fp, 60)];
  temp_136 = 0;
  goto LifEnd_139;
  LifFalse_138:
  temp_136 = 0;
  LifEnd_139:
  /* eliminated: temp_136 */
  temp_158 =  cmnext_50(fp) also aborts ;
  bits32[%add(fp, 68)] = temp_158;
  goto Lloop_start_140;
  Lloop_end_131:
  if(%ne(bits32[%add(fp, 56)], bits32[%add(fp, 60)])) {goto LifTrue_145;} else {goto LifFalse_146;}
  LifTrue_145:
  temp_142 = alloc_ptr;
  temp_143 = foreign "C"  print(Lgbl_84) also aborts ;
  alloc_ptr = temp_142;
  temp_144 = temp_143;
  goto LifEnd_147;
  LifFalse_146:
  temp_144 = 0;
  LifEnd_147:
  temp_148 = temp_144;
  return(temp_148);
}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 18,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 };
   bits32[] { 30,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
}

