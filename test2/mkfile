# ------------------------------------------------------------------ 
# mkfile for test suite
# $Id: mkfile,v 1.48 2005-05-14 01:13:15 nr Exp $
# ------------------------------------------------------------------ 

TOP =           ..
PATH =          $PATH:$TOP/bin
QC   =          $TOP/bin/qc--$P

<               $TOP/config/config.mk
<               $TOP/config/noweb.mk
<               $TOP/config/c.mk

# ------------------------------------------------------------------ 
# High level virtual targets. 
# all - run all .tst files
# ------------------------------------------------------------------ 

all:V:    test
test:V:   all.dummy.tst $config_arch.test $config_arch.optest
optest:V: $config_arch.optest
test.opt:VQ:
	NPROC=1 mk $MKFLAGS QC=../bin/qc--.opt QCFLAGS="$QCFLAGS" test
optest.opt:VQ:
	NPROC=1 mk $MKFLAGS QC=../bin/qc--.opt QCFLAGS="$QCFLAGS" optest
color.opt:VQ:
	NPROC=1 mk $MKFLAGS QC=../bin/qc--.opt QCFLAGS="$QCFLAGS -e Test.color=1" $config_arch.test
color:VQ:
	NPROC=1 mk $MKFLAGS QCFLAGS="$QCFLAGS -e Test.color=1" $config_arch.test

x86-linux.test:V: all.x86.tst rt.x86.tst lcc.x86.tst tiger.x86.tst norun.x86.tst
powerpc-darwin.test:V: all.ppc.tst
# sparc-solaris.test:V: all.sparc8.tst lcc.sparc8.tst

test-lua:V: testdrv.lua limited sign-runtime
	$NOTANGLE -L'$file "%F"%N$line %L%N' -Rexample.tst testdrv.nw > example.tst
	$QC testdrv.lua $QCFLAGS example.tst

clean:V:            
	rm -f *.dvi *.log *.aux *.inc *.tex *.toc *.o
	rm -f opgen.lua copgen.lua copgen32.c optest-$config_arch
	rm -f cmmopgen-*.c-- optest.c cmmfloat.h interp.h cmmfloat-*.c
	rm -f limited limited.c

clean.opt:V: clean
clobber:V: clean
	rm -f testdrv.lua example.tst ocamlprof.dump

# ------------------------------------------------------------------ 
# Rules for test components
# ------------------------------------------------------------------ 

testdrv.lua:D:  testdrv.nw limited sign-runtime
	$NOTANGLE -L'$file "%F"%N$line %L%N' -R$target testdrv.nw > $target

testdrv.inc:D: testdrv.nw
	$NOWEAVE -delay -filter ../config/autodefs.lua -index testdrv.nw > testdrv.inc

limited.c:D:  testdrv.nw
	$NOTANGLE -L -R$target $prereq > $target

limited: limited.c
	$CC $CFLAGS -o $target $prereq

sign-runtime:D:  testdrv.nw
	$NOTANGLE -L -R$target $prereq > $target
	chmod +x $target

%.tst:VQ: testdrv.lua limited
	echo "# $QC testdrv.lua $QCFLAGS $target"
	$QC testdrv.lua $QCFLAGS $target

%.tst.opt:VQ: testdrv.lua limited
	mk QC=../bin/qc--.opt QCFLAGS="$QCFLAGS" $stem.tst

# ----------------------------------------------------------------
# operator generation for testing on random bits
# ----------------------------------------------------------------

opgen.lua:D:  opgen.nw
	$NOTANGLE -L'$file "%F"%N$line %L%N' -R$target $prereq > $target

copgen.lua:DQ:  copgen.nw ../interp/operator.nw
	echo "# building operator test bed (C version)"
	($NOTANGLE -L'$file "%F"%N$line %L%N' -R$target copgen.nw
	 ($NOTANGLE -R'macro definitions for converting C to Lua' copgen.nw
	  $NOTANGLE -R'macro synonyms' ../interp/operator.nw
	  $NOTANGLE -R'operator definitions' ../interp/operator.nw
	 ) | cpp | sed '/^#/d'
	) > $target


cmmfloat.h:D: ../interp/cmmfloat.nw
	notangle -R$target $prereq | cpif $target

copgen32.c:DQ: opgen.lua copgen.lua
	../bin/qc-- opgen.lua copgen.lua > $target

copgen32.o: cmmfloat.h interp.h

interp.h:
	cat /dev/null > $target

cmmfloat-$config_float_impl.c:D: ../interp/cmmfloat.nw
	notangle -R$target -L $prereq > $target

x86-linux.optest: optest-x86-linux
	./$prereq -v -nan -nan 500000

optest-${config_arch}:Q: optest.o \
                         copgen${config_wordsize}.o cmmopgen-${config_arch}.o \
                         cmmfloat-$config_float_impl.o
	cc -o $target $prereq -lm

cmmopgen-${config_arch}.c--:DQ: opgen.lua $QC
	echo "# building operator test bed (C-- version)"
	$QC $QCFLAGS opgen.lua -e 'Testgen.emit()' > $target

cmmopgen-&.o:Q: cmmopgen-&.c-- $QC
	$QC $QCFLAGS -c -globals cmmopgen-$stem.c--

optest.c:DQ: optest.nw
	$NOTANGLE -L -R"$target" $prereq > $target
