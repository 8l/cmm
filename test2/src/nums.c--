/* There was a bug in resetting global mutable state. This test case exercises
 * that bug.
 */

target byteorder little wordsize 32 pointersize 32 float "ieee754";
bits2 System.rounding_mode = "IEEE 754 rounding mode";

import x1;
import x2;
import x3;
import x4;
import u__floor;
import prim600;
import y1;
import u8a;
import y2;
import y3;
import y4;
import u__trunc;
import fall_through;
import i4a;
import i4b;
import v__round;
import a__NaN;
import a__0;
import prim711;
import prim559;
import prim546;
import d2;
import prim979;
import u__round;
import number;
import prim963;
import prim675;
import i8a;
import i8b;
import u__ceiling;
import b;
import c;
import d;
import e;
import f2;
import f;
import g;
import h;
import i;
import j;
import k;
import u;
import v;
import w;
import x;
import y;
import z;
import prim652;
import l;
import checkForInterrupts;
import m;
import n;
import prim1042;
import u4a;
import prim1029;
import a__Inf;
import v__trunc;
import prim754;
import v__ceiling;
import v__floor;
import prim491;

section "data" {
 export GL_printInt8;
 GL_printInt8: bits32;
 export GL_printUInt8;
 GL_printUInt8: bits32;
 export GL_test__nums__1;
 GL_test__nums__1: bits32;
 export GL_test__nums__2;
 GL_test__nums__2: bits32;
 export GL_test__nums__3;
 GL_test__nums__3: bits32;
 export GL_test__nums__4;
 GL_test__nums__4: bits32;
 export GL_test__nums__5;
 GL_test__nums__5: bits32;
 export GL_test__nums__6;
 GL_test__nums__6: bits32;
 export GL_test__nums__7;
 GL_test__nums__7: bits32;
 executed_nums_create_initial: bits32 { 0::bits32 };
 executed_nums_extend_initial: bits32 { 0::bits32 };
 executed_nums_main: bits32 { 0::bits32 };
}

section "text" {
foreign "C" _C_nums_create_initial() {
 nums_create_initial();
 foreign "C" return();
}
bits32 { _C_nums_create_initial };
export nums_create_initial;
nums_create_initial() {
 if(%ne(bits32[executed_nums_create_initial], 0::bits32)) {
  return(); }
 bits32[executed_nums_create_initial] = 1::bits32;
 bits32[GL_printInt8] = fun_printInt8;
 bits32[GL_printUInt8] = fun_printUInt8;
 bits32[GL_test__nums__1] = fun_test__nums__1;
 bits32[GL_test__nums__2] = fun_test__nums__2;
 bits32[GL_test__nums__3] = fun_test__nums__3;
 bits32[GL_test__nums__4] = fun_test__nums__4;
 bits32[GL_test__nums__5] = fun_test__nums__5;
 bits32[GL_test__nums__6] = fun_test__nums__6;
 bits32[GL_test__nums__7] = fun_test__nums__7;
 return();
}
}

section "text" {
foreign "C" _C_nums_extend_initial() {
 nums_extend_initial();
 foreign "C" return();
}
bits32 { _C_nums_extend_initial };
export nums_extend_initial;
nums_extend_initial() {
 if(%ne(bits32[executed_nums_extend_initial], 0::bits32)) {
  return(); }
 bits32[executed_nums_extend_initial] = 1::bits32;
 return();
}
}

section "text" {
foreign "C" _C_nums_main() {
 nums_main();
 foreign "C" return();
}
bits32 { _C_nums_main };
export nums_main;
nums_main() {
 if(%ne(bits32[executed_nums_main], 0::bits32)) {
  return(); }
 bits32[executed_nums_main] = 1::bits32;
 bits32 V482;
 bits32 V483;
 bits32 V484;
 bits32 V485;
 bits32 V486;
 bits32 V487;
 bits32 V488;
 foreign "C" prim491();
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 V482 = bits32[GL_test__nums__1];
 fun_test__nums__1();
 V483 = bits32[GL_test__nums__2];
 fun_test__nums__2();
 V484 = bits32[GL_test__nums__3];
 fun_test__nums__3();
 V485 = bits32[GL_test__nums__4];
 fun_test__nums__4();
 V486 = bits32[GL_test__nums__5];
 fun_test__nums__5();
 V487 = bits32[GL_test__nums__6];
 fun_test__nums__6();
 V488 = bits32[GL_test__nums__7];
 fun_test__nums__7();
 return();
}
}

section "text" {
foreign "C" _C_fun_printInt8(bits64 V539) {
 fun_printInt8(V539);
 foreign "C" return();
}
bits32 { _C_fun_printInt8 };
export fun_printInt8;
fun_printInt8(bits64 V539) {
 bits64 number;
 bits64 V540;
 foreign "C" checkForInterrupts();
 number = V539;
 V540 = number;
 foreign "C" prim546(V540);
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 return();
}
}

section "text" {
foreign "C" _C_fun_printUInt8(bits64 V552) {
 fun_printUInt8(V552);
 foreign "C" return();
}
bits32 { _C_fun_printUInt8 };
export fun_printUInt8;
fun_printUInt8(bits64 V552) {
 bits64 number;
 bits64 V553;
 foreign "C" checkForInterrupts();
 number = V552;
 V553 = number;
 foreign "C" prim559(V553);
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 return();
}
}

section "text" {
foreign "C" _C_fun_test__nums__1() {
 fun_test__nums__1();
 foreign "C" return();
}
bits32 { _C_fun_test__nums__1 };
export fun_test__nums__1;
fun_test__nums__1() {
 bits32 i4a;
 bits32 i4b;
 bits32 u4a;
 bits64 i8a;
 bits64 i8b;
 bits64 u8a;
 bits32 V577;
 bits32 V578;
 bits32 V579;
 bits64 V580;
 bits64 V581;
 bits64 V582;
 bits32 V583;
 bits32 V584;
 foreign "C" checkForInterrupts();
 i4a = 2147483647::bits32;
 i4b = -2147483648::bits32;
 u4a = 4294967295U::bits32;
 i8a = 9223372036854775807::bits64;
 i8b = -9223372036854775808::bits64;
 u8a = 18446744073709551615U::bits64;
 V577 = i4a;
 V578 = i4b;
 V579 = u4a;
 V580 = i8a;
 V581 = i8b;
 V582 = u8a;
 V583 = bits32[GL_printInt8];
 V584 = bits32[GL_printUInt8];
 foreign "C" prim600(V577, V578, V579, V580, V581, V582, V583, V584);
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 return();
}
}

section "text" {
foreign "C" _C_fun_test__nums__2() {
 fun_test__nums__2();
 foreign "C" return();
}
bits32 { _C_fun_test__nums__2 };
export fun_test__nums__2;
fun_test__nums__2() {
 bits32 x;
 bits32 y;
 bits32 z;
 bits32 V616;
 bits32 V625;
 bits32 V626;
 bits32 V627;
 foreign "C" checkForInterrupts();
 x = %add(%rem(%quot(%mul(%sub(%add(%neg(%com(1::bits32)), 3::bits32), 4::bits32), 200::bits32), 2::bits32), 13::bits32), 700::bits32);
 V616 = x;
 y = %shrl(%shl(%xor(%com(%xor(%or(%and(V616, 774::bits32), 123::bits32), 543::bits32)), 34::bits32), %sx32(12::bits8)), %sx32(4::bits8));
 z = %shra(-123::bits32, %sx32(3::bits8));
 V625 = x;
 V626 = y;
 V627 = z;
 foreign "C" prim652(V625, V626, V627);
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 return();
}
}

section "text" {
foreign "C" _C_fun_test__nums__3() {
 fun_test__nums__3();
 foreign "C" return();
}
bits32 { _C_fun_test__nums__3 };
export fun_test__nums__3;
fun_test__nums__3() {
 bits64 x;
 bits64 V664;
 foreign "C" checkForInterrupts();
 x = %fdiv(%fmul(%fsub(%fadd(%fneg(1.000000000000000000e+00::bits64), 3.000000000000000000e+00::bits64, System.rounding_mode), 4.000000000000000000e+00::bits64, System.rounding_mode), 2.000000000000000000e+02::bits64, System.rounding_mode), 2.000000000000000000e+00::bits64, System.rounding_mode);
 V664 = x;
 foreign "C" prim675("float" V664);
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 return();
}
}

section "text" {
foreign "C" _C_fun_test__nums__4() {
 fun_test__nums__4();
 foreign "C" return();
}
bits32 { _C_fun_test__nums__4 };
export fun_test__nums__4;
fun_test__nums__4() {
 bits8 x;
 bits8 y;
 bits8 z;
 bits8 V686;
 bits8 V689;
 bits8 V692;
 bits8 V693;
 bits8 V694;
 foreign "C" checkForInterrupts();
 x = %zx8(%bit(%disjoin(%true, %false)));
 V686 = x;
 y = %zx8(%bit(%conjoin(%disjoin(%not(%ne(V686, 0::bits8)), %not(%false)), %true)));
 V689 = y;
 z = %zx8(%bit(%disjoin(%conjoin(%ne(V689, 0::bits8), %false), %false)));
 V692 = x;
 V693 = y;
 V694 = z;
 foreign "C" prim711(V692, V693, V694);
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 return();
}
}

section "text" {
foreign "C" _C_fun_test__nums__5() {
 fun_test__nums__5();
 foreign "C" return();
}
bits32 { _C_fun_test__nums__5 };
export fun_test__nums__5;
fun_test__nums__5() {
 bits16 x;
 bits32 y;
 bits32 z;
 bits16 w;
 bits32 u;
 bits8 v;
 bits16 V724;
 bits32 V726;
 bits16 V727;
 bits32 V728;
 bits16 V729;
 bits32 V730;
 bits32 V731;
 bits16 V732;
 bits32 V733;
 bits8 V734;
 foreign "C" checkForInterrupts();
 x = 5U::bits16;
 V724 = x;
 y = %zx32(V724);
 z = -1::bits32;
 V726 = z;
 w = %lobits16(V726);
 V727 = w;
 u = %zx32(V727);
 V728 = u;
 v = %lobits8(V728);
 V729 = x;
 V730 = y;
 V731 = z;
 V732 = w;
 V733 = u;
 V734 = v;
 foreign "C" prim754(V729, V730, V731, V732, V733, V734);
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 return();
}
}

section "text" {
foreign "C" _C_fun_test__nums__6() {
 fun_test__nums__6();
 foreign "C" return();
}
bits32 { _C_fun_test__nums__6 };
export fun_test__nums__6;
fun_test__nums__6() {
 bits32 x;
 bits64 y;
 bits32 w;
 bits32 u__floor;
 bits32 u__ceiling;
 bits32 u__trunc;
 bits32 u__round;
 bits32 v__floor;
 bits32 v__ceiling;
 bits32 v__trunc;
 bits32 v__round;
 bits64 a__0;
 bits64 a__Inf;
 bits64 a__NaN;
 bits64 b;
 bits64 c;
 bits64 d;
 bits64 d2;
 bits64 e;
 bits64 f2;
 bits64 f;
 bits64 g;
 bits64 h;
 bits8 i;
 bits8 j;
 bits8 k;
 bits8 l;
 bits8 m;
 bits32 V812;
 bits64 V813;
 bits64 V826;
 bits64 V841;
 bits64 V842;
 bits64 V843;
 bits64 V844;
 bits64 V845;
 bits64 V846;
 bits64 V847;
 bits64 V848;
 bits64 V849;
 bits64 V850;
 bits32 V851;
 bits64 V852;
 bits32 V853;
 bits32 V854;
 bits32 V855;
 bits32 V856;
 bits32 V857;
 bits32 V858;
 bits32 V859;
 bits32 V860;
 bits32 V861;
 bits64 V862;
 bits64 V863;
 bits64 V864;
 bits64 V865;
 bits64 V866;
 bits64 V867;
 bits64 V868;
 bits64 V869;
 bits64 V870;
 bits64 V871;
 bits64 V872;
 bits64 V873;
 bits8 V874;
 bits8 V875;
 bits8 V876;
 bits8 V877;
 bits8 V878;
 foreign "C" checkForInterrupts();
 x = 3.500000000000000000e+00::bits32;
 V812 = x;
 y = %f2f64(V812, %round_nearest);
 V813 = y;
 w = %f2f32(V813, %round_nearest);
 u__floor = %f2i32(%fneg(3.500000000000000000e+00::bits32), %round_down);
 u__ceiling = %f2i32(%fneg(3.500000000000000000e+00::bits32), %round_up);
 u__trunc = %f2i32(%fneg(3.500000000000000000e+00::bits32), %round_zero);
 u__round = %f2i32(%fneg(3.500000000000000000e+00::bits32), %round_nearest);
 v__floor = %f2i32(3.500000000000000000e+00::bits64, %round_down);
 v__ceiling = %f2i32(3.500000000000000000e+00::bits64, %round_up);
 v__trunc = %f2i32(3.500000000000000000e+00::bits64, %round_zero);
 v__round = %f2i32(3.500000000000000000e+00::bits64, %round_nearest);
 a__0 = 0.000000000000000000e+00::bits64;
 a__Inf = %pinf64;
 a__NaN = %NaN64(1::bits52);
 V826 = a__0;
 b = %fdiv(3.500000000000000000e+00::bits64, V826, System.rounding_mode);
 c = %fdiv(3.500000000000000000e+00::bits64, %pinf64, System.rounding_mode);
 d = %fneg(%pinf64);
 d2 = %fneg(%NaN64(1::bits52));
 e = %fdiv(3.500000000000000000e+00::bits64, %NaN64(1::bits52), System.rounding_mode);
 f2 = %fdiv(%pinf64, %fneg(3.500000000000000000e+00::bits64), System.rounding_mode);
 f = %fdiv(%pinf64, %pinf64, System.rounding_mode);
 g = %fmul(%pinf64, 0.000000000000000000e+00::bits64, System.rounding_mode);
 h = %fmul(0.000000000000000000e+00::bits64, %NaN64(1::bits52), System.rounding_mode);
 V841 = a__NaN;
 V842 = e;
 i = %zx8(%bit(%feq(V841, V842)));
 V843 = a__Inf;
 V844 = b;
 j = %zx8(%bit(%feq(V843, V844)));
 V845 = a__NaN;
 V846 = a__Inf;
 k = %zx8(%bit(%feq(V845, V846)));
 V847 = a__NaN;
 V848 = a__NaN;
 l = %zx8(%bit(%feq(V847, %fneg(V848))));
 V849 = a__NaN;
 V850 = a__NaN;
 m = %zx8(%bit(%feq(V849, V850)));
 V851 = x;
 V852 = y;
 V853 = w;
 V854 = u__floor;
 V855 = u__ceiling;
 V856 = u__trunc;
 V857 = u__round;
 V858 = v__floor;
 V859 = v__ceiling;
 V860 = v__trunc;
 V861 = v__round;
 V862 = a__0;
 V863 = a__Inf;
 V864 = a__NaN;
 V865 = b;
 V866 = c;
 V867 = d;
 V868 = d2;
 V869 = e;
 V870 = f;
 V871 = f2;
 V872 = g;
 V873 = h;
 V874 = i;
 V875 = j;
 V876 = k;
 V877 = l;
 V878 = m;
 foreign "C" prim963("float" V851, "float" V852, "float" V853, V854, V855, V856, V857, V858, V859, V860, V861, "float" V862, "float" V863, "float" V864, "float" V865, "float" V866, "float" V867, "float" V868, "float" V869, "float" V870, "float" V871, "float" V872, "float" V873, V874, V875, V876, V877, V878);
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 return();
}
}

section "text" {
foreign "C" _C_fun_test__nums__7() {
 fun_test__nums__7();
 foreign "C" return();
}
bits32 { _C_fun_test__nums__7 };
export fun_test__nums__7;
fun_test__nums__7() {
 bits32 n;
 bits32 d;
 bits32 x1;
 bits32 x2;
 bits32 x3;
 bits32 x4;
 bits32 y1;
 bits32 y2;
 bits32 y3;
 bits32 y4;
 bits32 V1048;
 bits32 V1049;
 bits32 V980;
 bits32 V981;
 bits32 V982;
 bits32 V983;
 bits32 V984;
 bits32 V985;
 bits32 V986;
 bits32 V987;
 bits32 V988;
 bits32 V989;
 bits32 V990;
 bits32 V991;
 bits32 V992;
 bits32 V993;
 bits32 V994;
 bits32 V995;
 bits32 V996;
 bits32 V997;
 bits32 V998;
 bits32 V999;
 bits32 V1000;
 bits32 V1001;
 bits32 V1002;
 bits32 V1003;
 foreign "C" checkForInterrupts();
 stackdata {
  n979: bits32;
 }
 stackdata {
  d979: bits32;
 }
 foreign "C" prim979(n979, d979);
 V1048 = bits32[n979];
 n = V1048;
 V1049 = bits32[d979];
 d = V1049;
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 V980 = n;
 V981 = d;
 x1 = %quot(V980, V981);
 V982 = n;
 V983 = d;
 x2 = %quot(%neg(V982), V983);
 V984 = n;
 V985 = d;
 x3 = %quot(V984, %neg(V985));
 V986 = n;
 V987 = d;
 x4 = %quot(%neg(V986), %neg(V987));
 V988 = x1;
 V989 = x2;
 V990 = x3;
 V991 = x4;
 foreign "C" prim1029(V988, V989, V990, V991);
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 V992 = n;
 V993 = d;
 y1 = %rem(V992, V993);
 V994 = n;
 V995 = d;
 y2 = %rem(%neg(V994), V995);
 V996 = n;
 V997 = d;
 y3 = %rem(V996, %neg(V997));
 V998 = n;
 V999 = d;
 y4 = %rem(%neg(V998), %neg(V999));
 V1000 = y1;
 V1001 = y2;
 V1002 = y3;
 V1003 = y4;
 foreign "C" prim1042(V1000, V1001, V1002, V1003);
 if(%ne(bits8[fall_through], 1::bits8)) { return(); }
 return();
}
}

