

target
	byteorder little
	memsize 8
	wordsize 32
	pointersize 32
;
//bits2 System.rounding_mode "rounding mode";
section "text" {
export @i_main as "_main";
}
section "text" {
@i_main(bits32 @i_argc, bits32 @i_argv, ) {
  stackdata {
    align 4;
    @i_expr: bits32;
  }
  bits32 @i_i;
  stackdata {
    align 4;
    @i_cntxt: bits8[180];
  }
  bits32 @i_1;
  bits32 @i_2;
  bits32 @i_3;
  bits32 @i_4;
  bits32 @i_5;
  bits32 @i_6;
  bits32 @i_7;
  bits32 @i_8;
  @i_argc = @i_argc;
  @i_argv = @i_argv;
  (bits32[@i_osinit])(bits32[@i_18]);
  (bits32[@i_xlbegin])(bits32[@i_cntxt], 72, 1);
  @i_1 = (bits32[@i__setjmp])(bits32[(@i_cntxt + 8)]);
  if (%eq(@i_1, 0)) { goto @i_19; }
  (bits32[@i_printf])(bits32[@i_22]);
  (bits32[@i_osfinish])();
  (bits32[@i_exit])(1);
  @i_19:
  (bits32[@i_xlinit])();
  (bits32[@i_xlend])(bits32[@i_cntxt]);
  (bits32[@i_xlbegin])(bits32[@i_cntxt], 72, bits32[bits32[@i_true]]);
  @i_2 = (bits32[@i__setjmp])(bits32[(@i_cntxt + 8)]);
  if (%ne(@i_2, 0)) { goto @i_23; }
  @i_3 = 0;
  (bits32[@i_xlload])(bits32[@i_26], @i_3, @i_3);
  @i_23:
  @i_4 = (bits32[@i__setjmp])(bits32[(@i_cntxt + 8)]);
  if (%ne(@i_4, 0)) { goto @i_27; }
  @i_i = 1;
  goto @i_33; // targets annotation is missing
  @i_30:
  @i_5 = (bits32[@i_xlload])(bits32[%add(%shl(@i_i,2),@i_argv)], 1, 0);
  if (%ne(@i_5, 0)) { goto @i_34; }
  (bits32[@i_xlfail])(bits32[@i_36]);
  @i_34:
  @i_31:
  @i_i = %add(@i_i,1);
  @i_33:
  if (%lt(@i_i, @i_argc)) { goto @i_30; }
  @i_27:
  (bits32[@i_xlsave])(bits32[@i_expr], 0);
  goto @i_38; // targets annotation is missing
  @i_37:
  @i_6 = (bits32[@i__setjmp])(bits32[(@i_cntxt + 8)]);
  @i_i = @i_6;
  if (%eq(@i_6, 0)) { goto @i_40; }
  if (%ne(@i_i, 64)) { goto @i_43; }
  (bits32[@i_stdputstr])(bits32[@i_45]);
  @i_43:
  bits32[%add(bits32[bits32[@i_s_evalhook]],8)] = 0;
  bits32[%add(bits32[bits32[@i_s_applyhook]],8)] = 0;
  bits32[@i_xldebug] = 0;
  (bits32[@i_xlflush])();
  @i_40:
  @i_7 = (bits32[@i_xlread])(bits32[%add(bits32[bits32[@i_s_stdin]],8)], bits32[@i_expr], 0);
  if (%ne(@i_7, 0)) { goto @i_46; }
  goto @i_39; // targets annotation is missing
  @i_46:
  @i_8 = (bits32[@i_xleval])(bits32[bits32[@i_expr]]);
  bits32[@i_expr] = @i_8;
  (bits32[@i_stdprint])(bits32[bits32[@i_expr]]);
  @i_38:
  goto @i_37; // targets annotation is missing
  @i_39:
  (bits32[@i_xlend])(bits32[@i_cntxt]);
  (bits32[@i_osfinish])();
  (bits32[@i_exit])(0);
  return (0);
  @i_17:
return();
}
export @i_stdprint as "_stdprint";
@i_stdprint(bits32 @i_expr, ) {
  (bits32[@i_xlprint])(bits32[%add(bits32[bits32[@i_s_stdout]],8)], @i_expr, 1);
  (bits32[@i_xlterpri])(bits32[%add(bits32[bits32[@i_s_stdout]],8)]);
  @i_48:
return();
}
export @i_stdputstr as "_stdputstr";
@i_stdputstr(bits32 @i_str, ) {
  (bits32[@i_xlputstr])(bits32[%add(bits32[bits32[@i_s_stdout]],8)], @i_str);
  @i_49:
return();
}
import bits32 "_ftab" as @i_ftab;
import bits32 "_buf" as @i_buf;
import bits32 "_msgclass" as @i_msgclass;
import bits32 "_msgcls" as @i_msgcls;
import bits32 "_isnew" as @i_isnew;
import bits32 "_new" as @i_new;
import bits32 "_object" as @i_object;
import bits32 "_Class" as @i_Class;
import bits32 "_self" as @i_self;
import bits32 "_fnodes" as @i_fnodes;
import bits32 "_segs" as @i_segs;
import bits32 "_gccalls" as @i_gccalls;
import bits32 "_nfree" as @i_nfree;
import bits32 "_nsegs" as @i_nsegs;
import bits32 "_nnodes" as @i_nnodes;
import bits32 "_anodes" as @i_anodes;
import bits32 "_total" as @i_total;
import bits32 "_xlfsize" as @i_xlfsize;
import bits32 "_xlplevel" as @i_xlplevel;
import bits32 "_prompt" as @i_prompt;
import bits32 "_gsnumber" as @i_gsnumber;
import bits32 "_gsprefix" as @i_gsprefix;
import bits32 "_xlsample" as @i_xlsample;
import bits32 "_trace_stack" as @i_trace_stack;
import bits32 "_xltrace" as @i_xltrace;
import bits32 "_xldebug" as @i_xldebug;
import bits32 "_xlvalue" as @i_xlvalue;
import bits32 "_xlcontext" as @i_xlcontext;
import bits32 "_xlenv" as @i_xlenv;
import bits32 "_xlstktop" as @i_xlstktop;
import bits32 "_xlstkbase" as @i_xlstkbase;
import bits32 "_xlstack" as @i_xlstack;
import bits32 "_s_unbound" as @i_s_unbound;
import bits32 "_obarray" as @i_obarray;
import bits32 "_a_vect" as @i_a_vect;
import bits32 "_a_fptr" as @i_a_fptr;
import bits32 "_a_obj" as @i_a_obj;
import bits32 "_a_str" as @i_a_str;
import bits32 "_a_float" as @i_a_float;
import bits32 "_a_int" as @i_a_int;
import bits32 "_a_sym" as @i_a_sym;
import bits32 "_a_list" as @i_a_list;
import bits32 "_a_fsubr" as @i_a_fsubr;
import bits32 "_a_subr" as @i_a_subr;
import bits32 "_k_aux" as @i_k_aux;
import bits32 "_k_rest" as @i_k_rest;
import bits32 "_k_optional" as @i_k_optional;
import bits32 "_k_tmacro" as @i_k_tmacro;
import bits32 "_k_nmacro" as @i_k_nmacro;
import bits32 "_k_const" as @i_k_const;
import bits32 "_k_wspace" as @i_k_wspace;
import bits32 "_k_tnot" as @i_k_tnot;
import bits32 "_k_test" as @i_k_test;
import bits32 "_s_eql" as @i_s_eql;
import bits32 "_s_aref" as @i_s_aref;
import bits32 "_s_splist" as @i_s_splist;
import bits32 "_s_svalue" as @i_s_svalue;
import bits32 "_s_get" as @i_s_get;
import bits32 "_s_nth" as @i_s_nth;
import bits32 "_s_cdr" as @i_s_cdr;
import bits32 "_s_car" as @i_s_car;
import bits32 "_s_breakenable" as @i_s_breakenable;
import bits32 "_s_tlimit" as @i_s_tlimit;
import bits32 "_s_tracenable" as @i_s_tracenable;
import bits32 "_s_rtable" as @i_s_rtable;
import bits32 "_s_stdout" as @i_s_stdout;
import bits32 "_s_stdin" as @i_s_stdin;
import bits32 "_s_macro" as @i_s_macro;
import bits32 "_s_lambda" as @i_s_lambda;
import bits32 "_s_applyhook" as @i_s_applyhook;
import bits32 "_s_evalhook" as @i_s_evalhook;
import bits32 "_s_comat" as @i_s_comat;
import bits32 "_s_comma" as @i_s_comma;
import bits32 "_s_bquote" as @i_s_bquote;
import bits32 "_s_function" as @i_s_function;
import bits32 "_s_quote" as @i_s_quote;
import bits32 "_s_dot" as @i_s_dot;
import bits32 "_true" as @i_true;
import bits32 "_xlsave" as @i_xlsave;
import bits32 "_xlabort" as @i_xlabort;
import bits32 "_xlfail" as @i_xlfail;
import bits32 "_osfinish" as @i_osfinish;
import bits32 "_osfinit" as @i_osfinit;
import bits32 "_oscheck" as @i_oscheck;
import bits32 "_osputc" as @i_osputc;
import bits32 "_osgetc" as @i_osgetc;
import bits32 "_osrand" as @i_osrand;
import bits32 "_osinit" as @i_osinit;
import bits32 "_xexit" as @i_xexit;
import bits32 "_xbaktrace" as @i_xbaktrace;
import bits32 "_xtype" as @i_xtype;
import bits32 "_xmem" as @i_xmem;
import bits32 "_xalloc" as @i_xalloc;
import bits32 "_xexpand" as @i_xexpand;
import bits32 "_xgc" as @i_xgc;
import bits32 "_xload" as @i_xload;
import bits32 "_xlsinit" as @i_xlsinit;
import bits32 "_hash" as @i_hash;
import bits32 "_xlremprop" as @i_xlremprop;
import bits32 "_xlputprop" as @i_xlputprop;
import bits32 "_xlgetprop" as @i_xlgetprop;
import bits32 "_xlsetvalue" as @i_xlsetvalue;
import bits32 "_xlygetvalue" as @i_xlygetvalue;
import bits32 "_xlxgetvalue" as @i_xlxgetvalue;
import bits32 "_xlgetvalue" as @i_xlgetvalue;
import bits32 "_xlbind" as @i_xlbind;
import bits32 "_xlframe" as @i_xlframe;
import bits32 "_xlmakesym" as @i_xlmakesym;
import bits32 "_xlsenter" as @i_xlsenter;
import bits32 "_xlenter" as @i_xlenter;
import bits32 "_equal" as @i_equal;
import bits32 "_eql" as @i_eql;
import bits32 "_eq" as @i_eq;
import bits32 "_xllastarg" as @i_xllastarg;
import bits32 "_xlgetfile" as @i_xlgetfile;
import bits32 "_xltest" as @i_xltest;
import bits32 "_xlevmatch" as @i_xlevmatch;
import bits32 "_xlevarg" as @i_xlevarg;
import bits32 "_xlmatch" as @i_xlmatch;
import bits32 "_xlarg" as @i_xlarg;
import bits32 "_xlsubr" as @i_xlsubr;
import bits32 "_xchar" as @i_xchar;
import bits32 "_xstring" as @i_xstring;
import bits32 "_xsubstr" as @i_xsubstr;
import bits32 "_xstrcat" as @i_xstrcat;
import bits32 "_xlrinit" as @i_xlrinit;
import bits32 "_needsextension" as @i_needsextension;
import bits32 "_callmacro" as @i_callmacro;
import bits32 "_defmacro" as @i_defmacro;
import bits32 "_isnumber" as @i_isnumber;
import bits32 "_rmsemi" as @i_rmsemi;
import bits32 "_rmrpar" as @i_rmrpar;
import bits32 "_rmlpar" as @i_rmlpar;
import bits32 "_rmcomma" as @i_rmcomma;
import bits32 "_rmbquote" as @i_rmbquote;
import bits32 "_rmdquote" as @i_rmdquote;
import bits32 "_rmquote" as @i_rmquote;
import bits32 "_rmhash" as @i_rmhash;
import bits32 "_readone" as @i_readone;
import bits32 "_xlread" as @i_xlread;
import bits32 "_xlload" as @i_xlload;
import bits32 "_xlputstr" as @i_xlputstr;
import bits32 "_xlterpri" as @i_xlterpri;
import bits32 "_xlprint" as @i_xlprint;
import bits32 "_xloinit" as @i_xloinit;
import bits32 "_xlobsetvalue" as @i_xlobsetvalue;
import bits32 "_xlobgetvalue" as @i_xlobgetvalue;
import bits32 "_xlsend" as @i_xlsend;
import bits32 "_xladdmsg" as @i_xladdmsg;
import bits32 "_xladdivar" as @i_xladdivar;
import bits32 "_xlclass" as @i_xlclass;
import bits32 "_xgtr" as @i_xgtr;
import bits32 "_xgeq" as @i_xgeq;
import bits32 "_xneq" as @i_xneq;
import bits32 "_xequ" as @i_xequ;
import bits32 "_xleq" as @i_xleq;
import bits32 "_xlss" as @i_xlss;
import bits32 "_xoddp" as @i_xoddp;
import bits32 "_xevenp" as @i_xevenp;
import bits32 "_xplusp" as @i_xplusp;
import bits32 "_xzerop" as @i_xzerop;
import bits32 "_xminusp" as @i_xminusp;
import bits32 "_xrand" as @i_xrand;
import bits32 "_xfloat" as @i_xfloat;
import bits32 "_xfix" as @i_xfix;
import bits32 "_xsqrt" as @i_xsqrt;
import bits32 "_xexp" as @i_xexp;
import bits32 "_xtan" as @i_xtan;
import bits32 "_xcos" as @i_xcos;
import bits32 "_xsin" as @i_xsin;
import bits32 "_xsub1" as @i_xsub1;
import bits32 "_xadd1" as @i_xadd1;
import bits32 "_xabs" as @i_xabs;
import bits32 "_xbitnot" as @i_xbitnot;
import bits32 "_checkfneg" as @i_checkfneg;
import bits32 "_checkfzero" as @i_checkfzero;
import bits32 "_checkizero" as @i_checkizero;
import bits32 "_xbitxor" as @i_xbitxor;
import bits32 "_xbitior" as @i_xbitior;
import bits32 "_xbitand" as @i_xbitand;
import bits32 "_xexpt" as @i_xexpt;
import bits32 "_xmax" as @i_xmax;
import bits32 "_xmin" as @i_xmin;
import bits32 "_xrem" as @i_xrem;
import bits32 "_xdiv" as @i_xdiv;
import bits32 "_xmul" as @i_xmul;
import bits32 "_xsub" as @i_xsub;
import bits32 "_xadd" as @i_xadd;
import bits32 "_xequal" as @i_xequal;
import bits32 "_xeql" as @i_xeql;
import bits32 "_xeq" as @i_xeq;
import bits32 "_xconsp" as @i_xconsp;
import bits32 "_xlistp" as @i_xlistp;
import bits32 "_xnull" as @i_xnull;
import bits32 "_xboundp" as @i_xboundp;
import bits32 "_xnumberp" as @i_xnumberp;
import bits32 "_xsymbolp" as @i_xsymbolp;
import bits32 "_xatom" as @i_xatom;
import bits32 "_xdelete" as @i_xdelete;
import bits32 "_xnconc" as @i_xnconc;
import bits32 "_xrplcd" as @i_xrplcd;
import bits32 "_xrplca" as @i_xrplca;
import bits32 "_xmaplist" as @i_xmaplist;
import bits32 "_xmapl" as @i_xmapl;
import bits32 "_xmapcar" as @i_xmapcar;
import bits32 "_xmapc" as @i_xmapc;
import bits32 "_xlength" as @i_xlength;
import bits32 "_xnthcdr" as @i_xnthcdr;
import bits32 "_xnth" as @i_xnth;
import bits32 "_dotest" as @i_dotest;
import bits32 "_xremove" as @i_xremove;
import bits32 "_xsublis" as @i_xsublis;
import bits32 "_xsubst" as @i_xsubst;
import bits32 "_xassoc" as @i_xassoc;
import bits32 "_xmember" as @i_xmember;
import bits32 "_xlast" as @i_xlast;
import bits32 "_xreverse" as @i_xreverse;
import bits32 "_xappend" as @i_xappend;
import bits32 "_xlist" as @i_xlist;
import bits32 "_xcons" as @i_xcons;
import bits32 "_xcddddr" as @i_xcddddr;
import bits32 "_xcdddar" as @i_xcdddar;
import bits32 "_xcddadr" as @i_xcddadr;
import bits32 "_xcddaar" as @i_xcddaar;
import bits32 "_xcdaddr" as @i_xcdaddr;
import bits32 "_xcdadar" as @i_xcdadar;
import bits32 "_xcdaadr" as @i_xcdaadr;
import bits32 "_xcdaaar" as @i_xcdaaar;
import bits32 "_xcadddr" as @i_xcadddr;
import bits32 "_xcaddar" as @i_xcaddar;
import bits32 "_xcadadr" as @i_xcadadr;
import bits32 "_xcadaar" as @i_xcadaar;
import bits32 "_xcaaddr" as @i_xcaaddr;
import bits32 "_xcaadar" as @i_xcaadar;
import bits32 "_xcaaadr" as @i_xcaaadr;
import bits32 "_xcaaaar" as @i_xcaaaar;
import bits32 "_xcdddr" as @i_xcdddr;
import bits32 "_xcddar" as @i_xcddar;
import bits32 "_xcdadr" as @i_xcdadr;
import bits32 "_xcdaar" as @i_xcdaar;
import bits32 "_xcaddr" as @i_xcaddr;
import bits32 "_xcadar" as @i_xcadar;
import bits32 "_xcaadr" as @i_xcaadr;
import bits32 "_xcaaar" as @i_xcaaar;
import bits32 "_xcddr" as @i_xcddr;
import bits32 "_xcdar" as @i_xcdar;
import bits32 "_xcadr" as @i_xcadr;
import bits32 "_xcaar" as @i_xcaar;
import bits32 "_xcdr" as @i_xcdr;
import bits32 "_xcar" as @i_xcar;
import bits32 "_xlsignal" as @i_xlsignal;
import bits32 "_xlthrow" as @i_xlthrow;
import bits32 "_xlreturn" as @i_xlreturn;
import bits32 "_xlgo" as @i_xlgo;
import bits32 "_xlcontinue" as @i_xlcontinue;
import bits32 "_xlcleanup" as @i_xlcleanup;
import bits32 "_xltoplevel" as @i_xltoplevel;
import bits32 "_xljump" as @i_xljump;
import bits32 "_xlend" as @i_xlend;
import bits32 "_xlbegin" as @i_xlbegin;
import bits32 "_xlflush" as @i_xlflush;
import bits32 "_xlputc" as @i_xlputc;
import bits32 "_xlpeek" as @i_xlpeek;
import bits32 "_docommand" as @i_docommand;
import bits32 "_xlgetc" as @i_xlgetc;
import bits32 "_xlinit" as @i_xlinit;
import bits32 "_xreadline" as @i_xreadline;
import bits32 "_xwrchar" as @i_xwrchar;
import bits32 "_xpkchar" as @i_xpkchar;
import bits32 "_xrdchar" as @i_xrdchar;
import bits32 "_xclose" as @i_xclose;
import bits32 "_xopeno" as @i_xopeno;
import bits32 "_xopeni" as @i_xopeni;
import bits32 "_xflatc" as @i_xflatc;
import bits32 "_xflatsize" as @i_xflatsize;
import bits32 "_xterpri" as @i_xterpri;
import bits32 "_xprinc" as @i_xprinc;
import bits32 "_xprin1" as @i_xprin1;
import bits32 "_xprint" as @i_xprint;
import bits32 "_xread" as @i_xread;
import bits32 "_xlabind" as @i_xlabind;
import bits32 "_xlunbound" as @i_xlunbound;
import bits32 "_xlevlist" as @i_xlevlist;
import bits32 "_xlapply" as @i_xlapply;
import bits32 "_xlxeval" as @i_xlxeval;
import bits32 "_xleval" as @i_xleval;
import bits32 "_xlminit" as @i_xlminit;
import bits32 "_stats" as @i_stats;
import bits32 "_addseg" as @i_addseg;
import bits32 "_vmark" as @i_vmark;
import bits32 "_mark" as @i_mark;
import bits32 "_gc" as @i_gc;
import bits32 "_findmem" as @i_findmem;
import bits32 "_newvector" as @i_newvector;
import bits32 "_newobject" as @i_newobject;
import bits32 "_newstring" as @i_newstring;
import bits32 "_cvflonum" as @i_cvflonum;
import bits32 "_cvfixnum" as @i_cvfixnum;
import bits32 "_cvfile" as @i_cvfile;
import bits32 "_cvsubr" as @i_cvsubr;
import bits32 "_cvcsymbol" as @i_cvcsymbol;
import bits32 "_cvsymbol" as @i_cvsymbol;
import bits32 "_cvcstring" as @i_cvcstring;
import bits32 "_cvstring" as @i_cvstring;
import bits32 "_consd" as @i_consd;
import bits32 "_consa" as @i_consa;
import bits32 "_cons" as @i_cons;
import bits32 "_xldinit" as @i_xldinit;
import bits32 "_xlbaktrace" as @i_xlbaktrace;
import bits32 "_xlerrprint" as @i_xlerrprint;
import bits32 "_xlcerror" as @i_xlcerror;
import bits32 "_xlerror" as @i_xlerror;
import bits32 "_xlbreak" as @i_xlbreak;
import bits32 "_tagblock" as @i_tagblock;
import bits32 "_doupdates" as @i_doupdates;
import bits32 "_xevalhook" as @i_xevalhook;
import bits32 "_xerrset" as @i_xerrset;
import bits32 "_xcontinue" as @i_xcontinue;
import bits32 "_xcleanup" as @i_xcleanup;
import bits32 "_xbreak" as @i_xbreak;
import bits32 "_xcerror" as @i_xcerror;
import bits32 "_xerror" as @i_xerror;
import bits32 "_xthrow" as @i_xthrow;
import bits32 "_xcatch" as @i_xcatch;
import bits32 "_xdotimes" as @i_xdotimes;
import bits32 "_xdolist" as @i_xdolist;
import bits32 "_xdostar" as @i_xdostar;
import bits32 "_xdo" as @i_xdo;
import bits32 "_xprogn" as @i_xprogn;
import bits32 "_xprog2" as @i_xprog2;
import bits32 "_xprog1" as @i_xprog1;
import bits32 "_xreturn" as @i_xreturn;
import bits32 "_xgo" as @i_xgo;
import bits32 "_xprogstar" as @i_xprogstar;
import bits32 "_xprog" as @i_xprog;
import bits32 "_xletstar" as @i_xletstar;
import bits32 "_xlet" as @i_xlet;
import bits32 "_xif" as @i_xif;
import bits32 "_xor" as @i_xor;
import bits32 "_xand" as @i_xand;
import bits32 "_xcase" as @i_xcase;
import bits32 "_xcond" as @i_xcond;
import bits32 "_xmkarray" as @i_xmkarray;
import bits32 "_xaref" as @i_xaref;
import bits32 "_xhash" as @i_xhash;
import bits32 "_xremprop" as @i_xremprop;
import bits32 "_xputprop" as @i_xputprop;
import bits32 "_xget" as @i_xget;
import bits32 "_xsymplist" as @i_xsymplist;
import bits32 "_xsymvalue" as @i_xsymvalue;
import bits32 "_xsymname" as @i_xsymname;
import bits32 "_xintern" as @i_xintern;
import bits32 "_xmakesymbol" as @i_xmakesymbol;
import bits32 "_xgensym" as @i_xgensym;
import bits32 "_xdefmacro" as @i_xdefmacro;
import bits32 "_xdefun" as @i_xdefun;
import bits32 "_xsetf" as @i_xsetf;
import bits32 "_xsetq" as @i_xsetq;
import bits32 "_xset" as @i_xset;
import bits32 "_xbquote" as @i_xbquote;
import bits32 "_xlambda" as @i_xlambda;
import bits32 "_xfunction" as @i_xfunction;
import bits32 "_xquote" as @i_xquote;
import bits32 "_xfuncall" as @i_xfuncall;
import bits32 "_xapply" as @i_xapply;
import bits32 "_xeval" as @i_xeval;
import bits32 "_siglongjmp" as @i_siglongjmp;
import bits32 "_longjmp" as @i_longjmp;
import bits32 "___sigsetjmp" as @i___sigsetjmp;
import bits32 "__setjmp" as @i__setjmp;
import bits32 "_setjmp" as @i_setjmp;
import bits32 "_toupper" as @i_toupper;
import bits32 "_tolower" as @i_tolower;
import bits32 "_isxdigit" as @i_isxdigit;
import bits32 "_isupper" as @i_isupper;
import bits32 "_isspace" as @i_isspace;
import bits32 "_ispunct" as @i_ispunct;
import bits32 "_isprint" as @i_isprint;
import bits32 "_isgraph" as @i_isgraph;
import bits32 "_islower" as @i_islower;
import bits32 "_isdigit" as @i_isdigit;
import bits32 "_iscntrl" as @i_iscntrl;
import bits32 "_isalpha" as @i_isalpha;
import bits32 "_isalnum" as @i_isalnum;
import bits32 "___ctype_toupper" as @i___ctype_toupper;
import bits32 "___ctype_tolower" as @i___ctype_tolower;
import bits32 "___ctype_b" as @i___ctype_b;
import bits32 "_wcstombs" as @i_wcstombs;
import bits32 "_mbstowcs" as @i_mbstowcs;
import bits32 "_wctomb" as @i_wctomb;
import bits32 "_mbtowc" as @i_mbtowc;
import bits32 "_mblen" as @i_mblen;
import bits32 "_ldiv" as @i_ldiv;
import bits32 "_div" as @i_div;
import bits32 "_labs" as @i_labs;
import bits32 "_abs" as @i_abs;
import bits32 "_qsort" as @i_qsort;
import bits32 "_bsearch" as @i_bsearch;
import bits32 "_system" as @i_system;
import bits32 "___secure_getenv" as @i___secure_getenv;
import bits32 "_getenv" as @i_getenv;
import bits32 "_exit" as @i_exit;
import bits32 "_atexit" as @i_atexit;
import bits32 "_abort" as @i_abort;
import bits32 "_free" as @i_free;
import bits32 "_realloc" as @i_realloc;
import bits32 "_calloc" as @i_calloc;
import bits32 "_malloc" as @i_malloc;
import bits32 "_rand_r" as @i_rand_r;
import bits32 "_srand" as @i_srand;
import bits32 "_rand" as @i_rand;
import bits32 "___strtoul_internal" as @i___strtoul_internal;
import bits32 "___strtol_internal" as @i___strtol_internal;
import bits32 "___strtold_internal" as @i___strtold_internal;
import bits32 "___strtof_internal" as @i___strtof_internal;
import bits32 "___strtod_internal" as @i___strtod_internal;
import bits32 "_strtoul" as @i_strtoul;
import bits32 "_strtol" as @i_strtol;
import bits32 "_strtod" as @i_strtod;
import bits32 "_atol" as @i_atol;
import bits32 "_atoi" as @i_atoi;
import bits32 "_atof" as @i_atof;
import bits32 "___ctype_get_mb_cur_max" as @i___ctype_get_mb_cur_max;
import bits32 "_funlockfile" as @i_funlockfile;
import bits32 "_ftrylockfile" as @i_ftrylockfile;
import bits32 "_flockfile" as @i_flockfile;
import bits32 "_ctermid" as @i_ctermid;
import bits32 "_fileno" as @i_fileno;
import bits32 "_perror" as @i_perror;
import bits32 "_ferror" as @i_ferror;
import bits32 "_feof" as @i_feof;
import bits32 "_clearerr" as @i_clearerr;
import bits32 "_fsetpos" as @i_fsetpos;
import bits32 "_fgetpos" as @i_fgetpos;
import bits32 "_rewind" as @i_rewind;
import bits32 "_ftell" as @i_ftell;
import bits32 "_fseek" as @i_fseek;
import bits32 "_fwrite" as @i_fwrite;
import bits32 "_fread" as @i_fread;
import bits32 "_ungetc" as @i_ungetc;
import bits32 "_puts" as @i_puts;
import bits32 "_fputs" as @i_fputs;
import bits32 "_gets" as @i_gets;
import bits32 "_fgets" as @i_fgets;
import bits32 "_putchar_unlocked" as @i_putchar_unlocked;
import bits32 "_putc_unlocked" as @i_putc_unlocked;
import bits32 "_putchar" as @i_putchar;
import bits32 "_putc" as @i_putc;
import bits32 "_fputc" as @i_fputc;
import bits32 "_getchar_unlocked" as @i_getchar_unlocked;
import bits32 "_getc_unlocked" as @i_getc_unlocked;
import bits32 "_getchar" as @i_getchar;
import bits32 "_getc" as @i_getc;
import bits32 "_fgetc" as @i_fgetc;
import bits32 "_sscanf" as @i_sscanf;
import bits32 "_scanf" as @i_scanf;
import bits32 "_fscanf" as @i_fscanf;
import bits32 "_vsprintf" as @i_vsprintf;
import bits32 "_vprintf" as @i_vprintf;
import bits32 "_vfprintf" as @i_vfprintf;
import bits32 "_sprintf" as @i_sprintf;
import bits32 "_printf" as @i_printf;
import bits32 "_fprintf" as @i_fprintf;
import bits32 "_setvbuf" as @i_setvbuf;
import bits32 "_setbuf" as @i_setbuf;
import bits32 "_fdopen" as @i_fdopen;
import bits32 "_freopen" as @i_freopen;
import bits32 "_fopen" as @i_fopen;
import bits32 "_fflush" as @i_fflush;
import bits32 "_fclose" as @i_fclose;
import bits32 "_tmpnam" as @i_tmpnam;
import bits32 "_tmpfile" as @i_tmpfile;
import bits32 "_rename" as @i_rename;
import bits32 "_remove" as @i_remove;
import bits32 "_stderr" as @i_stderr;
import bits32 "_stdout" as @i_stdout;
import bits32 "_stdin" as @i_stdin;
import bits32 "__IO_free_backup_area" as @i__IO_free_backup_area;
import bits32 "__IO_seekpos" as @i__IO_seekpos;
import bits32 "__IO_seekoff" as @i__IO_seekoff;
import bits32 "__IO_sgetn" as @i__IO_sgetn;
import bits32 "__IO_padn" as @i__IO_padn;
import bits32 "__IO_vfprintf" as @i__IO_vfprintf;
import bits32 "__IO_vfscanf" as @i__IO_vfscanf;
import bits32 "__IO_ftrylockfile" as @i__IO_ftrylockfile;
import bits32 "__IO_funlockfile" as @i__IO_funlockfile;
import bits32 "__IO_flockfile" as @i__IO_flockfile;
import bits32 "__IO_peekc_locked" as @i__IO_peekc_locked;
import bits32 "__IO_ferror" as @i__IO_ferror;
import bits32 "__IO_feof" as @i__IO_feof;
import bits32 "__IO_putc" as @i__IO_putc;
import bits32 "__IO_getc" as @i__IO_getc;
import bits32 "___woverflow" as @i___woverflow;
import bits32 "___wuflow" as @i___wuflow;
import bits32 "___wunderflow" as @i___wunderflow;
import bits32 "___overflow" as @i___overflow;
import bits32 "___uflow" as @i___uflow;
import bits32 "___underflow" as @i___underflow;
import bits32 "__IO_2_1_stderr_" as @i__IO_2_1_stderr_;
import bits32 "__IO_2_1_stdout_" as @i__IO_2_1_stdout_;
import bits32 "__IO_2_1_stdin_" as @i__IO_2_1_stdin_;
import bits32 "_fmod" as @i_fmod;
import bits32 "_floor" as @i_floor;
import bits32 "_fabs" as @i_fabs;
import bits32 "_ceil" as @i_ceil;
import bits32 "_sqrt" as @i_sqrt;
import bits32 "_pow" as @i_pow;
import bits32 "_modf" as @i_modf;
import bits32 "_log10" as @i_log10;
import bits32 "_log" as @i_log;
import bits32 "_ldexp" as @i_ldexp;
import bits32 "_frexp" as @i_frexp;
import bits32 "_exp" as @i_exp;
import bits32 "_tanh" as @i_tanh;
import bits32 "_sinh" as @i_sinh;
import bits32 "_cosh" as @i_cosh;
import bits32 "_tan" as @i_tan;
import bits32 "_sin" as @i_sin;
import bits32 "_cos" as @i_cos;
import bits32 "_atan2" as @i_atan2;
import bits32 "_atan" as @i_atan;
import bits32 "_asin" as @i_asin;
import bits32 "_acos" as @i_acos;
}
section "data" {
@i_45:
bits8[] { 91::bits8, 32::bits8, 98::bits8, 97::bits8, 99::bits8, 107::bits8, 32::bits8, 116::bits8, 111::bits8, 32::bits8, 116::bits8, 104::bits8, 101::bits8, 32::bits8, 116::bits8, 111::bits8, 112::bits8, 32::bits8, 108::bits8, 101::bits8, 118::bits8, 101::bits8, 108::bits8, 32::bits8, 93::bits8, 10::bits8, 0::bits8, };
@i_36:
bits8[] { 99::bits8, 97::bits8, 110::bits8, 39::bits8, 116::bits8, 32::bits8, 108::bits8, 111::bits8, 97::bits8, 100::bits8, 32::bits8, 102::bits8, 105::bits8, 108::bits8, 101::bits8, 0::bits8, };
@i_26:
bits8[] { 105::bits8, 110::bits8, 105::bits8, 116::bits8, 46::bits8, 108::bits8, 115::bits8, 112::bits8, 0::bits8, };
@i_22:
bits8[] { 102::bits8, 97::bits8, 116::bits8, 97::bits8, 108::bits8, 32::bits8, 105::bits8, 110::bits8, 105::bits8, 116::bits8, 105::bits8, 97::bits8, 108::bits8, 105::bits8, 122::bits8, 97::bits8, 116::bits8, 105::bits8, 111::bits8, 110::bits8, 32::bits8, 101::bits8, 114::bits8, 114::bits8, 111::bits8, 114::bits8, 10::bits8, 0::bits8, };
@i_18:
bits8[] { 88::bits8, 76::bits8, 73::bits8, 83::bits8, 80::bits8, 32::bits8, 118::bits8, 101::bits8, 114::bits8, 115::bits8, 105::bits8, 111::bits8, 110::bits8, 32::bits8, 49::bits8, 46::bits8, 54::bits8, 44::bits8, 32::bits8, 67::bits8, 111::bits8, 112::bits8, 121::bits8, 114::bits8, 105::bits8, 103::bits8, 104::bits8, 116::bits8, 32::bits8, 40::bits8, 99::bits8, 41::bits8, 32::bits8, 49::bits8, 57::bits8, 56::bits8, 53::bits8, 44::bits8, 32::bits8, 98::bits8, 121::bits8, 32::bits8, 68::bits8, 97::bits8, 118::bits8, 105::bits8, 100::bits8, 32::bits8, 66::bits8, 101::bits8, 116::bits8, 122::bits8, 0::bits8, };
}
