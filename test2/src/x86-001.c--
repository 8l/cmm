// execute the commands below to use this file as a test case
//
// this file tests to be sure that the output assembles without complaint
//

target byteorder little;

section "data" {
  playground: bits32[12];
}

p () {
	bits32 i, j, k;
	i, j, k = 1, 2, 3;
	i = j;
	i = bits32[playground+j];
	bits32[playground+i] = j;
	bits32[playground+i] = bits32[playground+j];
	i = %sx32(bits8[playground+j]);
	i = %sx32(bits16[playground+j]);
	i = %zx32(bits8[playground+j]);
	i = %zx32(bits16[playground+j]);
	bits16[playground+i] = %lobits16(j);
	bits8[playground+i]  = %lobits8(j);
	// bits16[playground+i] = %sx16(bits8[playground+j]);  // no 16-bit temps yet
	i = j + k;
	i = j - k;
	i = %and(j, k);
	i = %or(j, k);
	i = %xor(j, k);
	i = bits32[playground+j] + k;
	i = bits32[playground+j] - k;
	i = %and(bits32[playground+j], k);
	i = %or(bits32[playground+j], k);
	i = %xor(bits32[playground+j], k);
	i = j + bits32[playground+k];
	i = j - bits32[playground+k];
	i = %and(j, bits32[playground+k]);
	i = %or(j, bits32[playground+k]);
	i = %xor(j, bits32[playground+k]);
	bits32[playground+i] = j + bits32[playground+k];
	bits32[playground+i] = j - bits32[playground+k];
	bits32[playground+i] = %and(j, bits32[playground+k]);
	bits32[playground+i] = %or(j, bits32[playground+k]);
	bits32[playground+i] = %xor(j, bits32[playground+k]);
	if (j < k) { goto L; }
	if (j <= k) { goto L; }
	if (%leu(j, k)) { goto L; }
   L:   return (99);
}

export main; import printf;
foreign "C" main (bits32 argc, "address" bits32 argv) {
  bits32 n;
  n = p();
  foreign "C" printf("address" fmt, n);
  foreign "C" return (0);
}

section "data" {
  fmt: bits8[] "some weird instructions ran, after which we returned a literal %d\n\0";
}


