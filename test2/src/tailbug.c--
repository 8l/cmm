/********************************************************/
/* This test case comes from Wonseok Chae <wchae@tti-c.org> */
/* tailbug.c--                                                         */
/* generated by the MLPolyR frontend compiler  */
/********************************************************/
target byteorder little;
import bits32 printf;
import bits32 bzero;
export main;
section "data" { align 4;
   funA:bits32[] {funA_fun};
   funB:bits32[] {funB_fun};
_builtin_mlpr_String:bits32[]
   {funA, 
    funB
   };
}
/* error message */
section "data" {
   output_msg: bits8[] "%s\000";
   debug_msg : bits8[] "I'm at line %d...\n\000";
   test_msg  : bits8[] "test done\n\000"; 
}
/* (_, string) -> unit */
funA_fun (bits32 i, bits32 j) {
   bits32 flag;
   flag = foreign "C" printf (output_msg, j);
   return (0);
}
/* (_, _) -> string */
funB_fun (bits32 i, bits32 j) {
   return (test_msg);
}
 
/* main program to be tested */
l_1_print(bits32 x_57) {
   bits32 tmp_48;
   bits32 tmp_51;
   bits32 tmp_54;
   bits32 tmp_49;
l_0_print_0:
   tmp_48 = _builtin_mlpr_String;
   tmp_51 = bits32[tmp_48+4];
   tmp_54 = bits32[tmp_51](bits32[tmp_51+4], x_57);
   tmp_49 = bits32[tmp_48];
// generated codes
   jump bits32[tmp_49](bits32[tmp_49+4], tmp_54);     /* tailcall */
}
foreign "C"
main(bits32 argc, "address" bits32 argv)
{
  bits32 rv;
  rv = l_1_print(0) also cuts to k;
  foreign "C" return (rv);
continuation k(rv):
  foreign "C" return(-1);
}
 
 
