target
	byteorder little
	memsize 8
	wordsize 32
	pointersize 32
	float "ieee754";

bits2 System.rounding_mode = "IEEE 754 rounding mode";
section "data" {
}
section "data" {
export i@x as "x";
align 4;
i@x:
bits32[] {0x1};
bits32[] {0x2};
bits32[] {0x3};
bits32[] {0x4};
export i@main as "main";
}
section "text" {
foreign "C" i@main() {
  stackdata {
  }
  stackdata {
    align 4;
    i@1.12: bits8[16];
  }
  stackdata {
    align 4;
    i@2.13: bits8[16];
  }
  stackdata {
    align 4;
    i@3.14: bits8[16];
  }
  stackdata {
    align 4;
    i@4.15: bits8[16];
  }
  stackdata {
    align 4;
    i@5.16: bits8[16];
  }
  stackdata {
    align 4;
    i@6.17: bits8[16];
  }
  bits32 i@7.18;
  foreign "C" (i@print)("address" i@2);
  foreign "C" (i@print)("address" i@3, "address" i@4);
  foreign "C" (i@print)("address" i@5, 3, 10);
  foreign "C" (i@print)("address" i@6, "address" i@7, "address" i@8, 4, 10);
  foreign "C" (i@print)("address" i@9, "address" i@7, "address" i@8, "float" bits64[f@10], 10);
  i@7.18 = i@x;
  bits32 i@.blkcopy.19, i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18];
  i@.blkcopy.20 = bits32[i@7.18+4];
  bits32[i@1.12] = i@.blkcopy.19;
  bits32[i@1.12+4] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18+8];
  i@.blkcopy.20 = bits32[i@7.18+12];
  bits32[i@1.12+8] = i@.blkcopy.19;
  bits32[i@1.12+12] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18];
  i@.blkcopy.20 = bits32[i@7.18+4];
  bits32[i@2.13] = i@.blkcopy.19;
  bits32[i@2.13+4] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18+8];
  i@.blkcopy.20 = bits32[i@7.18+12];
  bits32[i@2.13+8] = i@.blkcopy.19;
  bits32[i@2.13+12] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18];
  i@.blkcopy.20 = bits32[i@7.18+4];
  bits32[i@3.14] = i@.blkcopy.19;
  bits32[i@3.14+4] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18+8];
  i@.blkcopy.20 = bits32[i@7.18+12];
  bits32[i@3.14+8] = i@.blkcopy.19;
  bits32[i@3.14+12] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18];
  i@.blkcopy.20 = bits32[i@7.18+4];
  bits32[i@4.15] = i@.blkcopy.19;
  bits32[i@4.15+4] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18+8];
  i@.blkcopy.20 = bits32[i@7.18+12];
  bits32[i@4.15+8] = i@.blkcopy.19;
  bits32[i@4.15+12] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18];
  i@.blkcopy.20 = bits32[i@7.18+4];
  bits32[i@5.16] = i@.blkcopy.19;
  bits32[i@5.16+4] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18+8];
  i@.blkcopy.20 = bits32[i@7.18+12];
  bits32[i@5.16+8] = i@.blkcopy.19;
  bits32[i@5.16+12] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18];
  i@.blkcopy.20 = bits32[i@7.18+4];
  bits32[i@6.17] = i@.blkcopy.19;
  bits32[i@6.17+4] = i@.blkcopy.20;
  i@.blkcopy.19 = bits32[i@7.18+8];
  i@.blkcopy.20 = bits32[i@7.18+12];
  bits32[i@6.17+8] = i@.blkcopy.19;
  bits32[i@6.17+12] = i@.blkcopy.20;
  foreign "C" (i@print)("address" i@11, "address" i@1.12, "address" i@2.13, "address" i@3.14, "address" i@4.15, "address" i@5.16, "address" i@6.17);
  return (0);
  L.1:
return();
}
export i@print as "print";
foreign "C" i@print("address" bits32 i@fmt, ) {
/* error this function is variadic.  You have no access to variadic arguments */
  stackdata {
  }
  bits32 i@ap.50;
  bits32 i@1.51;
  bits32 i@30.52;
  bits32 i@2.53;
  bits32 i@3.54;
  bits32 i@4.55;
  bits32 i@5.56;
  stackdata {
    align 4;
    i@x.57: bits8[16];
  }
  i@1.51 = foreign "C" (i@__builtin_next_arg)("address" i@fmt);
  i@ap.50 = %lobits32(%lobits32(i@1.51));
  goto L.25;
  L.22:
  if (%ne(%sx32(bits8[i@fmt]), 37)) { goto L.26; }
  i@2.53 = %add(i@fmt,1);
  i@fmt = i@2.53;
  i@30.52 = %sx32(bits8[i@2.53]);
  i@4.55 = 115;
  if (%eq(i@30.52, i@4.55)) { goto L.42; }
  if (%gt(i@30.52, i@4.55)) { goto L.47; }
  L.46:
  if (%lt(i@30.52, 98)) { goto L.28; }
  if (%gt(i@30.52, 102)) { goto L.28; }
  goto bits32[%add(%shl(i@30.52,2),(i@48-392))] targets L.21, L.25, L.23, L.27, L.26, L.28, L.44, L.42, L.40, L.38, L.36, L.31, L.47, L.46, L.22,;
  L.47:
  if (%eq(i@30.52, 119)) { goto L.40; }
  goto L.28;
  L.31:
  i@ap.50 = %add(i@ap.50,16);
  bits32 i@.blkcopy.58, i@.blkcopy.59;
  i@.blkcopy.58 = bits32[%add(i@ap.50,-16)];
  i@.blkcopy.59 = bits32[%add(i@ap.50,-16)+4];
  bits32[i@x.57] = i@.blkcopy.58;
  bits32[i@x.57+4] = i@.blkcopy.59;
  i@.blkcopy.58 = bits32[%add(i@ap.50,-16)+8];
  i@.blkcopy.59 = bits32[%add(i@ap.50,-16)+12];
  bits32[i@x.57+8] = i@.blkcopy.58;
  bits32[i@x.57+12] = i@.blkcopy.59;
  foreign "C" (i@printf)("address" i@32, bits32[i@x.57], bits32[(i@x.57+4)], bits32[(i@x.57+8)], bits32[(i@x.57+12)]);
  goto L.27;
  L.36:
  i@ap.50 = %add(i@ap.50,4);
  foreign "C" (i@printf)("address" i@37, %sx32(bits8[%add(i@ap.50,-4)]));
  goto L.27;
  L.38:
  i@ap.50 = %add(i@ap.50,4);
  foreign "C" (i@printf)("address" i@39, bits32[%add(i@ap.50,-4)]);
  goto L.27;
  L.40:
  i@ap.50 = %add(i@ap.50,4);
  foreign "C" (i@printf)("address" i@41, %sx32(bits16[%add(i@ap.50,-4)]));
  goto L.27;
  L.42:
  i@ap.50 = %add(i@ap.50,4);
  foreign "C" (i@printf)("address" i@43, "address" bits32[%add(i@ap.50,-4)]);
  goto L.27;
  L.44:
  i@ap.50 = %add(i@ap.50,8);
  foreign "C" (i@printf)("address" i@45, "float" bits64[%add(i@ap.50,-8)]);
  goto L.27;
  L.28:
  foreign "C" (i@printf)("address" i@37, %sx32(bits8[i@fmt]));
  goto L.27;
  L.26:
  foreign "C" (i@printf)("address" i@37, %sx32(bits8[i@fmt]));
  L.27:
  L.23:
  i@fmt = %add(i@fmt,1);
  L.25:
  if (%ne(%sx32(bits8[i@fmt]), 0)) { goto L.22; }
  return (0);
  L.21:
return();
}
}
section "data" {
align 4;
i@48:
bits32 {L.31};
bits32 {L.36};
bits32 {L.38};
bits32 {L.28};
bits32 {L.44};
}
section "text" {
import bits32 "printf" as i@printf;
import bits32 "__builtin_next_arg" as i@__builtin_next_arg;
import bits32 "va_end" as i@va_end;
}
section "data" {
i@45:
bits8[] "%f\x00";
i@43:
bits8[] "%s\x00";
i@41:
bits8[] "%x\x00";
i@39:
bits8[] "%d\x00";
i@37:
bits8[] "%c\x00";
i@32:
bits8[] "{%d %d %d %d}\x00";
i@11:
bits8[] "%b %b %b %b %b %b\x0a\x00";
align 4;
f@10:
bits32[] {0x0, 0x40140000};
i@9:
bits8[] "%s%s %f%c\x00";
i@8:
bits8[] "st\x00";
i@7:
bits8[] "te\x00";
i@6:
bits8[] "%s%s %w%c\x00";
i@5:
bits8[] "test %d%c\x00";
i@4:
bits8[] "2\x00";
i@3:
bits8[] "test %s\x0a\x00";
i@2:
bits8[] "test 1\x0a\x00";
}
