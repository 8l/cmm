target
	byteorder little
	memsize 8
	wordsize 32
	pointersize 32
	float "ieee754";

bits2 System.rounding_mode = "IEEE 754 rounding mode";
section "data" {
}
section "data" {
export i@yyin as "yyin";
align 4;
i@yyin:
bits32[] {0x0};
export i@yyout as "yyout";
align 4;
i@yyout:
bits32[] {0x0};
export i@yylex as "yylex";
}
section "text" {
foreign "C" i@yylex() {
  stackdata {
  }
  bits32 i@nstr.30;
  bits32 i@2.31;
  bits32 i@1.32;
  bits32 i@3.33;
  goto L.14;
  L.13:
  L.16:
  if (%lt(i@nstr.30, -1)) { goto L.17; }
  if (%gt(i@nstr.30, 4)) { goto L.17; }
  goto bits32[%add(%shl(i@nstr.30,2),(i@28+4))] targets L.12, L.14, L.18, L.17, L.25, L.23, L.22, L.19, L.16, L.13,;
  L.19:
  i@1.32 = foreign "C" (i@yywrap)();
  if (%eq(i@1.32, 0)) { goto L.18; }
  return (0);
  goto L.12;
  L.22:
  return (257);
  goto L.12;
  L.23:
  return (258);
  goto L.12;
  L.25:
  return (%sx32(bits8[i@yytext]));
  goto L.12;
  L.17:
  foreign "C" (i@fprintf)("address" bits32[i@yyout], "address" i@27, i@nstr.30);
  L.18:
  L.14:
  i@3.33 = foreign "C" (i@yylook)();
  i@nstr.30 = i@3.33;
  if (%ge(i@3.33, 0)) { goto L.13; }
  return (0);
  L.12:
return();
}
}
section "data" {
align 4;
i@28:
bits32 {L.18};
bits32 {L.19};
bits32 {L.22};
bits32 {L.23};
bits32 {L.18};
bits32 {L.25};
}
section "text" {
}
section "data" {
export i@yyvstop as "yyvstop";
align 4;
i@yyvstop:
bits32[] {0x0};
bits32[] {0x4};
bits32[] {0x0};
bits32[] {0x3};
bits32[] {0x4};
bits32[] {0x0};
bits32[] {0x2};
bits32[] {0x4};
bits32[] {0x0};
bits32[] {0x1};
bits32[] {0x4};
bits32[] {0x0};
bits32[] {0x2};
bits32[] {0x0};
bits32[] {0x1};
bits32[] {0x0};
bits32[] {0x0};
export i@yycrank as "yycrank";
i@yycrank:
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x1::bits8};
bits8[] {0x3::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x1::bits8};
bits8[] {0x4::bits8};
bits8[] {0x1::bits8};
bits8[] {0x3::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x1::bits8};
bits8[] {0x5::bits8};
bits8[] {0x5::bits8};
bits8[] {0x7::bits8};
bits8[] {0x5::bits8};
bits8[] {0x7::bits8};
bits8[] {0x5::bits8};
bits8[] {0x7::bits8};
bits8[] {0x5::bits8};
bits8[] {0x7::bits8};
bits8[] {0x5::bits8};
bits8[] {0x7::bits8};
bits8[] {0x5::bits8};
bits8[] {0x7::bits8};
bits8[] {0x5::bits8};
bits8[] {0x7::bits8};
bits8[] {0x5::bits8};
bits8[] {0x7::bits8};
bits8[] {0x5::bits8};
bits8[] {0x7::bits8};
bits8[] {0x5::bits8};
bits8[] {0x7::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x1::bits8};
bits8[] {0x6::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x6::bits8};
bits8[] {0x8::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
bits8[] {0x0::bits8};
export i@yysvec as "yysvec";
align 4;
i@yysvec:
bits32[] {0x0};
bits32[] {0x0};
bits32[] {0x0};
bits32 {(i@yycrank-2)};
bits32[] {0x0};
bits32[] {0x0};
bits32 {i@yycrank};
bits32 {(i@yysvec+12)};
bits32[] {0x0};
bits32 {i@yycrank};
bits32[] {0x0};
bits32 {(i@yyvstop+4)};
bits32 {i@yycrank};
bits32[] {0x0};
bits32 {(i@yyvstop+12)};
bits32 {(i@yycrank+4)};
bits32[] {0x0};
bits32 {(i@yyvstop+24)};
bits32 {(i@yycrank+38)};
bits32[] {0x0};
bits32 {(i@yyvstop+36)};
bits32 {i@yycrank};
bits32 {(i@yysvec+60)};
bits32 {(i@yyvstop+48)};
bits32 {i@yycrank};
bits32 {(i@yysvec+72)};
bits32 {(i@yyvstop+56)};
bits32[] {0x0};
bits32[] {0x0};
bits32[] {0x0};
export i@yytop as "yytop";
align 4;
i@yytop:
bits32 {(i@yycrank+282)};
export i@yybgin as "yybgin";
align 4;
i@yybgin:
bits32 {(i@yysvec+12)};
export i@yymatch as "yymatch";
i@yymatch:
bits8[] "\x00\x01\x01\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "\x01\x09\x0a\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "\x09\x01\x01\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "0000";
bits8[] "0000";
bits8[] "00\x01\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "\x01AAA";
bits8[] "AAAA";
bits8[] "AAAA";
bits8[] "AAAA";
bits8[] "AAAA";
bits8[] "AAAA";
bits8[] "AAA\x01";
bits8[] "\x01\x01\x01A";
bits8[] "\x01AAA";
bits8[] "AAAA";
bits8[] "AAAA";
bits8[] "AAAA";
bits8[] "AAAA";
bits8[] "AAAA";
bits8[] "AAA\x01";
bits8[] "\x01\x01\x01\x01";
bits8[] "\x00";
export i@yyextra as "yyextra";
i@yyextra:
bits8[] "\x00\x00\x00\x00";
bits8[] "\x00\x00\x00\x00";
bits8[] "\x00";
export i@yylineno as "yylineno";
align 4;
i@yylineno:
bits32[] {0x1};
export i@yysptr as "yysptr";
align 4;
i@yysptr:
bits32 {i@yysbuf};
export i@yyprevious as "yyprevious";
align 4;
i@yyprevious:
bits32[] {0xa};
export i@yylook as "yylook";
}
section "text" {
foreign "C" i@yylook() {
  stackdata {
  }
  bits32 i@yystate.132;
  bits32 i@lsp.133;
  bits32 i@yyt.134;
  bits32 i@yylastch.135;
  bits32 i@yych.136;
  bits32 i@yyr.137;
  bits32 i@yyz.138;
  bits32 i@1.139;
  bits32 i@69.140;
  bits32 i@68.141;
  bits32 i@67.142;
  bits32 i@2.143;
  bits32 i@3.144;
  bits32 i@4.145;
  bits32 i@5.146;
  bits32 i@6.147;
  bits32 i@7.148;
  bits32 i@8.149;
  bits32 i@9.150;
  bits32 i@10.151;
  bits32 i@11.152;
  bits32 i@12.153;
  bits32 i@13.154;
  bits32 i@14.155;
  bits32 i@16.156;
  bits32 i@15.157;
  bits32 i@17.158;
  bits32 i@18.159;
  bits32 i@19.160;
  bits32 i@20.161;
  bits32 i@21.162;
  bits32 i@22.163;
  bits32 i@23.164;
  bits32 i@24.165;
  bits32 i@25.166;
  bits32 i@26.167;
  bits32 i@28.168;
  bits32 i@27.169;
  bits32 i@29.170;
  bits32 i@30.171;
  bits32 i@31.172;
  bits32 i@32.173;
  bits32 i@33.174;
  bits32 i@34.175;
  bits32 i@35.176;
  bits32 i@37.177;
  bits32 i@36.178;
  bits32 i@38.179;
  bits32 i@39.180;
  bits32 i@40.181;
  bits32 i@41.182;
  bits32 i@42.183;
  bits32 i@43.184;
  bits32 i@44.185;
  bits32 i@46.186;
  bits32 i@45.187;
  bits32 i@47.188;
  bits32 i@48.189;
  bits32 i@49.190;
  bits32 i@50.191;
  bits32 i@51.192;
  bits32 i@52.193;
  bits32 i@53.194;
  bits32 i@54.195;
  bits32 i@56.196;
  bits32 i@55.197;
  bits32 i@57.198;
  bits32 i@58.199;
  bits32 i@59.200;
  bits32 i@60.201;
  bits32 i@62.202;
  bits32 i@61.203;
  bits32 i@63.204;
  bits32 i@64.205;
  bits32 i@66.206;
  bits32 i@65.207;
  bits32 i@67.208;
  bits32 i@123.209;
  bits32 i@122.210;
  bits32 i@121.211;
  bits32 i@68.212;
  bits32 i@69.213;
  bits32 i@70.214;
  bits32 i@71.215;
  bits32 i@72.216;
  bits8 i@73.217;
  if (%ne(bits32[i@yymorfg], 0)) { goto L.49; }
  i@yylastch.135 = i@yytext;
  goto L.50;
  L.49:
  bits32[i@yymorfg] = 0;
  i@yylastch.135 = %add(bits32[i@yyleng],i@yytext);
  L.50:
  L.51:
  i@lsp.133 = i@yylstate;
  i@1.139 = bits32[i@yybgin];
  i@yystate.132 = i@1.139;
  bits32[i@yyestate] = i@1.139;
  if (%ne(bits32[i@yyprevious], 10)) { goto L.55; }
  i@yystate.132 = %add(i@yystate.132,12);
  L.55:
  L.57:
  i@yyt.134 = bits32[i@yystate.132];
  if (%ne(%lobits32(i@yyt.134), %lobits32(i@yycrank))) { goto L.61; }
  i@yyz.138 = bits32[%add(i@yystate.132,4)];
  if (%ne(%lobits32(i@yyz.138), 0)) { goto L.63; }
  goto L.105;
  L.63:
  if (%ne(%lobits32(bits32[i@yyz.138]), %lobits32(i@yycrank))) { goto L.65; }
  goto L.105;
  L.65:
  L.61:
  i@2.143 = i@yylastch.135;
  i@yylastch.135 = %add(i@2.143,1);
  if (%leu(%lobits32(bits32[i@yysptr]), %lobits32(i@yysbuf))) { goto L.74; }
  i@3.144 = i@yysptr;
  i@4.145 = %add(bits32[i@3.144],-1);
  bits32[i@3.144] = i@4.145;
  i@67.142 = %sx32(bits8[i@4.145]);
  goto L.75;
  L.74:
  i@5.146 = foreign "C" (i@_IO_getc)("address" bits32[i@yyin]);
  i@67.142 = i@5.146;
  L.75:
  bits32[i@yytchar] = i@67.142;
  if (%ne(i@67.142, 10)) { goto L.72; }
  i@7.148 = i@yylineno;
  bits32[i@7.148] = %add(bits32[i@7.148],1);
  i@68.141 = bits32[i@yytchar];
  goto L.73;
  L.72:
  i@68.141 = bits32[i@yytchar];
  L.73:
  if (%ne(i@68.141, -1)) { goto L.70; }
  i@69.140 = 0;
  goto L.71;
  L.70:
  i@69.140 = bits32[i@yytchar];
  L.71:
  i@yych.136 = i@69.140;
  bits8[i@2.143] = %lobits8(i@69.140);
  L.76:
  i@yyr.137 = i@yyt.134;
  if (%leu(%lobits32(i@yyt.134), %lobits32(i@yycrank))) { goto L.77; }
  i@yyt.134 = %add(%shl(i@yych.136,1),i@yyr.137);
  if (%gtu(%lobits32(i@yyt.134), %lobits32(bits32[i@yytop]))) { goto L.78; }
  if (%ne(%lobits32(%add(%mul(12,%sx32(bits8[i@yyt.134])),i@yysvec)), %lobits32(i@yystate.132))) { goto L.78; }
  i@11.152 = i@yysvec;
  if (%ne(%lobits32(%add(%mul(12,%sx32(bits8[%add(i@yyt.134,1)])),i@11.152)), %lobits32(i@11.152))) { goto L.81; }
  i@12.153 = %add(i@yylastch.135,-1);
  i@yylastch.135 = i@12.153;
  i@13.154 = i@yytchar;
  bits32[i@13.154] = %sx32(bits8[i@12.153]);
  if (%ne(bits32[i@13.154], 10)) { goto L.83; }
  i@14.155 = i@yylineno;
  bits32[i@14.155] = %sub(bits32[i@14.155],1);
  L.83:
  i@15.157 = i@yysptr;
  i@16.156 = bits32[i@15.157];
  bits32[i@15.157] = %add(i@16.156,1);
  bits8[i@16.156] = %lobits8(bits32[i@yytchar]);
  goto L.105;
  L.81:
  i@17.158 = i@lsp.133;
  i@lsp.133 = %add(i@17.158,4);
  i@18.159 = %add(%mul(12,%sx32(bits8[%add(i@yyt.134,1)])),i@yysvec);
  i@yystate.132 = i@18.159;
  bits32[i@17.158] = i@18.159;
  goto L.57;
  L.77:
  if (%geu(%lobits32(i@yyt.134), %lobits32(i@yycrank))) { goto L.86; }
  i@19.160 = i@yycrank;
  i@20.161 = 1;
  i@21.162 = %add(%shl(%quot(%lobits32(%sub(%lobits32(i@19.160),%lobits32(i@yyt.134))),2),i@20.161),i@19.160);
  i@yyr.137 = i@21.162;
  i@yyt.134 = i@21.162;
  i@yyt.134 = %add(%shl(i@yych.136,i@20.161),i@yyt.134);
  if (%gtu(%lobits32(i@yyt.134), %lobits32(bits32[i@yytop]))) { goto L.88; }
  if (%ne(%lobits32(%add(%mul(12,%sx32(bits8[i@yyt.134])),i@yysvec)), %lobits32(i@yystate.132))) { goto L.88; }
  i@23.164 = i@yysvec;
  if (%ne(%lobits32(%add(%mul(12,%sx32(bits8[%add(i@yyt.134,1)])),i@23.164)), %lobits32(i@23.164))) { goto L.90; }
  i@24.165 = %add(i@yylastch.135,-1);
  i@yylastch.135 = i@24.165;
  i@25.166 = i@yytchar;
  bits32[i@25.166] = %sx32(bits8[i@24.165]);
  if (%ne(bits32[i@25.166], 10)) { goto L.92; }
  i@26.167 = i@yylineno;
  bits32[i@26.167] = %sub(bits32[i@26.167],1);
  L.92:
  i@27.169 = i@yysptr;
  i@28.168 = bits32[i@27.169];
  bits32[i@27.169] = %add(i@28.168,1);
  bits8[i@28.168] = %lobits8(bits32[i@yytchar]);
  goto L.105;
  L.90:
  i@29.170 = i@lsp.133;
  i@lsp.133 = %add(i@29.170,4);
  i@30.171 = %add(%mul(12,%sx32(bits8[%add(i@yyt.134,1)])),i@yysvec);
  i@yystate.132 = i@30.171;
  bits32[i@29.170] = i@30.171;
  goto L.57;
  L.88:
  i@yyt.134 = %add(%shl(%sx32(bits8[%add(i@yych.136,i@yymatch)]),1),i@yyr.137);
  if (%gtu(%lobits32(i@yyt.134), %lobits32(bits32[i@yytop]))) { goto L.94; }
  if (%ne(%lobits32(%add(%mul(12,%sx32(bits8[i@yyt.134])),i@yysvec)), %lobits32(i@yystate.132))) { goto L.94; }
  i@32.173 = i@yysvec;
  if (%ne(%lobits32(%add(%mul(12,%sx32(bits8[%add(i@yyt.134,1)])),i@32.173)), %lobits32(i@32.173))) { goto L.96; }
  i@33.174 = %add(i@yylastch.135,-1);
  i@yylastch.135 = i@33.174;
  i@34.175 = i@yytchar;
  bits32[i@34.175] = %sx32(bits8[i@33.174]);
  if (%ne(bits32[i@34.175], 10)) { goto L.98; }
  i@35.176 = i@yylineno;
  bits32[i@35.176] = %sub(bits32[i@35.176],1);
  L.98:
  i@36.178 = i@yysptr;
  i@37.177 = bits32[i@36.178];
  bits32[i@36.178] = %add(i@37.177,1);
  bits8[i@37.177] = %lobits8(bits32[i@yytchar]);
  goto L.105;
  L.96:
  i@38.179 = i@lsp.133;
  i@lsp.133 = %add(i@38.179,4);
  i@39.180 = %add(%mul(12,%sx32(bits8[%add(i@yyt.134,1)])),i@yysvec);
  i@yystate.132 = i@39.180;
  bits32[i@38.179] = i@39.180;
  goto L.57;
  L.94:
  L.86:
  L.78:
  i@40.181 = bits32[%add(i@yystate.132,4)];
  i@yystate.132 = i@40.181;
  if (%eq(%lobits32(i@40.181), 0)) { goto L.100; }
  i@41.182 = bits32[i@yystate.132];
  i@yyt.134 = i@41.182;
  if (%eq(%lobits32(i@41.182), %lobits32(i@yycrank))) { goto L.100; }
  goto L.76;
  L.100:
  i@42.183 = %add(i@yylastch.135,-1);
  i@yylastch.135 = i@42.183;
  i@43.184 = i@yytchar;
  bits32[i@43.184] = %sx32(bits8[i@42.183]);
  if (%ne(bits32[i@43.184], 10)) { goto L.102; }
  i@44.185 = i@yylineno;
  bits32[i@44.185] = %sub(bits32[i@44.185],1);
  L.102:
  i@45.187 = i@yysptr;
  i@46.186 = bits32[i@45.187];
  bits32[i@45.187] = %add(i@46.186,1);
  bits8[i@46.186] = %lobits8(bits32[i@yytchar]);
  goto L.105;
  L.104:
  i@47.188 = i@yylastch.135;
  i@yylastch.135 = %add(i@47.188,-1);
  bits8[i@47.188] = 0::bits8;
  i@48.189 = bits32[i@lsp.133];
  i@49.190 = 0;
  if (%eq(%lobits32(i@48.189), i@49.190)) { goto L.107; }
  i@50.191 = i@yyfnd;
  i@51.192 = bits32[%add(i@48.189,8)];
  bits32[i@50.191] = i@51.192;
  if (%eq(%lobits32(i@51.192), i@49.190)) { goto L.107; }
  if (%le(bits32[bits32[i@50.191]], 0)) { goto L.107; }
  bits32[i@yyolsp] = i@lsp.133;
  if (%eq(%sx32(bits8[%add(bits32[bits32[i@yyfnd]],i@yyextra)]), 0)) { goto L.109; }
  goto L.112;
  L.111:
  i@lsp.133 = %add(i@lsp.133,-4);
  i@52.193 = i@yylastch.135;
  i@yylastch.135 = %add(i@52.193,-1);
  i@53.194 = i@yytchar;
  bits32[i@53.194] = %sx32(bits8[i@52.193]);
  if (%ne(bits32[i@53.194], 10)) { goto L.114; }
  i@54.195 = i@yylineno;
  bits32[i@54.195] = %sub(bits32[i@54.195],1);
  L.114:
  i@55.197 = i@yysptr;
  i@56.196 = bits32[i@55.197];
  bits32[i@55.197] = %add(i@56.196,1);
  bits8[i@56.196] = %lobits8(bits32[i@yytchar]);
  L.112:
  i@57.198 = foreign "C" (i@yyback)("address" bits32[%add(bits32[i@lsp.133],8)], %neg(bits32[bits32[i@yyfnd]]));
  if (%eq(i@57.198, 1)) { goto L.116; }
  if (%gtu(%lobits32(i@lsp.133), %lobits32(i@yylstate))) { goto L.111; }
  L.116:
  L.109:
  bits32[i@yyprevious] = %sx32(bits8[i@yylastch.135]);
  bits32[i@yylsp] = i@lsp.133;
  i@59.200 = i@yyleng;
  i@60.201 = i@yytext;
  bits32[i@59.200] = %add(%lobits32(%sub(%lobits32(i@yylastch.135),%lobits32(i@60.201))),1);
  bits8[%add(bits32[i@59.200],i@60.201)] = 0::bits8;
  i@61.203 = i@yyfnd;
  i@62.202 = bits32[i@61.203];
  bits32[i@61.203] = %add(i@62.202,4);
  return (bits32[i@62.202]);
  goto L.48;
  L.107:
  i@63.204 = i@yytchar;
  bits32[i@63.204] = %sx32(bits8[i@yylastch.135]);
  if (%ne(bits32[i@63.204], 10)) { goto L.117; }
  i@64.205 = i@yylineno;
  bits32[i@64.205] = %sub(bits32[i@64.205],1);
  L.117:
  i@65.207 = i@yysptr;
  i@66.206 = bits32[i@65.207];
  bits32[i@65.207] = %add(i@66.206,1);
  bits8[i@66.206] = %lobits8(bits32[i@yytchar]);
  L.105:
  i@67.208 = i@lsp.133;
  i@lsp.133 = %add(i@67.208,-4);
  if (%gtu(%lobits32(i@67.208), %lobits32(i@yylstate))) { goto L.104; }
  if (%ne(%sx32(bits8[i@yytext]), 0)) { goto L.119; }
  bits32[i@yysptr] = i@yysbuf;
  return (0);
  goto L.48;
  L.119:
  if (%leu(%lobits32(bits32[i@yysptr]), %lobits32(i@yysbuf))) { goto L.128; }
  i@68.212 = i@yysptr;
  i@69.213 = %add(bits32[i@68.212],-1);
  bits32[i@68.212] = i@69.213;
  i@121.211 = %sx32(bits8[i@69.213]);
  goto L.129;
  L.128:
  i@70.214 = foreign "C" (i@_IO_getc)("address" bits32[i@yyin]);
  i@121.211 = i@70.214;
  L.129:
  bits32[i@yytchar] = i@121.211;
  if (%ne(i@121.211, 10)) { goto L.126; }
  i@72.216 = i@yylineno;
  bits32[i@72.216] = %add(bits32[i@72.216],1);
  i@122.210 = bits32[i@yytchar];
  goto L.127;
  L.126:
  i@122.210 = bits32[i@yytchar];
  L.127:
  if (%ne(i@122.210, -1)) { goto L.124; }
  i@123.209 = 0;
  goto L.125;
  L.124:
  i@123.209 = bits32[i@yytchar];
  L.125:
  i@73.217 = %lobits8(i@123.209);
  bits8[i@yytext] = i@73.217;
  bits32[i@yyprevious] = %sx32(i@73.217);
  if (%le(bits32[i@yyprevious], 0)) { goto L.130; }
  foreign "C" (i@_IO_putc)(bits32[i@yyprevious], "address" bits32[i@yyout]);
  L.130:
  i@yylastch.135 = i@yytext;
  goto L.51;
  L.48:
return();
}
export i@yyback as "yyback";
foreign "C" i@yyback("address" bits32 i@p, bits32 i@m, ) {
  stackdata {
  }
  bits32 i@1.226;
  if (%ne(%lobits32(i@p), 0)) { goto L.222; }
  return (0);
  goto L.218;
  L.221:
  i@1.226 = i@p;
  i@p = %add(i@1.226,4);
  if (%ne(bits32[i@1.226], i@m)) { goto L.224; }
  return (1);
  goto L.218;
  L.224:
  L.222:
  if (%ne(bits32[i@p], 0)) { goto L.221; }
  return (0);
  L.218:
return();
}
export i@yyinput as "yyinput";
foreign "C" i@yyinput() {
  stackdata {
  }
  bits32 i@230.237;
  bits32 i@229.238;
  bits32 i@228.239;
  bits32 i@1.240;
  bits32 i@2.241;
  bits32 i@3.242;
  bits32 i@4.243;
  bits32 i@5.244;
  if (%leu(%lobits32(bits32[i@yysptr]), %lobits32(i@yysbuf))) { goto L.235; }
  i@1.240 = i@yysptr;
  i@2.241 = %add(bits32[i@1.240],-1);
  bits32[i@1.240] = i@2.241;
  i@228.239 = %sx32(bits8[i@2.241]);
  goto L.236;
  L.235:
  i@3.242 = foreign "C" (i@_IO_getc)("address" bits32[i@yyin]);
  i@228.239 = i@3.242;
  L.236:
  bits32[i@yytchar] = i@228.239;
  if (%ne(i@228.239, 10)) { goto L.233; }
  i@5.244 = i@yylineno;
  bits32[i@5.244] = %add(bits32[i@5.244],1);
  i@229.238 = bits32[i@yytchar];
  goto L.234;
  L.233:
  i@229.238 = bits32[i@yytchar];
  L.234:
  if (%ne(i@229.238, -1)) { goto L.231; }
  i@230.237 = 0;
  goto L.232;
  L.231:
  i@230.237 = bits32[i@yytchar];
  L.232:
  return (i@230.237);
  L.227:
return();
}
export i@yyoutput as "yyoutput";
foreign "C" i@yyoutput(bits32 i@c, ) {
  stackdata {
  }
  foreign "C" (i@_IO_putc)(i@c, "address" bits32[i@yyout]);
  return (0);
  L.245:
return();
}
export i@yyunput as "yyunput";
foreign "C" i@yyunput(bits32 i@c, ) {
  stackdata {
  }
  bits32 i@1.249;
  bits32 i@2.250;
  bits32 i@4.251;
  bits32 i@3.252;
  i@1.249 = i@yytchar;
  bits32[i@1.249] = i@c;
  if (%ne(bits32[i@1.249], 10)) { goto L.247; }
  i@2.250 = i@yylineno;
  bits32[i@2.250] = %sub(bits32[i@2.250],1);
  L.247:
  i@3.252 = i@yysptr;
  i@4.251 = bits32[i@3.252];
  bits32[i@3.252] = %add(i@4.251,1);
  bits8[i@4.251] = %lobits8(bits32[i@yytchar]);
  return (0);
  L.246:
return();
}
export i@main as "main";
foreign "C" i@main() {
  stackdata {
  }
  bits32[i@yyin] = bits32[i@stdin];
  bits32[i@yyout] = bits32[i@stdout];
  foreign "C" (i@yyparse)();
  return (0);
  L.253:
return();
}
export i@yyerror as "yyerror";
foreign "C" i@yyerror("address" bits32 i@s, ) {
  stackdata {
  }
  foreign "C" (i@printf)("address" i@255, "address" i@s);
  return (0);
  L.254:
return();
}
}
section "data" {
export i@yyexca as "yyexca";
align 2;
i@yyexca:
bits16[] {0xffffffff::bits16};
bits16[] {0x1::bits16};
bits16[] {0x0::bits16};
bits16[] {0xffffffff::bits16};
bits16[] {0xfffffffe::bits16};
bits16[] {0x0::bits16};
export i@yyact as "yyact";
align 2;
i@yyact:
bits16[] {0xc::bits16};
bits16[] {0x2::bits16};
bits16[] {0x9::bits16};
bits16[] {0x8::bits16};
bits16[] {0x11::bits16};
bits16[] {0xb::bits16};
bits16[] {0x19::bits16};
bits16[] {0x11::bits16};
bits16[] {0xf::bits16};
bits16[] {0x12::bits16};
bits16[] {0x10::bits16};
bits16[] {0xa::bits16};
bits16[] {0x12::bits16};
bits16[] {0x11::bits16};
bits16[] {0xf::bits16};
bits16[] {0x7::bits16};
bits16[] {0x10::bits16};
bits16[] {0xd::bits16};
bits16[] {0x12::bits16};
bits16[] {0x5::bits16};
bits16[] {0x3::bits16};
bits16[] {0x1::bits16};
bits16[] {0x0::bits16};
bits16[] {0x13::bits16};
bits16[] {0x14::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x15::bits16};
bits16[] {0x16::bits16};
bits16[] {0x17::bits16};
bits16[] {0x18::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x6::bits16};
bits16[] {0xe::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x4::bits16};
bits16[] {0x6::bits16};
export i@yypact as "yypact";
align 2;
i@yypact:
bits16[] {0xfffffc18::bits16};
bits16[] {0xfffffff7::bits16};
bits16[] {0xfffffc18::bits16};
bits16[] {0x5::bits16};
bits16[] {0xfffffff9::bits16};
bits16[] {0xffffffc5::bits16};
bits16[] {0xfffffc18::bits16};
bits16[] {0xfffffc18::bits16};
bits16[] {0xfffffc18::bits16};
bits16[] {0xffffffd8::bits16};
bits16[] {0xffffffe3::bits16};
bits16[] {0xffffffd8::bits16};
bits16[] {0xffffffd8::bits16};
bits16[] {0xfffffc18::bits16};
bits16[] {0xfffffc18::bits16};
bits16[] {0xffffffd8::bits16};
bits16[] {0xffffffd8::bits16};
bits16[] {0xffffffd8::bits16};
bits16[] {0xffffffd8::bits16};
bits16[] {0xffffffda::bits16};
bits16[] {0xffffffdd::bits16};
bits16[] {0xffffffda::bits16};
bits16[] {0xffffffda::bits16};
bits16[] {0xfffffc18::bits16};
bits16[] {0xfffffc18::bits16};
bits16[] {0xfffffc18::bits16};
export i@yypgo as "yypgo";
align 2;
i@yypgo:
bits16[] {0x0::bits16};
bits16[] {0x15::bits16};
bits16[] {0x14::bits16};
bits16[] {0x11::bits16};
bits16[] {0xb::bits16};
export i@yyr1 as "yyr1";
align 2;
i@yyr1:
bits16[] {0x0::bits16};
bits16[] {0x1::bits16};
bits16[] {0x1::bits16};
bits16[] {0x1::bits16};
bits16[] {0x1::bits16};
bits16[] {0x2::bits16};
bits16[] {0x4::bits16};
bits16[] {0x4::bits16};
bits16[] {0x4::bits16};
bits16[] {0x4::bits16};
bits16[] {0x4::bits16};
bits16[] {0x4::bits16};
bits16[] {0x4::bits16};
bits16[] {0x4::bits16};
bits16[] {0x3::bits16};
export i@yyr2 as "yyr2";
align 2;
i@yyr2:
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x2::bits16};
bits16[] {0x3::bits16};
bits16[] {0x3::bits16};
bits16[] {0x3::bits16};
bits16[] {0x3::bits16};
bits16[] {0x3::bits16};
bits16[] {0x3::bits16};
bits16[] {0x3::bits16};
bits16[] {0x2::bits16};
bits16[] {0x3::bits16};
bits16[] {0x1::bits16};
bits16[] {0x1::bits16};
bits16[] {0x1::bits16};
export i@yychk as "yychk";
align 2;
i@yychk:
bits16[] {0xfffffc18::bits16};
bits16[] {0xffffffff::bits16};
bits16[] {0xa::bits16};
bits16[] {0xfffffffe::bits16};
bits16[] {0x100::bits16};
bits16[] {0xfffffffd::bits16};
bits16[] {0x101::bits16};
bits16[] {0xa::bits16};
bits16[] {0xa::bits16};
bits16[] {0x3d::bits16};
bits16[] {0xfffffffc::bits16};
bits16[] {0x2d::bits16};
bits16[] {0x28::bits16};
bits16[] {0xfffffffd::bits16};
bits16[] {0x102::bits16};
bits16[] {0x2b::bits16};
bits16[] {0x2d::bits16};
bits16[] {0x2a::bits16};
bits16[] {0x2f::bits16};
bits16[] {0xfffffffc::bits16};
bits16[] {0xfffffffc::bits16};
bits16[] {0xfffffffc::bits16};
bits16[] {0xfffffffc::bits16};
bits16[] {0xfffffffc::bits16};
bits16[] {0xfffffffc::bits16};
bits16[] {0x29::bits16};
export i@yydef as "yydef";
align 2;
i@yydef:
bits16[] {0x1::bits16};
bits16[] {0xfffffffe::bits16};
bits16[] {0x2::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0xe::bits16};
bits16[] {0x3::bits16};
bits16[] {0x4::bits16};
bits16[] {0x0::bits16};
bits16[] {0x5::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0xc::bits16};
bits16[] {0xd::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0x0::bits16};
bits16[] {0xa::bits16};
bits16[] {0x0::bits16};
bits16[] {0x6::bits16};
bits16[] {0x7::bits16};
bits16[] {0x8::bits16};
bits16[] {0x9::bits16};
bits16[] {0xb::bits16};
export i@yychar as "yychar";
align 4;
i@yychar:
bits32[] {0xffffffff};
export i@yynerrs as "yynerrs";
align 4;
i@yynerrs:
bits32[] {0x0};
export i@yyerrflag as "yyerrflag";
align 2;
i@yyerrflag:
bits16[] {0x0::bits16};
export i@yyparse as "yyparse";
}
section "text" {
foreign "C" i@yyparse() {
  stackdata {
  }
  bits32 i@yypvt.341;
  bits16 i@yystate.342;
  bits32 i@yyps.343;
  bits16 i@yyn.344;
  bits32 i@yypv.345;
  bits32 i@yyxi.346;
  bits16 i@yyj.347;
  stackdata {
    align 2;
    i@yys.348: bits8[300];
  }
  stackdata {
    align 2;
    i@yym.349: bits16;
  }
  bits16 i@1.350;
  bits32 i@2.351;
  bits32 i@3.352;
  bits16 i@4.353;
  bits32 i@5.354;
  bits16 i@6.355;
  bits32 i@7.356;
  bits16 i@8.357;
  bits32 i@9.358;
  bits32 i@10.359;
  bits32 i@11.360;
  bits16 i@12.361;
  bits32 i@300.362;
  bits32 i@17.363;
  bits32 i@13.364;
  bits32 i@14.365;
  bits32 i@15.366;
  bits32 i@16.367;
  bits16 i@18.368;
  bits32 i@19.369;
  bits32 i@20.370;
  bits32 i@21.371;
  bits32 i@22.372;
  bits32 i@23.373;
  bits32 i@24.374;
  bits16 i@25.375;
  bits32 i@26.376;
  bits32 i@320.377;
  bits32 i@27.378;
  i@1.350 = 0::bits16;
  i@yystate.342 = i@1.350;
  bits32[i@yychar] = -1;
  bits32[i@yynerrs] = 0;
  bits16[i@yyerrflag] = i@1.350;
  i@yyps.343 = (i@yys.348-2);
  i@yypv.345 = (i@yyv-4);
  L.259:
  i@2.351 = %add(i@yyps.343,2);
  i@yyps.343 = i@2.351;
  if (%leu(%lobits32(i@2.351), %lobits32((i@yys.348+298)))) { goto L.260; }
  foreign "C" (i@yyerror)("address" i@263);
  return (1);
  goto L.256;
  L.260:
  bits16[i@yyps.343] = i@yystate.342;
  i@yypv.345 = %add(i@yypv.345,4);
  bits32[i@yypv.345] = bits32[i@yyval];
  L.264:
  i@yyn.344 = bits16[%add(%shl(%sx32(i@yystate.342),1),i@yypact)];
  if (%gt(%sx32(i@yyn.344), -1000)) { goto L.265; }
  goto L.267;
  L.265:
  if (%ge(bits32[i@yychar], 0)) { goto L.268; }
  i@3.352 = foreign "C" (i@yylex)();
  bits32[i@yychar] = i@3.352;
  if (%ge(i@3.352, 0)) { goto L.270; }
  bits32[i@yychar] = 0;
  L.270:
  L.268:
  i@4.353 = %lobits16(%add(%sx32(i@yyn.344),bits32[i@yychar]));
  i@yyn.344 = i@4.353;
  if (%lt(%sx32(i@4.353), 0)) { goto L.274; }
  if (%lt(%sx32(i@yyn.344), 249)) { goto L.272; }
  L.274:
  goto L.267;
  L.272:
  i@5.354 = 1;
  i@6.355 = bits16[%add(%shl(%sx32(i@yyn.344),i@5.354),i@yyact)];
  i@yyn.344 = i@6.355;
  if (%ne(%sx32(bits16[%add(%shl(%sx32(i@6.355),i@5.354),i@yychk)]), bits32[i@yychar])) { goto L.275; }
  bits32[i@yychar] = -1;
  bits32[i@yyval] = bits32[i@yylval];
  i@yystate.342 = i@yyn.344;
  if (%le(%sx32(bits16[i@yyerrflag]), 0)) { goto L.259; }
  i@7.356 = i@yyerrflag;
  bits16[i@7.356] = %lobits16(%sub(%sx32(bits16[i@7.356]),1));
  goto L.259;
  L.275:
  L.267:
  i@8.357 = bits16[%add(%shl(%sx32(i@yystate.342),1),i@yydef)];
  i@yyn.344 = i@8.357;
  if (%ne(%sx32(i@8.357), -2)) { goto L.279; }
  if (%ge(bits32[i@yychar], 0)) { goto L.281; }
  i@9.358 = foreign "C" (i@yylex)();
  bits32[i@yychar] = i@9.358;
  if (%ge(i@9.358, 0)) { goto L.283; }
  bits32[i@yychar] = 0;
  L.283:
  L.281:
  i@yyxi.346 = i@yyexca;
  goto L.288;
  L.285:
  L.286:
  i@yyxi.346 = %add(i@yyxi.346,4);
  L.288:
  if (%ne(%sx32(bits16[i@yyxi.346]), -1)) { goto L.285; }
  if (%ne(%sx32(bits16[%add(i@yyxi.346,2)]), %sx32(i@yystate.342))) { goto L.285; }
  goto L.290;
  L.289:
  if (%ne(%sx32(bits16[i@yyxi.346]), bits32[i@yychar])) { goto L.292; }
  goto L.291;
  L.292:
  L.290:
  i@11.360 = %add(i@yyxi.346,4);
  i@yyxi.346 = i@11.360;
  if (%ge(%sx32(bits16[i@11.360]), 0)) { goto L.289; }
  L.291:
  i@12.361 = bits16[%add(i@yyxi.346,2)];
  i@yyn.344 = i@12.361;
  if (%ge(%sx32(i@12.361), 0)) { goto L.294; }
  return (0);
  goto L.256;
  L.294:
  L.279:
  if (%ne(%sx32(i@yyn.344), 0)) { goto L.296; }
  i@300.362 = %sx32(bits16[i@yyerrflag]);
  if (%lt(i@300.362, 0)) { goto L.298; }
  if (%gt(i@300.362, 3)) { goto L.298; }
  goto bits32[%add(%shl(i@300.362,2),i@314)] targets L.256, L.338, L.336, L.334, L.332, L.330, L.328, L.326, L.324, L.322, L.321, L.315, L.317, L.296, L.298, L.312, L.311, L.310, L.306, L.308, L.305, L.304, L.303, L.301, L.279, L.294, L.291, L.290, L.292, L.289, L.288, L.286, L.285, L.281, L.283, L.267, L.275, L.272, L.274, L.268, L.270, L.265, L.264, L.260, L.259,;
  L.301:
  foreign "C" (i@yyerror)("address" i@302);
  L.303:
  i@13.364 = i@yynerrs;
  bits32[i@13.364] = %add(bits32[i@13.364],1);
  L.304:
  bits16[i@yyerrflag] = 3::bits16;
  goto L.306;
  L.305:
  i@yyn.344 = %lobits16(%add(%sx32(bits16[%add(%shl(%sx32(bits16[i@yyps.343]),1),i@yypact)]),256));
  i@14.365 = %sx32(i@yyn.344);
  if (%lt(i@14.365, 0)) { goto L.308; }
  if (%ge(i@14.365, 249)) { goto L.308; }
  i@15.366 = 1;
  if (%ne(%sx32(bits16[%add(%shl(%sx32(bits16[%add(%shl(i@14.365,i@15.366),i@yyact)]),i@15.366),i@yychk)]), 256)) { goto L.308; }
  i@yystate.342 = bits16[%add(%shl(%sx32(i@yyn.344),1),i@yyact)];
  goto L.259;
  L.308:
  i@yyn.344 = bits16[%add(%shl(%sx32(bits16[i@yyps.343]),1),i@yypact)];
  i@yyps.343 = %add(i@yyps.343,-2);
  i@yypv.345 = %add(i@yypv.345,-4);
  L.306:
  if (%geu(%lobits32(i@yyps.343), %lobits32(i@yys.348))) { goto L.305; }
  L.310:
  return (1);
  goto L.256;
  L.311:
  if (%ne(bits32[i@yychar], 0)) { goto L.312; }
  goto L.310;
  L.312:
  bits32[i@yychar] = -1;
  goto L.264;
  L.298:
  L.296:
  i@19.369 = 1;
  i@20.370 = %shl(%sx32(i@yyn.344),i@19.369);
  i@21.371 = %add(i@20.370,i@yyr2);
  i@yyps.343 = %sub(i@yyps.343,%shl(%sx32(bits16[i@21.371]),i@19.369));
  i@yypvt.341 = i@yypv.345;
  i@yypv.345 = %sub(i@yypv.345,%shl(%sx32(bits16[i@21.371]),2));
  bits32[i@yyval] = bits32[%add(i@yypv.345,4)];
  bits16[i@yym.349] = i@yyn.344;
  i@yyn.344 = bits16[%add(i@20.370,i@yyr1)];
  i@yyj.347 = %lobits16(%add(%add(%sx32(bits16[%add(%shl(%sx32(i@yyn.344),i@19.369),i@yypgo)]),%sx32(bits16[i@yyps.343])),i@19.369));
  i@23.373 = %sx32(i@yyj.347);
  if (%ge(i@23.373, 249)) { goto L.317; }
  i@24.374 = 1;
  i@25.375 = bits16[%add(%shl(i@23.373,i@24.374),i@yyact)];
  i@yystate.342 = i@25.375;
  if (%eq(%sx32(bits16[%add(%shl(%sx32(i@25.375),i@24.374),i@yychk)]), %neg(%sx32(i@yyn.344)))) { goto L.315; }
  L.317:
  i@26.376 = 1;
  i@yystate.342 = bits16[%add(%shl(%sx32(bits16[%add(%shl(%sx32(i@yyn.344),i@26.376),i@yypgo)]),i@26.376),i@yyact)];
  L.315:
  i@320.377 = %sx32(bits16[i@yym.349]);
  if (%lt(i@320.377, 4)) { goto L.259; }
  if (%gt(i@320.377, 14)) { goto L.259; }
  goto bits32[%add(%shl(i@320.377,2),(i@339-16))] targets L.256, L.338, L.336, L.334, L.332, L.330, L.328, L.326, L.324, L.322, L.321, L.315, L.317, L.296, L.298, L.312, L.311, L.310, L.306, L.308, L.305, L.304, L.303, L.301, L.279, L.294, L.291, L.290, L.292, L.289, L.288, L.286, L.285, L.281, L.283, L.267, L.275, L.272, L.274, L.268, L.270, L.265, L.264, L.260, L.259,;
  L.321:
  bits16[i@yyerrflag] = 0::bits16;
  goto L.259;
  L.322:
  foreign "C" (i@printf)("address" i@323);
  goto L.259;
  L.324:
  foreign "C" (i@printf)("address" i@325);
  goto L.259;
  L.326:
  foreign "C" (i@printf)("address" i@327);
  goto L.259;
  L.328:
  foreign "C" (i@printf)("address" i@329);
  goto L.259;
  L.330:
  foreign "C" (i@printf)("address" i@331);
  goto L.259;
  L.332:
  foreign "C" (i@printf)("address" i@333);
  goto L.259;
  L.334:
  foreign "C" (i@printf)("address" i@335);
  goto L.259;
  L.336:
  foreign "C" (i@printf)("address" i@337, "address" i@yytext);
  goto L.259;
  L.338:
  foreign "C" (i@printf)("address" i@255, "address" i@yytext);
  goto L.259;
  L.256:
return();
}
}
section "data" {
align 4;
i@314:
bits32 {L.301};
bits32 {L.304};
bits32 {L.304};
bits32 {L.311};
}
section "text" {
}
section "data" {
align 4;
i@339:
bits32 {L.321};
bits32 {L.322};
bits32 {L.324};
bits32 {L.326};
bits32 {L.328};
bits32 {L.330};
bits32 {L.332};
bits32 {L.259};
bits32 {L.334};
bits32 {L.336};
bits32 {L.338};
}
section "text" {
export i@yywrap as "yywrap";
foreign "C" i@yywrap() {
  stackdata {
  }
  return (1);
  L.379:
return();
}
}
section "bss" {
export i@yyv as "yyv";
align 4;
i@yyv:
bits8[600];
export i@yyfnd as "yyfnd";
align 4;
i@yyfnd:
bits8[4];
export i@yyolsp as "yyolsp";
align 4;
i@yyolsp:
bits8[4];
export i@yylsp as "yylsp";
align 4;
i@yylsp:
bits8[4];
export i@yylstate as "yylstate";
align 4;
i@yylstate:
bits8[800];
export i@yyestate as "yyestate";
align 4;
i@yyestate:
bits8[4];
export i@yytchar as "yytchar";
align 4;
i@yytchar:
bits8[4];
export i@yysbuf as "yysbuf";
i@yysbuf:
bits8[200];
export i@yymorfg as "yymorfg";
align 4;
i@yymorfg:
bits8[4];
export i@yytext as "yytext";
i@yytext:
bits8[200];
export i@yyleng as "yyleng";
align 4;
i@yyleng:
bits8[4];
import bits32 "funlockfile" as i@funlockfile;
import bits32 "ftrylockfile" as i@ftrylockfile;
import bits32 "flockfile" as i@flockfile;
import bits32 "ctermid" as i@ctermid;
import bits32 "fileno" as i@fileno;
import bits32 "perror" as i@perror;
import bits32 "ferror" as i@ferror;
import bits32 "feof" as i@feof;
import bits32 "clearerr" as i@clearerr;
import bits32 "fsetpos" as i@fsetpos;
import bits32 "fgetpos" as i@fgetpos;
import bits32 "rewind" as i@rewind;
import bits32 "ftell" as i@ftell;
import bits32 "fseek" as i@fseek;
import bits32 "fwrite" as i@fwrite;
import bits32 "fread" as i@fread;
import bits32 "ungetc" as i@ungetc;
import bits32 "puts" as i@puts;
import bits32 "fputs" as i@fputs;
import bits32 "gets" as i@gets;
import bits32 "fgets" as i@fgets;
import bits32 "putchar_unlocked" as i@putchar_unlocked;
import bits32 "putc_unlocked" as i@putc_unlocked;
import bits32 "putchar" as i@putchar;
import bits32 "putc" as i@putc;
import bits32 "fputc" as i@fputc;
import bits32 "getchar_unlocked" as i@getchar_unlocked;
import bits32 "getc_unlocked" as i@getc_unlocked;
import bits32 "getchar" as i@getchar;
import bits32 "getc" as i@getc;
import bits32 "fgetc" as i@fgetc;
import bits32 "sscanf" as i@sscanf;
import bits32 "scanf" as i@scanf;
import bits32 "fscanf" as i@fscanf;
import bits32 "vsprintf" as i@vsprintf;
import bits32 "vprintf" as i@vprintf;
import bits32 "vfprintf" as i@vfprintf;
import bits32 "sprintf" as i@sprintf;
import bits32 "printf" as i@printf;
import bits32 "fprintf" as i@fprintf;
import bits32 "setvbuf" as i@setvbuf;
import bits32 "setbuf" as i@setbuf;
import bits32 "fdopen" as i@fdopen;
import bits32 "freopen" as i@freopen;
import bits32 "fopen" as i@fopen;
import bits32 "fflush" as i@fflush;
import bits32 "fclose" as i@fclose;
import bits32 "tmpnam" as i@tmpnam;
import bits32 "tmpfile" as i@tmpfile;
import bits32 "rename" as i@rename;
import bits32 "remove" as i@remove;
import bits32 "stderr" as i@stderr;
import bits32 "stdout" as i@stdout;
import bits32 "stdin" as i@stdin;
import bits32 "_IO_free_backup_area" as i@_IO_free_backup_area;
import bits32 "_IO_seekpos" as i@_IO_seekpos;
import bits32 "_IO_seekoff" as i@_IO_seekoff;
import bits32 "_IO_sgetn" as i@_IO_sgetn;
import bits32 "_IO_padn" as i@_IO_padn;
import bits32 "_IO_vfprintf" as i@_IO_vfprintf;
import bits32 "_IO_vfscanf" as i@_IO_vfscanf;
import bits32 "_IO_ftrylockfile" as i@_IO_ftrylockfile;
import bits32 "_IO_funlockfile" as i@_IO_funlockfile;
import bits32 "_IO_flockfile" as i@_IO_flockfile;
import bits32 "_IO_peekc_locked" as i@_IO_peekc_locked;
import bits32 "_IO_ferror" as i@_IO_ferror;
import bits32 "_IO_feof" as i@_IO_feof;
import bits32 "_IO_putc" as i@_IO_putc;
import bits32 "_IO_getc" as i@_IO_getc;
import bits32 "__woverflow" as i@__woverflow;
import bits32 "__wuflow" as i@__wuflow;
import bits32 "__wunderflow" as i@__wunderflow;
import bits32 "__overflow" as i@__overflow;
import bits32 "__uflow" as i@__uflow;
import bits32 "__underflow" as i@__underflow;
import bits32 "_IO_2_1_stderr_" as i@_IO_2_1_stderr_;
import bits32 "_IO_2_1_stdout_" as i@_IO_2_1_stdout_;
import bits32 "_IO_2_1_stdin_" as i@_IO_2_1_stdin_;
export i@yyval as "yyval";
align 4;
i@yyval:
bits8[4];
export i@yylval as "yylval";
align 4;
i@yylval:
bits8[4];
}
section "data" {
i@337:
bits8[] "push %s\x0a\x00";
i@335:
bits8[] "load\x0a\x00";
i@333:
bits8[] "negate\x0a\x00";
i@331:
bits8[] "divide\x0a\x00";
i@329:
bits8[] "multiply\x0a\x00";
i@327:
bits8[] "negate\x0aadd\x0a\x00";
i@325:
bits8[] "add\x0a\x00";
i@323:
bits8[] "store\x0a\x00";
i@302:
bits8[] "syntax error\x00";
i@263:
bits8[] "yacc stack overflow\x00";
i@255:
bits8[] "%s\x0a\x00";
i@27:
bits8[] "bad switch yylook %d\x00";
}
