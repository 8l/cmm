% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=8 et sw=4:

\section{Machine-level control flow}

The [[Target]] module provides for substantial generality in the
implementation of control flow:
a target can use any appropriate RTL to represent a control-flow
instruction.
But on most targets, the full generality of the abstraction is not
needed.
A~typical target works with a program counter, which it manipulates in
typical ways.
This module is intended to help reduce the burden of retargeting by providing
the ``standard'' implementations of
control flow at the machine level.
Basically if we know the program counter plus a few facts about return
address, we know enough to go on with.
(To get [[cutto]] right, we will have to add knowledge of the stack
pointer.)

We assume that a machine has a program counter and registers.
Furthermore, we use two different locations to refer to the program
counter: one in an lvalue context and another in an rvalue context.
These are called [[pc_lhs]] and [[pc_rhs]] in the source; here we call
them \emph{nPC} (new PC or next PC) and \emph{PC}.
The distinction is useful to support machines with delayed branches,
such as the SPARC, MIPS, and HP PA-RISC.

We also assume that the call instruction captures the return address
in a register, which we call \emph{RA}.
The ``standard'' implementations of control flow are then as
follows:\\
\begin{tabularx}{\linewidth}{@{\hskip 1.5em}lX}
\texttt{goto} $L$& $\mathit{nPC} \mathbin{:=} L$\\
\texttt{jump} $L$& $\mathit{nPC} \mathbin{:=} L$\\
\texttt{call} $L$& $\mathit{nPC} \mathbin{:=} L \mathrel{|}
                    \mathit{RA} \mathbin{:=} \mathit{PC}+k $\\
\texttt{branch} $p$ $L$&
   $p \rightarrow \mathit{nPC} \mathbin{:=} L$\\
\end{tabularx}
Note that [[cut to]] is not yet correctly implemented in this
interface.

The condition in a conditional branch can be negated by calling [[bnegate]]
on the branch instruction.

Also note that there is no place for [[return]] in this interface.
On many machines, [[return]] is simply an indirect jump, for which
[[goto]] can be used.
On other machines, there seems to be no standard way of, e.g.,
tagging a return for branch prediction or manipulating the stack
pointer during a return.
Targets for such machines will have to define [[return]] on an
individual basis.

<<mflow.mli>>=
<<signatures>>
@
The nodes in the control-flow graph (module \module{cfg}) contain
{\rtl}s.  For example, a [[jump]] node takes an {\rtl} and not an
expression for the target.  The construction of these {\rtl}s is target
specific and so we provide [[embed]] functions in each target.
For debugging of the {\cfg} we also like to re-construct the expressions
from these {\rtl}s.  We provide matching [[project]] functions to obtain
the original expressions \emph{if the supplied {\rtl}s} were constructed
by the construction functions.  Any attempt to do otherwise results in
an unchecked run-time error. 

We can also negate the condition in a conditional-branch by calling
[[bnegate]].

The {\rtl}s do not have to represent machine instructions. It suffices
to create {\rtl}s that the code expander can recognize as jumps, calls,
and so on. 
<<signatures>>=
type ('em, 'pr) map' = ('em, 'pr) Ep.pre_map =
    { embed   : 'em
    ; project : 'pr
    }
type brtl = Rtl.exp -> Rtl.rtl
type ('a,'b) map  = ('a -> 'b -> brtl Dag.branch,  Rtl.rtl -> 'b) map'
type ('a,'b) mapc = ('a -> 'b -> brtl Dag.cbranch, Rtl.rtl -> 'b) map'

type cut_args = { new_sp : Rtl.exp; new_pc : Rtl.exp }
type 'a machine =
  { bnegate:   Rtl.rtl -> Rtl.rtl
  ; goto:      ('a, Rtl.exp) map
  ; jump:      ('a, Rtl.exp) map
  ; call:      ('a, Rtl.exp) map
  ; branch:    ('a, Rtl.exp) mapc (* condition *)
  ; retgt_br:  Rtl.rtl -> brtl Dag.cbranch
  ; move:      'a -> src:Register.t -> dst:Register.t -> brtl Dag.block
  ; spill:     'a -> Register.t     -> Rtlutil.aloc   -> brtl Dag.block
  ; reload:    'a -> Rtlutil.aloc   -> Register.t     -> brtl Dag.block
  ; cutto:     ('a, cut_args) map    (* newpc * newsp map*)
  ; return:    Rtl.rtl
  ; forbidden: Rtl.rtl   (* causes a run-time error *)
  }
@ The [[branch]] embedder takes expressions $(b, t)$ where $b$~is a
Boolean condition and $t$~is the branch target.
It produces an RTL that conditionally branches to the target.
 
The [[forbidden]] component is an RTL used to cause a run-time error.
This RTL is used in places control should not reach, e.g., no arm of a
switch statement matches the scrutinee.
<<signatures>>=
module type PC = sig
  val pc_lhs : Rtl.loc
  val pc_rhs : Rtl.loc
  val ra_reg : Rtl.loc
  val ra_offset : int   (* at call, ra_reg  := PC + ra_offset *)
end

module type S = sig
  val machine : sp:Rtl.loc -> 'a machine
    (* N.B. sp is a dynamic argument because it could differ among call conventions *)
end
@
<<mflow.mli>>=
module MakeStandard (Pc : PC) : S
@ 
<<mflow.ml>>=
<<signatures>>
module DG = Dag
module RU = Rtlutil
module R  = Rtl
module RP = Rtl.Private
module Up   = Rtl.Up
module Down = Rtl.Dn
let ( =/  ) = RU.Eq.loc
let ( =// ) = RU.Eq.exp

module MakeStandard (P : PC) = struct
  type 'a map = ('a, Rtl.rtl) Ep.map
  <<standard machine-level control flow>>
end
@ 
<<standard machine-level control flow>>=
let w = RU.Width.loc P.pc_lhs
let downrtl = R.Dn.rtl
let uploc   = R.Up.loc
let upexp   = R.Up.exp
@
In order to negate the branch condition in [[bnegate]], [[cmpneg]] takes a
comparison and flips the operator when possible. If the operator is "not",
then the operator is discarded; if the operator has no negation, then "not" is
applied.
<<standard machine-level control flow>>=
let cmpneg w ~cop ~fetch =
  let flip_op flip = RP.App ((flip, [w]), fetch) in
  match cop with
  | "eq"   -> flip_op "ne"
  | "ne"   -> flip_op "eq"
  | "lt"   -> flip_op "ge"
  | "le"   -> flip_op "gt"
  | "gt"   -> flip_op "le"
  | "ge"   -> flip_op "lt"
  | "ltu"  -> flip_op "geu"
  | "leu"  -> flip_op "gtu"
  | "gtu"  -> flip_op "leu"
  | "geu"  -> flip_op "ltu"
  | "feq"  -> flip_op "fne"
  | "fne"  -> flip_op "feq"
  | "flt"  -> flip_op "fge"
  | "fle"  -> flip_op "fgt"
  | "fgt"  -> flip_op "fle"
  | "fge"  -> flip_op "flt"
  | "not"  -> (match fetch with
               | [r] -> r
               | _ -> Impossible.impossible "negation of multiple arguments")
  | _      -> RP.App (("not", [w]), fetch)
let bnegate r = match Down.rtl r with
  | RP.Rtl [RP.App((cop, [w1]), [RP.Fetch (flags, w2)]), RP.Store (pc, tgt, w3)]
    when pc =/ Down.loc P.pc_lhs && w1 = w && w2 = w && w3 = w ->
      Up.rtl (RP.Rtl [cmpneg w ~cop ~fetch:[RP.Fetch (flags, w)],
                               RP.Store (pc, tgt, w)])
  | _ -> Impossible.impossible "ill-formed conditional branch"
<<standard machine-level control flow>>=
let gotor = { Ep.embed   = (fun e -> R.store P.pc_lhs e w)
            ; Ep.project = (fun r -> match downrtl r with
                                    | RP.Rtl [(_, RP.Store(_, e, _))] -> upexp e
                                    | _ -> Impossible.impossible "projected non-goto")
            } 
let goto = { Ep.embed   = (fun _ e -> (DG.Nop, gotor.Ep.embed e))
           ; Ep.project = gotor.Ep.project
           } 
let jump = goto
@ 
By convention, the [[cut to]] \emph{always} puts the PC on the
\emph{left}.
This convention will be necessary at least until we have recognizers
that cope with associative-commutative operators.
<<standard machine-level control flow>>=
let cutto ~sp =
  { Ep.embed   = (fun _ {new_sp=new_sp; new_pc=new_pc} -> 
                   let assign loc e = Rtl.store loc e w in
                   (DG.Nop, Rtl.par [assign P.pc_lhs new_pc; assign sp new_sp]))
  ; Ep.project = (fun r -> match downrtl r with
                           | RP.Rtl [ (_, RP.Store(_,  npc, _))
                                    ; (_, RP.Store(_ , nsp, _))] ->
                                { new_sp=upexp nsp; new_pc= upexp npc }
                           | _ -> Impossible.impossible "projected non-cutto")
  }
<<standard machine-level control flow>>=
let ra_val = 
  let pc = R.fetch P.pc_rhs w in
  RU.addk w pc P.ra_offset

let call = { Ep.embed   = (fun _ e -> (DG.Nop, R.par [R.store P.pc_lhs e w;
                                                    R.store P.ra_reg ra_val w]))
           ; Ep.project =
              (fun r -> match downrtl r with
                 | RP.Rtl [(_, RP.Store(_, e, _)); _] -> upexp e
                 | _ -> Impossible.impossible (Printf.sprintf "projected non-call: %s"
                                                              (RU.ToString.rtl r)))
           } 
<<standard machine-level control flow>>=
let return = R.store P.pc_lhs (R.fetch P.ra_reg w) w
<<standard machine-level control flow>>=
let branch =
  { Ep.embed   = (fun _ cond ->
                    DG.cond (fun tgt -> R.guard cond (gotor.Ep.embed tgt)))
  ; Ep.project = (fun r -> match downrtl r with
                          | RP.Rtl [(b, RP.Store(_, _, _))] -> upexp b
                          | _ -> Impossible.impossible "projected non-branch")
  } 
@
<<standard machine-level control flow>>=
let forbidden = R.kill P.pc_lhs
<<standard machine-level control flow>>=
let machine ~sp =
  let fail _ = assert false in
  { bnegate = bnegate; goto = goto; jump = jump; call = call; cutto = cutto sp;
    retgt_br = fail; spill = fail; reload = fail; move = fail;
    return = return; branch = branch; forbidden = forbidden }
