% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=8 sw=4 et:

% ------------------------------------------------------------------ 
\section{Alpha Recognizer}
% ------------------------------------------------------------------ 

This module provides a recognizer for Alpha {\rtl}s. The recognizer
has two interfaces. The first is a predicate that is true, if an {\rtl}
is a {\mips} instruction. The second returns an assembly-language string
representation of the instruction.

<<alpharec.mli>>=
val is_instruction: Rtl.rtl -> bool
val to_string:      Rtl.rtl -> string
@

It is a checked run-time error to pass an {\rtl} to [[to_string]] that
is not an Alpha instruction.

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

The recognizer is generated from a {\burg} specification. The [[head]]
part precedes code generated from [[rules]], the [[tail]] part follows
it.

<<alpharec.mlb>>=
%head {: <<head>> :}
%tail {: <<tail>> :}
%term <<terminal types>>
%%
<<rules>>
@

The usual abbreviations for modules go into the [[head]] clause.

<<head>>=
module RP = Rtl.Private
module RU = Rtlutil
module Up = Rtl.Up
module Dn = Rtl.Dn
module SS = Space.Standard64
@

We report a fatal error with [[error]]. We do not expect to recover from
such an error; it is something that should not happen and is caused by
an internal inconsistency.

<<head>>=
exception Error of string
let error msg = raise (Error msg)   
let sprintf   = Printf.sprintf (* useful for formatting msg *)
@

The [[guard]] function turns a predicate into a cost function that can
be used in a dynmaic cost expression.

<<head>>=
let guard p = if p then 0 else Camlburg.inf_cost
@

Some utilities for building strings.

<<head>>=
let int64 b =
    assert (Bits.width b = 64);
    Int64.to_string (Bits.U.to_int64 b)

let int32 b =
    assert (Bits.width b = 32);
    Nativeint.to_string (Bits.U.to_native b)

let cat = String.concat ""

let reg n   = "$"  ^ string_of_int n
let freg n  = "$f" ^ string_of_int n

let suffix = function
    | 8  -> "b"      
    | 16 -> "w"
    | 32 -> "l"
    | 64 -> "q"
    | w  -> error (sprintf "not an Alpha width: %d" w)

let width w = string_of_int w
@

% ------------------------------------------------------------------ 
\subsection{Recognizer Rules}
% ------------------------------------------------------------------ 

Note that the {\mips} assembler provides pseudo instructions that
translate into multiple machine instructions. If we would emit binary
instructions we would have to implement these pseudo instructions here.

\iffalse
\begin{quote}
\begin{tabularx}{\linewidth}{@{}>{\ttfamily}lX@{}}
    \emph{Nonterminal} & \emph{Meaning} \\ 
    \hline
    too lazy to keep this up to date\\
\end{tabularx}
\end{quote}
\fi

We use [[x]] as an universal terminal type whenever we need one. 

<<terminal types>>=
bits n x w
@

<<rules>>=
const:      Bits(bits)          {: int64 bits           :}
zero:       Bits(bits)          [{: guard (Bits.eq bits (Bits.zero 64)) :}] {: () :}
four:       Bits(bits)          [{: guard (Bits.eq bits (Bits.S.of_int 4 64)) :}] {:():}
symbol:     Link(x, w:int)      {: x#mangled_text       :}
@

\paragraph{Registers}

<<rules>>=
regl:       Reg('r', n:int)  {: reg  n :}
fregl:      Reg('f', n:int)  {: freg n :}

pcl:        Reg('c',  0) {: () :}
spl:        Reg('r', 30) {: () :}
ral:        Reg('r', 26) {: () :}
pvl:        Reg('r', 27) {: () :}
gpl:        Reg('r', 29) {: () :}


reg:        Fetch(regl,w:int)   {: regl    :}
freg:       Fetch(fregl,w:int)  {: fregl   :}

pc:         Fetch(pcl,64)       {: () :}
sp:         Fetch(spl,64)       {: () :}
ra:         Fetch(ral,64)       {: () :}
pv:         Fetch(pvl,64)       {: () :}
gp:         Fetch(gpl,64)       {: () :}

@

\paragraph{Addresses}

<<rules>>=
meml:       Mem(addr)           {: addr :}
mem:        Fetch(meml,w:int)   {: meml :}

addr:       reg                 {: sprintf "(%s)" reg       :}
addr:       imm                 {: imm                      :}
addr:       Add(imm,reg)        {: sprintf "%s(%s)" imm reg :}
addr:       Add(reg,imm)        {: sprintf "%s(%s)" imm reg :}
addr:       symbol              {: symbol                   :}
@

\paragraph{Constant Expressions}

<<rules>>=
imm:        const               {: const  :} 
imm:        symbol              {: symbol :}
imm:        Add(symbol,imm)     {: sprintf "%s+%s" symbol imm :}
imm:        Add(imm,symbol)     {: sprintf "%s+%s" symbol imm :}
@

\paragraph{Data Movement}

Load register from memory. A load of a value smaller than 64 bits
implies a zero or sign extension.  Todo: add floating-point support.

<<rules>>=
inst:       Store(regl,imm,64)
            {: sprintf "lda %s, %s" regl imm :} 
            
            
inst:       Store(regl,const,64)
            {: sprintf "ldiq %s, %s" regl const :}


inst:       Store(regl,mem,64)
            {: sprintf "ldq %s, %s" regl mem :}

inst:       Store(regl, Sx(Fetch(mem,x:int)), w:int)
            {: sprintf "ld%s %s, %s" (suffix w) regl mem :}
            
inst:       Store(regl, Zx(Fetch(mem,x:int)), w:int) 
            {: sprintf "ld%su %s, %s" (suffix w) regl mem :}
            
@

Write register to memory. No extension here; the 8, 32, or 64 bits are
simply written to memory. Floating-point registers use their own load
and store instructions.

<<rules>>=
inst:       Store(meml, reg, w:int)
            {: sprintf "st%s %s, %s" (suffix w) reg meml :}

inst:       Store(meml, freg, w:int)
            {: sprintf "sts %s, %s" freg meml :}
@

Moves between registers. I cannot find the instructions to move between
integer and floating-point registers in the \textit{Assembly Language
Programmer's Guide}, but they are describes in the \textit{Alpha
Architecture Handbook}, Sections 4.10.18 and 4.10.19 (according to Glenn
Holloway).  To make them work, we have to emit [[.arch ev6]];

<<rules>>=
inst:       Store(regl, reg, 64)
            {: sprintf "mov %s, %s" reg  regl :}

inst:       Store(fregl, freg, 64)
            {: sprintf "fmov %s, %s" freg  fregl :}

inst:       Store(fregl, reg, 64)
            {: sprintf "itoft %s, %s" reg  fregl :}

inst:       Store(regl, freg, 64)
            {: sprintf "ftoit %s, %s" freg  regl :}

@

\paragraph{Control Flow}

<<rules>>=
inst:       Goto(symbol)
            {: sprintf "br %s" symbol :}

inst:       Goto(reg)
            {: sprintf "jmp (%s)" reg  :}
@

The [[next]] rule covers storing the address of the next instruction in
a register. 

<<rules>>=
next:       Store(regl,Add(pc,four),64)      {: regl :}

inst:       Par(Goto(reg),next)
            {: sprintf "jsr %s,(%s)" next reg :}

inst:       Store(gpl,GP(reg),64)
            {: sprintf "ldgp $gp, (%s)" reg :}
@

Here are conditional branches. The {\rtl} operator names fit the Alpha
assembly branch op-codes. We cannot inline the [[Cmp]] constructor
because the [[op]] terminal symbol would be unaccessible. Only top-level
terminals are in scope for the semantic action.

<<rules>>=
inst:       Guarded(cmp_zero,Goto(addr)) 
            {: match cmp_zero with (op,reg) ->
                sprintf "b%s %s, %s" op reg addr
            :}   
@

\paragraph{Comparison}

<<rules>>=
cmp:        Cmp(op:string,x:reg,y:reg)                      {: (op, x, y) :}
cmp_zero:   Cmp(op:string,reg,zero)                         {: (op, reg)  :}

inst:       Store(dst:regl,Bit(cmp),64)
            {: match cmp with (op, x, y) -> 
                sprintf "cmp%s %s, %s" op x y 
            :}

inst:       Store(dst:regl,Com(reg),64)
            {: sprintf "not %s, %s" dst reg :}

@



\paragraph{Arithmetic}

<<rules>>=
inst:       Store(dst:regl, Add(x:reg,y:reg), 64)
            {: sprintf "addq %s, %s, %s" x y dst :}
     
inst:       Store(dst:regl, Add(x:reg,y:imm), 64)
            {: sprintf "addq %s, %s, %s" x y dst :}
@

\paragraph{Other Instructions}

<<rules>>=
inst:       Nop() {: "nop" :}
@

% ------------------------------------------------------------------ 
\subsection{Debugging Support}
% ------------------------------------------------------------------ 

Uncomment the next rule to get a printout of the tree burg tries to
match.

<<rules>>=
inst: any [100]         {: cat ["<";any;">"] :}

any : True  ()          {: cat [ "True"  ] :}
any : False ()          {: cat [ "False" ] :}
any : Link(x, w:int)    {: cat [ "Link(";x#mangled_text;",";width w;")" ] :}
any : Late(string,w:int){: cat [ "Late(";string;",";width w;")" ] :}
any : Bits(bits)        {: cat [ "Bits(b)" ] :}

any : Fetch (any, w:int){: cat [ "Fetch(";any;",";width w;")" ] :}

any : Add(x:any, y:any) {: cat [ "Add(";x;", ";y;")" ] :}
any : Sub(x:any, y:any) {: cat [ "Sub(";x;", ";y;")" ] :}
any : Sx(any)           {: cat [ "Sx(";any;")" ] :}
any : Zx(any)           {: cat [ "Zx(";any;")" ] :}
any : Lobits(any)       {: cat [ "Lobits(";any;")" ] :}

any : Mem(any)          {: cat [ "Mem(";any;")" ] :}
any : Reg(char, n:int)  {: cat [ "Reg('";Char.escaped char;"',";width n;")" ] :}

any : Store (dst:any, src:any, w:int)
                        {: cat [ "Store(";dst;",";src;",";width w;")" ] :}
any : Kill(any)         {: cat [ "Kill(";any;")" ] :}

any : Guarded(guard:any, any) 
                        {: cat [ "Guarded(";guard;",";any;")" ] :}
any : Cmp(op:string, x:any, y:any)     
                        {: cat [ "Cmp(";op;",";x;",";y;")"] :}
any : GP(any)           {: cat [ "GP(";any;")"] :}
any : Com(any)          {: cat [ "Com(";any;")"] :}
any : Bit(any)          {: cat [ "Bit(";any;")"] :}
any : Par(l:any, r:any) {: cat [ "Par(";l;",";r;")" ] :}
any : Goto(any)         {: cat [ "Goto(";any;")" ] :}
@


% ------------------------------------------------------------------ 
\subsection{Interfacing {\rtl}s with the Expander}
% ------------------------------------------------------------------ 

The principle interface is easy: {\rtl} constructors are mapped to
constructor functions of the same name. Because some transformations are
difficult to express in {\burg}, several operators and effects are
matched as special cases in {\ocaml}.


<<tail>>=
let const = function
    | RP.Bool _                 -> error "boolean found"
    | RP.Link(s,_,w)            -> conLink s w
    | RP.Diff _                 -> error "PIC not supported"
    | RP.Bits(b)                -> conBits b
    | RP.Late(s,w)              -> error (sprintf "late constant %s found" s)

<<tail>>=
<<helpers for [[exp]] and [[loc]]>>
let rec exp = function
    | RP.Const(k)               -> const k
    | RP.Fetch(l,w)             -> conFetch (loc l) w
    <<special cases for [[App]]>>
    | RP.App((o,_),_)           -> error (sprintf "unknown operator %s" o)

and loc = function
    | RP.Reg((sp,_,_),i,_)      -> conReg sp i
    | RP.Mem(('m',_,_),w,e,ass) -> conMem (exp e) 
    | RP.Mem((sp,_,_),_,_,_)    -> error (sprintf "mem-space space %c" sp)
    | RP.Var   (s,i,w)          -> error (sprintf "var %s found" s)
    | RP.Global(s,i,w)          -> error (sprintf "var %s found" s)
    | RP.Slice _                -> error "cannot handle slice"
@

<<tail>>= 
let effect = function
    <<special cases for [[Store]]>>
    | RP.Store(l,e,w)           -> conStore (loc l) (exp e) w
    | RP.Kill(l)                -> error "cannot handle kill"

<<tail>>=
let guarded g stmt = match g with
    | RP.Const(RP.Bool b)       -> if b then effect stmt else conNop ()
    <<special cases for [[guarded]]>>
    | _                         -> conGuarded (exp g) (effect stmt)

let rec geffects = function
    | []                        -> conNop ()
    | [g, s]                    -> guarded g s
    | (g, s) :: t               -> conPar (guarded g s) (geffects t) 

let rtl (RP.Rtl es) = geffects es
@

% ------------------------------------------------------------------ 
\subsection{Special cases}
% ------------------------------------------------------------------ 

<<special cases for [[Store]]>>=
| RP.Store(RP.Reg(('c',_,_),i,_),r,_) when i = SS.indices.SS.pc   -> conGoto (exp r)
@
<<helpers for [[exp]] and [[loc]]>>=
let cmp = Strutil.from_list ["eq";"ge";"geu";"gt";"gtu";"le";"leu";"lt";"ltu";"ne"] 
@
<<special cases for [[App]]>>=
| RP.App(("add", [w]), [x; y])            -> conAdd (exp x) (exp y)
| RP.App(("sub", [w]), [x; y])            -> conSub (exp x) (exp y)
| RP.App((op, [w]), [x; y])  
    when Strutil.Set.mem op cmp           -> conCmp op (exp x) (exp y)
| RP.App(("bit", [64]), [x])              -> conBit (exp x)  
| RP.App(("alpha_gp", []), [x])           -> conGP  (exp x)  
| RP.App(("com", [64]), [x])              -> conCom  (exp x)  
@

<<special cases for [[guarded]]>>=
@

    
% ------------------------------------------------------------------ 
\subsection{The exported recognizers}
% ------------------------------------------------------------------ 

If an error occurs, we emit the error message to [[stderr]] and include
it in the output. This will lead to errors with the assembler but makes
debugging easier because we do not abort after the first problem. Revise
this once the expander is more mature.

<<tail>>=
let rtl_to_string = RU.ToString.rtl

let dump msg rtl =
    List.iter prerr_string
    [ "error in recognizer: "
    ; msg
    ; " on "
    ; rtl_to_string rtl
    ; "\n"
    ]

let to_string r =
    try 
        let plan = rtl (Dn.rtl r) in
        sprintf "\t%s" (plan.inst.Camlburg.action ())
    with
        | Camlburg.Uncovered -> cat ["not an instruction: "
                                    ; rtl_to_string r
                                    ]
        | Error msg          -> ( dump msg r 
                                ; sprintf "error: %s" (rtl_to_string r)
                                )

let is_instruction r =
    try 
        let plan = rtl (Dn.rtl r) in
        plan.inst.Camlburg.cost < 100
    with
        | Camlburg.Uncovered -> false
        | Error msg          -> ( dump msg r 
                                ; false
                                )
@        
