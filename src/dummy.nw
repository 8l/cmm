 -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=8 sw=4 et:

% ------------------------------------------------------------------ 
\section{The Dummy Target}
% ------------------------------------------------------------------ 

This target describes a purely fictional target. We use it for
debugging. The target is functorized, such that we can invent new
targets easily. 

\emph{The Implementation uses the [[Space.Standard32]] module to define
control-flow {\rtl}s. We therefore assume therefore pointer and words
are 32 bit wide. Is it safe to pass in other values? --CL}
<<dummy.mli>>=
module type ARCH = sig
    val arch:           string (* name of this architecture *)
    val byte_order:     Rtl.aggregation
    val wordsize:       int
    val pointersize:    int
    val memsize:        int
end

module Make(A: ARCH): sig
    val target' :       Ast2ir.tgt
end    
@
We provide ready-made 32 bit targets.
<<dummy.mli>>=
val dummy32l':  Ast2ir.tgt
val dummy32b':  Ast2ir.tgt
@
% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

<<dummy.ml>>=
module AN       = Automaton
module C        = Call
module PA       = Preast2ir
module R        = Rtl
module RP       = Rtl.Private
module RU       = Rtlutil
module Up       = Rtl.Up
module Dn       = Rtl.Dn
module SS32     = Space.Standard32
module T        = Target
module RS       = Register.Set

module type ARCH = sig
    val arch:           string (* name of this architecture *)
    val byte_order:     Rtl.aggregation
    val wordsize:       int
    val pointersize:    int
    val memsize:        int
end

let ( *> ) = AN.( *> ) 

(* to simplify the machine environment definition *)
let b i = Types.Bits i

module Make(A: ARCH) = struct
    let id          = Rtl.Identity
    let pointersize = A.pointersize
    let memsize     = A.memsize

    <<module Spaces>>

    (* important registers *)
    let {SS32.cc = eflags} = SS32.locations Spaces.c
    let locations   = SS32.locations Spaces.c
    let pc          = locations.SS32.pc
    let cc          = locations.SS32.cc
    let npc         = locations.SS32.npc
    let fp_mode     = locations.SS32.fp_mode
    let fp_fcmp     = locations.SS32.fp_fcmp

    let rspace = ('r', Rtl.Identity, Cell.of_size A.wordsize)
    let fspace = ('f', Rtl.Identity, Cell.of_size A.wordsize)
    let mspace = ('m', A.byte_order, Cell.of_size 8)
    let reg n       = R.reg (rspace,n,R.C 1)
    let sp          = reg 31                    (* stack pointer  *)
    let ra          = reg 30                    (* return address *)

    let fetch l     = R.fetch l   A.wordsize
    let store l e   = R.store l e A.wordsize
    let assign      = store
    let return      = store pc (fetch ra)

    <<global register allocation>>
    <<module Flow>>
    <<module Spill>>
    <<module CC for calling conventions>>

    let ccspecs = {AN.call=CC.simple; AN.results=CC.simple; AN.cutto=CC.simple}
        (* the new-style target *)
    let fmach = Flow.machine sp
    let target' = 
      let PA.T x86_tgt = X86.target in
      let spaces  = [ Spaces.m 
                    ; Spaces.c 
                    ; Spaces.r 
                    ; Spaces.f
                    ; Spaces.t
                    ; Spaces.u
                    ] in
        { T.name         = A.arch
        ; T.cc_specs     = [ "C--", ccspecs
                           ; "C"  , ccspecs
                           ] 
        ; T.cc_spec_to_auto = (fun ccname spec -> CC.conv "C--" false spec)
        ; T.is_instruction  = (fun _ -> true)
        ; T.tx_ast = (fun secs -> secs)
(* Using the same M as x86 so that tests don't fail.
   Not sure what the right M is for dummy. KR *)
        ; T.capabilities = x86_tgt.T.capabilities
        ; T.byteorder    = A.byte_order
        ; T.wordsize     = A.wordsize
        ; T.pointersize  = A.pointersize
        ; T.vfp          = SS32.vfp
        ; T.memspace     = mspace
        ; T.max_unaligned_load  = R.C 1
        ; T.alignment    = 1
        ; T.memsize      = 8
        ; T.float        = Float.ieee754
        ; T.globals      = globals
        ; T.rounding_mode = fp_mode
        ; T.named_locs   = Strutil.assoc2map 
                           ["IEEE 754 rounding mode", fp_mode
                           ;"IEEE 754 rounding results", fp_fcmp
                           ]
        ; T.spaces       = spaces
        ; T.reg_ix_map   = T.mk_reg_ix_map spaces
        ; T.distinct_addr_sp = false
        ; T.machine = { T.bnegate     = fmach.T.bnegate
                      ; T.goto        = fmach.T.goto
                      ; T.jump        = fmach.T.jump
                      ; T.call        = fmach.T.call 
                      ; T.cutto       = cutto
                      ; Mflow.return  = fmach.Mflow.return
                      ; T.branch      = fmach.T.branch
                      ; T.move        = (fun _ -> assert false)
                      ; T.spill       = (fun _ -> assert false)
                      ; T.reload      = (fun _ -> assert false)
                      ; T.retgt_br    = fmach.T.retgt_br
                      ; T.forbidden   =
                          Rtl.store (Rtl.mem Rtl.none mspace (Rtl.C 1)
                                            (Rtl.bits (Bits.zero 32) 32))
                                    (Rtl.bits (Bits.zero 8) 8) 8
                      }
        (* bogus *)
        ; T.charset      = "latin1" 
        ; T.data_section = "data"
        }
    let target' = PA.T target'
end

module Dummy32l = Make(struct
    let arch        = "dummy32l"
    let byte_order  = Rtl.LittleEndian
    let wordsize    = 32
    let pointersize = 32
    let memsize     = 8
end)

module Dummy32b = Make(struct
    let arch        = "dummy32b"
    let byte_order  = Rtl.BigEndian
    let wordsize    = 32
    let pointersize = 32
    let memsize     = 8
end)

let dummy32l' = Dummy32l.target'
let dummy32b' = Dummy32b.target'
@

% ------------------------------------------------------------------ 
\subsection{Global Register Allocation}
% ------------------------------------------------------------------ 

\emph{Note: after introducing the new Automaton model we discovered 
that the mechanism for dealing with named hardware registers has to
change. Therefore, the automaton for global registers no longer deals
with them.}

<<global register allocation>>=
let globals base = 
    let width w     = if w <= 8 then 8 else if w <= 16 then 16 else
                      Auxfuns.round_up_to 32 w in
        AN.at ~start:base mspace
              (AN.widen width 
               *> AN.align_to (function 8 -> 1 | 16 -> 2 | _ -> 4)
               *> AN.overflow ~growth:Memalloc.Down ~max_alignment:4)
@

% ------------------------------------------------------------------ 
\subsection{Spaces}
% ------------------------------------------------------------------ 

<<module Spaces>>=
module Spaces = struct
    let m   = SS32.m A.byte_order [8; 16; 32]
    let c   = SS32.c 2  id [32]
    let r   = SS32.r 32 id [32]
    let f   = SS32.f 32 id [32]
    let t   = SS32.t    id  32
    let u   = SS32.u    id  32
end                 
@

% ------------------------------------------------------------------ 
\subsection{Control Flow}
% ------------------------------------------------------------------ 

<<module Flow>>=
module Flow = Mflow.MakeStandard
    (struct
        let pc_lhs      = pc
        let pc_rhs      = pc
        let ra_reg      = R.reg (rspace, 30, R.C 1)
        let ra_offset   = 4 (* just guessing *)
    end)

let cutto =                 
    { T.embed   = (fun _ { Mflow.new_pc=newpc
                         ; Mflow.new_sp=newsp
                         } ->
                         (Dag.Nop, Rtl.par [assign (reg 31) newsp; assign pc newpc]))
    ; T.project = (fun r -> match Dn.rtl r with
                    | RP.Rtl [ (_, RP.Store(_, nsp, _)) 
                             ; (_, RP.Store(_, npc, _))] -> 
                                { Mflow.new_sp =Up.exp nsp
                                ; Mflow.new_pc= Up.exp npc
                                }  
                    | _ -> Impossible.impossible "projected non-cutto")
    }
@

% ------------------------------------------------------------------ 
\subsection{Spills and Reloads}
% ------------------------------------------------------------------ 

\emph{What is the [[lookup]] parameter for? We should expunge it.}

<<module Spill>>=
module Spill = struct
  let assign lookup ~src ~dst =
    if Register.width src <> Register.width dst then
      Impossible.impossible "Dummy.assign source and destination width don't match"
    else
      let src_loc = Rtl.reg src  in
      let dst_loc = Rtl.reg dst  in
      Rtl.store dst_loc (Rtl.fetch src_loc (Register.width src)) (Register.width dst)

  let spill lookup reg loc =
    let w = Register.width reg in
    [Automaton.store loc (Rtl.fetch (Rtl.reg reg) w) w]

  let reload lookup reg loc =
    let w = Register.width reg in
    [Rtl.store (Rtl.reg reg) (Automaton.fetch loc w) w]
end
@        

% ------------------------------------------------------------------ 
\subsection{Calling Conventions}
% ------------------------------------------------------------------ 

<<module CC for calling conventions>>=
module CC = struct
    <<calling convention>>
end
@

% ------------------------------------------------------------------ 
\subsection{New-Style Calling Convention}
% ------------------------------------------------------------------ 


\paragraph{Important registers}

<<calling convention>>=
let reg  n   = (rspace, n, R.C 1)
let freg n   = (fspace, n, R.C 1)
let vfp      = Vfp.mk A.wordsize
let regs     = List.map reg  [0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15]
let fregs    = List.map freg [0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15] 
@
Volatile and non-volatile registers. For simplicity, all registers are
volatile.
<<calling convention>>=
let volregs  = RS.union (RS.of_list regs) (RS.of_list fregs)
let nvolregs = RS.empty     
@

\paragraph{Conventions}

The documentation for the $x$86 warns to use [[minus frame size]]. I
hope we are allowed to use it once per target, rather than once per
compiler.

<<calling convention>>=
let spval           = fetch sp         
let sp_align        = 4
let growth          = Memalloc.Down
let std_sp_location = RU.add pointersize 
                        vfp (R.late "minus frame size" pointersize)
@

\paragraph{Automata for passing values}

We pass everything in registers, until we run out of them and pass
remaining parameters in memory. We use 16 floating point and 16 integer
registers. 

<<calling convention>>=
let simple =
    AN.choice
        [ AN.is_kind "float",  AN.widen (Auxfuns.round_up_to ~multiple_of:32) 
                            *> AN.widths  [32]
                            *> AN.useregs fregs false
        ; AN.is_any,         AN.widen (Auxfuns.round_up_to ~multiple_of:32)
                          *> AN.widths  [32]
                          *> AN.useregs regs false
        ] *> 
    AN.overflow ~growth:Memalloc.Down ~max_alignment:sp_align
@


The [[return]] instruction for a possibly alternate return.

<<calling convention>>= 
let return k n ~ra =
    if k = 0 && n = 0 
    then store pc ra
    else Impossible.impossible "alternate return is unsupported"
@

How to save callee-saved registers. 

<<calling convention>>=
let saved_nvr temps =
    let t = Talloc.Multiple.loc temps 't' in
    let u = Talloc.Multiple.loc temps 'u' in
        function
        | (('r', _, _),_,_) as reg -> t (Register.width reg)
        | (('f', _, _),_,_) as reg -> u (Register.width reg)
        | ((s,_,_),i,_) ->
            Impossible.impossible (Printf.sprintf "cannot save $%c%d" s i)
@

I have to admit, that I don't know what I am doing here.

<<transformations>>=
let autoAt = AN.at mspace in
let call_actuals  =
  C.outgoing ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "out call parms" autoAt specs.AN.call)
    ~autosp:(fun r  -> Block.base r.AN.overflow)
    ~postsp:(fun _ sp -> sp) in  

let prolog  =
  let autosp = (fun _ -> vfp) in
  C.incoming ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "in call parms" autoAt specs.AN.call)
    ~autosp
    ~postsp:(fun _ _ -> std_sp_location)
    ~insp:(fun a _ _ -> autosp a) in

let call_results  =
  let autosp = (fun r -> Block.base r.AN.overflow) in
  C.incoming ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "in ovfl results" autoAt specs.AN.results)
    ~autosp
    ~postsp:(fun _ _ -> std_sp_location) (* irrelevant? *)
    ~insp:(fun a _ _ -> autosp a) in

let epilog  =
  C.outgoing ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "out ovfl results" autoAt specs.AN.results)
    ~autosp:(fun r -> Block.base r.AN.overflow)
    ~postsp:(fun _ _ -> vfp)  (* irrelevant *) in

let also_cuts_to =
  let autosp = (fun r -> std_sp_location) in
  C.incoming ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "in cont parms" autoAt specs.AN.cutto)
    ~autosp
    ~postsp:(fun _ _ -> std_sp_location)
    ~insp:(fun a _ _ -> autosp a) in

let cut_actuals base  =
   C.outgoing ~growth ~sp ~mkauto:(fun () -> autoAt base specs.AN.cutto)
     ~autosp:(fun r -> spval)
     ~postsp:(fun _ _ -> spval) in

<<calling convention>>=
let conv name jump specs =
  <<transformations>>
  { C.name             = name
  ; C.overflow_alloc  = { C.parameter_deallocator = if jump then C.Callee else C.Caller
                        ; C.result_allocator      = C.Caller
                        }
  ; C.call_parms       = { C.in' = prolog;       C.out = call_actuals}
  ; C.cut_parms        = { C.in' = also_cuts_to; C.out = cut_actuals}
  ; C.results          = { C.in' = call_results; C.out = epilog}
 
  ; C.stack_growth     = Memalloc.Down
  ; C.stable_sp_loc    = std_sp_location
  ; C.replace_vfp      = Vfp.replace_with ~sp
  ; C.jump_tgt_reg     = R.reg (reg 7)
  ; C.sp_align         = sp_align    (* alignment of stack pointer at call/cut *)
  ; C.pre_nvregs       = nvolregs    (* registers preserved across calls *)
  ; C.volregs          = volregs     (* registers not preserved across calls *)
  ; C.saved_nvr        = saved_nvr
  ; C.return           = return
  ; C.ra_on_entry      = (fun _     -> R.fetch ra A.wordsize)
  ; C.where_to_save_ra = (fun _ t   -> Talloc.Multiple.loc t 't' A.wordsize)
  ; C.ra_on_exit       = (fun t b _ -> t)
  ; C.sp_on_unwind     = (fun e -> RU.store sp e)
  ; C.sp_on_jump       = (fun _ _ -> Rtl.null)
  } 
@ 

Finally, we can define a calling convention.
<<calling convention>>=
let cmm = conv "C--" false
            { AN.call = simple ; AN.results = simple ; AN.cutto = simple }
@
