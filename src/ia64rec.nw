% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

\section{IA-64 Recognizer}

This module provides code that recognizes IA-64 RTLs.
It is implemented using BURG rules.

<<ia64rec.mli>>=
val to_asm : Rtl.rtl -> string
val is_instruction : Rtl.rtl -> bool
@ 

A few abbreviations.
<<modules>>=
module RU = Rtlutil
module RP = Rtl.Private
module SS = Space.Standard64
module Down = Rtl.Dn
module Up   = Rtl.Up
@ 
<<ia64rec.mlb>>=
%head {: <<modules>> 
         <<code to precede the labeler>>
      :}
%tail {: <<code to follow the labeler>>
      :}

%term <<names of types of terminals>>

%%
<<rules>>
@ 

\subsection{Utilities}
<<code to precede the labeler>>=
let cat = String.concat ""
let infinity = Camlburg.inf_cost
let guard b = if b then 0 else infinity

let const64 b =
  assert (Bits.width b = 64);
  Int64.to_string (Bits.U.to_int64 b)

exception Error of string
let error msg = raise (Error msg)
@ 

\subsection{Recognizer terminals, nonterminals, and constructors}

<<names of types of terminals>>=
n w bits symbol
@ 

\subsection{Recognizer Rules}

\paragraph{Constants}
<<rules>>=
lconst : Link(symbol, w) {: symbol#mangled_text :}
const  : Bits(b:bits)  [{: guard (Bits.width b = 64) :}]  {: const64 b :}
@ 

\paragraph{Location Types}
<<rules>>=
reg   : Fetch(regl, w) {: regl :}
regl  : Reg('r', n) {: "r"   ^ string_of_int n :}
regl  : Reg('a', n) {: "b"   ^ string_of_int n :}
regl  : Reg('p', n) {: "p"   ^ string_of_int n :}
regl  : Reg('o', n) {: "out" ^ string_of_int n :}

freg  : Fetch(fregl, w) {: fregl :}
fregl : Reg('f', n) {: "f" ^ string_of_int n :}

eregl : regl  {: regl :}
eregl : bregl {: bregl :}

mem   : Fetch(meml, w) {: meml :}
meml  : Mem(reg, w)    {: "[" ^ reg ^ "]" :} -- indirect

reg_or_const : reg   {: reg :}
reg_or_const : const {: const :}

target : lconst {: lconst ^ "#" :}
@ 

\paragraph{Special Locations}
<<rules>>=
pcl   : Reg('c', n)    [{: guard (n = 0)  :}] {: () :}
pc    : Fetch(pcl,w)   [{: guard (w = 64) :}] {: () :}

ral   : Reg('a', n)    [{: guard (n = 0)  :}] {: () :}
ra    : Fetch(ral,w)   [{: guard (w = 64) :}] {: () :}
@ 

\paragraph{Data movement}
<<rules>>=
-- load symbol
inst : Store(dst:regl, src:lconst, w)
  {: cat ["addl "; dst; " = @ltoff("; src; "), gp ;;\n"; 
          "\t"; "ld8 "; dst; " = ["; dst; "]"] :}

--inst : Store(dst:regl, src:target, w)
--  {: cat ["addl "; dst; " = "; src] :}

-- load immediate
inst : Store(dst:regl, src:const, w)
  {: cat ["movl "; dst; " = " ; src] :}

-- register move
inst : Store(dst:eregl, src:reg, w)
  {: cat ["mov " ; dst; " = " ; src] :}

-- register move: gp -> fp
-- AM NOT SURE OF THIS ONE OR THE ONE BELOW IT

-- Okay, I'm changing this from setf/getf.d into setf/getf.sig
-- KR
inst : Store(dst:fregl, src:reg, w)
  {: cat ["setf.sig "; dst; " = "; src] :}

-- register move: fp -> gp
inst : Store(dst:regl, src:freg, w)
  {: cat ["getf.sig "; dst; " = "; src] :}

-- HACK! rename out -> in register
inst : Store(dst:eregl, Fetch(Reg('o', n), wf:w), w)
  {: cat ["mov " ; dst; " = in"; string_of_int n] :}

-- memory load
inst : Store(dst:regl, src:mem, w)
  {: cat ["ld8 "; dst; " = "; src] :}

-- memory store
inst : Store(dst:meml, src:reg, w)
  {: cat ["st8 "; dst; " = "; src] :}

-- HACK! memory store from offset
inst : Store(Mem(Add(x:reg, y:const),mw:w), src:reg, w)
  {: cat [ "add "; x; " = "; y; ", "; x; " ;;\n\t"
         ; "st8 ["; x; "] = "; src; " ;;\n\t" 
         ; "add "; x; " = -"; y; ", "; x
         ]
  :}
@ 

\paragraph{Arithmetic}
<<rules>>=
-- addition
inst : Store(dst:regl, Add(x:reg_or_const, y:reg), w)
  {: cat ["add "; dst; " = "; x; ", "; y] :}

inst : Store(dst:regl, Add(x:reg, y:reg_or_const), w)
  {: cat ["add "; dst; " = "; y; ", "; x] :}

-- fmul
inst : Store(dst:fregl, Fmul(x:freg, y:freg, rm:freg), w)
  {: cat ["xma.l "; x; " = "; y; ", "; x; ", "; rm] :}

inst : Store(dst:regl, Mult(x:reg, y:reg_or_const), w)
    {: cat [""] :}

-- subtraction
inst : Store(dst:regl, Sub(x:reg_or_const, y:reg), w)
  {: cat ["sub "; dst; " = "; x; ", "; y] :}

-- ne
inst : Store(dst:regl, Ne(x:reg, y:reg), w)
  {: cat ["cmp.ne "; dst; ",p0 = "; x; ", "; y] :} 

-- shl
inst : Store(dst:regl, Shl(x:reg, y:reg_or_const), w)
  {: cat ["shl "; dst; " = "; x; ", "; y] :}

-- shrl
inst : Store(dst:regl, Shrl(x:reg, y:reg_or_const), w)
  {: cat ["shr.u "; dst; " = "; x; ", "; y] :}

-- shra
inst : Store(dst:regl, Shra(x:reg, y:reg_or_const), w)
  {: cat ["shr "; dst; " = "; x; ", "; y] :}

-- popcnt
inst : Store(dst:regl, Popcnt(x:reg), w)
  {: cat ["popcnt "; dst; " = "; x] :}
@ 

\paragraph{Control Flow}
<<rules>>=
-- call
next: Add(pc,const) {: () :}

inst: Par(Goto(target), Store(ral,next,w))
{: "mov loc1 = r1 ;;\n"
 ^ "br.call.sptk.many b0 = " ^ target ^ " ;;\n"
 ^ "mov r1 = loc1"
:}

-- return
inst: Par(Goto(a:reg), Goto(b:reg)) 
  {: "mov ar.pfs = loc0 ;;\n"^"\tbr.ret.sptk.many b0" :}
-- THE ABOVE IS COMMENTED OUT UNTIL WE FIGURE OUT HOW TO PROPERLY RECOGNIZE A
--   RETURN.

-- branches
inst: Goto(target) {: "br.sptk.many " ^ target :}

-- indirect branches
inst: Goto(reg)    {: "br.sptk.many " ^ reg :}

-- conditional branch
inst: Guarded(Fetch(regl,w), Goto(target))
  {: cat ["("; regl; ") br.cond.sptk.many "; target] :}
@ 

\paragraph{Other Instructions}
<<rules>>=
inst : Nop() {: "// " :}
@ 

\subsection{Interfacing {\rtl}s with the Expander}

<<special cases for particular operators>>=

(* RRO temp
| RP.App(("and", [w]), [x; y]) -> conAnd (exp x) (exp y)
| RP.App(("or",  [w]), [x; y]) -> conOr (exp x) (exp y)
| RP.App(("xor", [w]), [x; y]) -> conXor (exp x) (exp y)
| RP.App(("com", [w]), [x])    -> conCom (exp x)
*)

| RP.App(("sub",   [w]), [x; y]) -> conSub    (exp x) (exp y)
| RP.App(("add",   [w]), [x; y]) -> conAdd    (exp x) (exp y)
| RP.App(("ne" ,   [w]), [x; y]) -> conNe     (exp x) (exp y)
| RP.App(("shl",   [w]), [x; y]) -> conShl    (exp x) (exp y)
| RP.App(("shrl",  [w]), [x; y]) -> conShrl   (exp x) (exp y)
| RP.App(("shra",  [w]), [x; y]) -> conShra   (exp x) (exp y)
| RP.App(("mul",   [w]), [x; y]) -> conMult   (exp x) (exp y)
| RP.App(("popcnt",[w]), [x   ]) -> conPopcnt (exp x)
| RP.App(("fmul",  [w]), [x; y; rm]) -> conFmul (exp x) (exp y) (exp rm)

(*| RP.App(("neg", [w]), [x])    -> conNeg (exp x)*)

(* RRO temp
| RP.App(("sx",  [n;w]), [x])   -> conSx  (exp x)
| RP.App(("zx",  [n;w]), [x])   -> conZx  (exp x)
| RP.App(("f2f", [n;w]), [x; rm])   -> conF2f n w (exp x) 
| RP.App(("f2i", [n;w]), [x; rm])   -> conF2i n w (exp x) 
| RP.App(("i2f", [n;w]), [x; rm])   -> conI2f n w (exp x) 
| RP.App(("fadd", [w]), [x; y; rm]) -> conFadd (exp x) (exp y) 
| RP.App(("fsub", [w]), [x; y; rm]) -> conFsub (exp x) (exp y) 
| RP.App(("fmul", [w]), [x; y; rm]) -> conFmul (exp x) (exp y) 
| RP.App(("fdiv", [w]), [x; y; rm]) -> conFdiv (exp x) (exp y) 
| RP.App(("fneg", [w]), [x]) -> conFneg (exp x)
| RP.App(("fabs", [w]), [x]) -> conFabs (exp x)
| RP.App(("lobits", [w;n]), [x])   -> conLobits (exp x) n
| RP.App(("bitInsert", [w; n]), [lsb; dst; src]) ->
    conBitInsert (exp lsb) (exp dst) (exp src)
| RP.App(("bitExtract", [w; n]), [lsb; src]) -> conBitExtract (exp lsb) (exp src) n
*)

| RP.App((("add"|"sub"|"mul"|"sx"|"zx"|"lobits"|"bitInsert"|
           "bitExtract"|"fabs"|"fneg"|"fdiv"|"fmul"|"fsub"|"fadd"|"f2f"|"f2i"|
           "i2f"|"and"|"or"|"xor"|"com") as op, ws), xs)->
    Impossible.impossible
      (Printf.sprintf
         "operator %%%s specialized to %d widths & applied to %d arguments"
         op (List.length ws) (List.length xs))
@
And now we convert between RTLs and Burg constructors.
<<code to follow the labeler>>=  
let unimp = Impossible.unimp
let const = function

  | RP.Late(s,w)              -> unimp "ia64: late constants"
  | RP.Bool(b)                -> unimp "ia64: bool"

(* RRO temp
  | RP.Bool(true)             -> conTrue  ()
  | RP.Bool(false)            -> conFalse ()
  | RP.Late(s,w)              -> conLate s w
*)

  | RP.Link(s,_,w)            -> conLink s w
  | RP.Diff _                 -> error "PIC not supported"
  | RP.Bits(b)                -> conBits(b)
<<code to follow the labeler>>=  
let rec exp = function
  | RP.Const(k)               -> const (k)
  | RP.Fetch(l,w)             -> conFetch (loc l) w
  <<special cases for particular operators>>
  | RP.App((o,_),_)           -> error ("unknown operator " ^ o)
<<code to follow the labeler>>=  
and loc l = match l with
(* RRO temp
  | RP.Mem('f', aff, w, e, ass) -> conFpreg (exp e)
*)

  | RP.Mem(('m',_,_), RP.C c, e, ass) -> conMem (exp e) (8 * c)
  | RP.Reg((sp,_,_), i, RP.C c)          -> conReg sp i 
  | RP.Mem(_, _, _, _)     -> error "non-mem, non-reg cell"
  | RP.Var _ | RP.Global _    -> error "var found"

  | RP.Slice(w,i,l)           -> unimp "ia64: slice locations"

(* RRO temp
  | RP.Slice(w,i,l)           -> conSlice w i (loc l)
*)
@ 
We recognize some special forms of single effects:
<<code to follow the labeler>>=  
and effect = function
  | RP.Store(RP.Reg(('c',_,_),i, w),r,_) 
    when (i = SS.indices.SS.pc)       -> conGoto (exp r)
  | RP.Store(RP.Reg(('c',_,_),i, _), r, w)  -> error ("set $c["^string_of_int i^"]")
  | RP.Store(l,e,w)                   -> conStore (loc l) (exp e) w

  | RP.Kill(l)                        -> unimp "ia64: kill effect"

(* RRO temp
  | RP.Kill(l)                        -> conKill (loc l)
*)
@
We attempt to recognize register pairs.
<<code to follow the labeler>>=  
and regpair = function

(* RRO temp
  | RP.App(("or",_),[ RP.App(("shl",_), [RP.App(("sx",_), [RP.Fetch(r1,_)]);_])
                    ; RP.App(("sx",_),                    [RP.Fetch(r2,_)])])
      -> conRegPair (loc r1) (loc r2)
*)
  | x -> Impossible.impossible "Argument is not a register pair"
@
<<code to follow the labeler>>=
and rtl (RP.Rtl es) = geffects es
and geffects = function
    | [] -> conNop ()
    | [g, s] -> guarded g s
    | (g, s) :: t -> conPar (guarded g s) (geffects t)
and guarded g eff = match g with
  | RP.Const(RP.Bool b) -> if b then effect eff else conNop()
  | _ -> conGuarded (exp g) (effect eff)
@ 

\subsection{The exported recognizer}

We try not to immediately halt if something goes wrong but instead drop error messages into the assembly language.

<<code to follow the labeler>>=
let errmsg r msg =
  List.iter prerr_string
    [ "recognizer error: "; msg; " on "; RU.ToString.rtl r; "\n" ]

let to_asm r =
  try
    let plan = rtl (Down.rtl r) in
    plan.inst.Camlburg.action ()
  with 
  | Camlburg.Uncovered -> cat [" not an instruction: " ; RU.ToString.rtl r]
  | Error msg -> (errmsg r msg; " error in recognizer: " ^ msg)

let is_instruction r =
  try
    let plan = rtl (Down.rtl r) in
    plan.inst.Camlburg.cost < 100  (* should be true, but shade this... *)
  with 
  | Camlburg.Uncovered -> false
  | Error msg -> (errmsg r msg; false)
@ 
