% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=8 sw=4 et sts=4
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon

% inc: \usepackage{alltt}


% ------------------------------------------------------------------ 
\section{Collecting and emitting data for the run-time system}
% ------------------------------------------------------------------ 
The run-time system needs to examine stack frames that are suspended at call
sites or at continuations.
We refer to these locations collectively as {\em stopping points}.
For each stopping point, we emit information to tell the run-time system about
the stack frame.

The run-time system walks the stack by tracking the boundaries between
frames. 
Each boundary is set at the \emph{callee's deallocation point}.
We set the boundary here because it is resilient to tail calls.
Although we work with deallocation points, for ease of writing and
naming variables, we call them allocation points.

The run-time system needs to know:
\begin{itemize}
\item the difference between the incoming allocation point and the
  frame's virtual frame pointer
\item the difference between the outgoing allocation point and the
  frame's virtual frame pointer, which is more or less the size of the
  frame at the call site
  (for a continuation, the continuation's stack pointer plays the role
  of the outgoing allocation point),
\item the location of the return address,
\item the locations of stackdata,
\item the locations of values stored in callee-save registers on entry to the procedure,
\item the locations of local variables,
\item the locations of span data declared in the \pal~source, and
\item the locations of unwind continuations (currently unimplemented).
\end{itemize}
For ease in writing the run-time system, each of the two differences
above is represented by the location of the corresponding allocation
point. 
To pass 
such a location to the run-time system, we code it as an offset, which
is the difference we require.

In order to avoid complications in threading this data through the compiler, 
we convert each type of data to spans.
Later, when we are ready to emit assembly code (compile-time constants have been
computed, etc.), we emit the spans as assembly code.

This module hides the representation of data as spans, as well as the encoding
of the spans as assembly.
The interface of the module provides functions to convert the different types of
data to spans and a single function to emit all the spans as assembly.

% ------------------------------------------------------------------ 
\subsection{The interface}
% ------------------------------------------------------------------ 
We expose two types of functions:
\begin{itemize}
\item Functions that convert data to a span.
\item A function that emits the spans as assembly.
\end{itemize}
The first conversion function takes a user's key and value and produces a span.

We need to be able to update spans; sometimes it is easy to update all the spans
in the control-flow graph.
<<runtimedata.mli>>=
type spans = Spans.t
exception DeadValue
val upd_spans     : (Rtl.loc -> Rtl.loc) -> spans -> unit   (* may raise DeadValue *)
val upd_all_spans :
    (Rtl.loc -> Rtl.loc) -> Zipcfg.graph -> unit   (* may raise DeadValue *)
@ 
The run-time system needs to know how the registers are mapped to constants.
<<runtimedata.mli>>=
type tgt  = Preast2ir.tgt
val print_reg_map : tgt -> unit
@
After we have placed all the data in spans, we emit
the data as assembly by calling [[emit_as_asm]].
The function should be partially applied to an assembler, then added
to the optimization pipeline.
<<runtimedata.mli>>=
val emit_as_asm : tgt -> 'a Asm.assembler -> procsym:Symbol.t -> Zipcfg.graph -> unit
@
It appears that the interpreter needs to know about user-defined spans and
stackdata.
<<runtimedata.mli>>=
val user_spans : spans -> (Bits.bits * Reloc.t) list
val stackdata  : spans -> Rtl.loc list
@ 
The compiler can emit data for the run-time system, such as the
direction of stack growth.
<<runtimedata.mli>>=
val emit_global_properties : ('a, 'b, Call.t) Target.t -> 'c Asm.assembler -> unit
@

% ------------------------------------------------------------------ 
\subsection{Imports, type definitions, and utilities}
% ------------------------------------------------------------------ 
A number of shorthands are used throughout the implementation.
<<runtimedata.ml>>=
module B  = Bits
module G  = Zipcfg
module GR = Zipcfg.Rep
module CT = Ctypes
module PA = Preast2ir
module RM = Register.Map
module RS = Register.Set
module R  = Rtl
module RP = Rtl.Private
module RU = Rtlutil
module W  = Rtlutil.Width
module Dn = Rtl.Dn
module Up = Rtl.Up
module S  = Spans
module T  = Target
module IM = Map.Make (struct type t = int let compare = compare end)

type tgt   = Preast2ir.tgt
type spans = S.t
exception DeadValue

let imposs = Impossible.impossible
let impossf fmt = Printf.kprintf Impossible.impossible fmt
let unimp  = Impossible.unimp

(* Don't touch the user-defined spans -- not necessary *)
let upd_spans upd spans =
  let spans = S.expose spans in
  let maybe_upd l = match l with
    | Some l -> (try Some (upd l) with DeadValue -> None)
    | None   -> None in
  spans.S.inalloc  <- upd spans.S.inalloc;
  spans.S.outalloc <- upd spans.S.outalloc;
  spans.S.ra       <- upd spans.S.ra;
  spans.S.csregs   <- List.map (fun (r,l) -> (r, maybe_upd l)) spans.S.csregs;
  spans.S.conts    <- List.map (fun (pc,sp,vars) -> (pc, upd sp, vars)) spans.S.conts;
  spans.S.sds      <- List.map upd spans.S.sds;
  Array.iteri (fun i l -> spans.S.vars.(i) <- maybe_upd l) spans.S.vars

let upd_all_spans upd g = Zipcfg.iter_spans (upd_spans upd) g
@

% ------------------------------------------------------------------ 
\subsubsection{Mapping data to expressions and emitting emitting spans as assembly}
% ------------------------------------------------------------------ 
At each stopping point, we emit information to tell the run-time system about
the stack frame.
We first separate out the spans that are visible throughout a procedure (stackdata).
The stackdata spans ([[sd_spans]]) are emitted in a separate table.
Then, for each stopping point, we emit the associated spans by calling
[[emit_site_spans]].
<<runtimedata.ml>>=
let emit_as_asm (PA.T target) asm ~procsym cfg =
  <<gather the [[spans]] in order>>
  let wordsize   = target.T.wordsize in
  let to_bits  i = Bits.S.of_int i wordsize  in 
  let zero       = Bits.zero wordsize in
  let one        = to_bits 1 in
  <<define functions for emitting data>>
  <<define [[emit_sd_spans]] and [[emit_site_spans]]>>
  let prev_section = asm#current in
  emit_sd_spans ();
  List.iter emit_site_spans spans;
  asm#section prev_section
@
Along with each of the spans, we collect the label to which we attach the run-time data.
<<gather the [[spans]] in order>>=
let add_spans (first, _ as b) _ spans =
  let (_, last) = GR.goto_end (GR.unzip b) in
  let add spans (_, lbl) = function Some ss -> (lbl, ss) :: spans | None -> spans in
  let spans = match first with
              | GR.Label (lbl, _, ss) -> add spans lbl (!ss)
              | GR.Entry              -> spans in
  match last with
  | GR.Call { GR.cal_spans = ss; GR.cal_contedges = {G.node = n} :: _ } ->
      add spans n ss
  | _ -> spans in
let spans = List.rev (G.fold_layout add_spans [] cfg) in
@
\paragraph{Emitting Stackdata Spans}
Stackdata spans have been attached to all the span collections.
They should all be identical, so we just pick one.

A stackdata map for $n$ stackdata labels is of size $n + 1$ words.
The first word gives the number of stackdata labels.
The next $n$ words give the stackdata labels in order.
<<define [[emit_sd_spans]] and [[emit_site_spans]]>>=
let sd_label = asm#local (Idgen.label "stackdata") in

let emit_sd_spans () =
  match spans with
  | (_, spans)::_ ->
      let spans = S.expose spans in
      asm#section "pcmap_data";
      asm#label   sd_label;
      asm#value   (Bits.U.of_int (List.length spans.S.sds) target.T.wordsize);
      List.iter   emit_loc spans.S.sds
 | [] -> () in
@
\paragraph{Emitting Stopping-Point Spans}
For each stopping point, we must emit the information stored in
the [[spans]].
The information is organized in two distinct areas.
The first area is a map from stopping points in the procedure to run-time
data associated with the stopping points.
The run-time data for each stopping point begins at the label [[frame_label]].
This map is placed in the [[pcmap]] section of the assembly code.

The second area is the collection of run-time data for each stopping point.
This data is placed in the [[pcmap_data]] section of the assembly code.

If a stopping point is a call node, its successor is the label we are suspended at;
otherwise, we expect the argument node to have a label.
<<define [[emit_sd_spans]] and [[emit_site_spans]]>>=
let emit_site_spans (stop_l, spans) =
  let spans = S.expose spans in
  let frame_label = asm#local (Idgen.label "frame") in
  <<emit proc to run-time data map>>
  <<emit frame data>> in
@
The first area consist of two consecutive pointers, one to the stopping point
and the other to the data associated with the stopping point:
\begin{verbatim}
.section pcmap
+--------------------+
| stopping_point_lbl |
+--------------------+
| frame_data_lbl     |
+--------------------+
\end{verbatim}
<<emit proc to run-time data map>>=
  asm#section "pcmap";
  asm#addr (Reloc.of_sym (asm#local stop_l, Rtl.codesym) wordsize);
  asm#addr (Reloc.of_sym (frame_label, Rtl.datasym)      wordsize);
@
The second area keeps track of the per-PC information.
A~picture of
the layout appears below;
[[L]]~stands for a coded machine location,
[[I]]~stands for an integer, 
and
[[P]]~stands for a pointer (address).
\begin{verbatim}
.section pcmap_data
frame_data_lbl:
+--------------------------+
| L : incoming dealloc pt  |
+--------------------------+
| L : outgoing dealloc pt  |
+--------------------------+
| L : return address       |
+--------------------------+
| P : stackdata_table      |
+--------------------------+
| I : num registers        |
+--------------------------+
| I : num locals           |
+--------------------------+
| I : num spans            |
+--------------------------+
| I : cont block size      |
+--------------------------+
| registers (I : index, L : location) * |
+--------------------------+
| locals (L : location) *  |
+--------------------------+  <--- cont offsets are from here
| num continuations        |
| cont 1 offset            |
|     ...                  |
| cont n offset            |
| --------------           |
| cont 1 block             |
|     ...                  |
| cont n block             |
+--------------------------+
| spans                    |
+--------------------------+
\end{verbatim}
@
We emit each of these blocks in order, beginning with the \PAL\ internal spans.
<<emit frame data>>=
asm#section "pcmap_data";
asm#label frame_label;
emit_loc spans.S.inalloc;
emit_loc spans.S.outalloc;
emit_loc spans.S.ra;
asm#addr (Reloc.of_sym (sd_label, Rtl.datasym) wordsize);
emit_int (List.length (List.filter nonredundant spans.S.csregs));
emit_int (Array.length spans.S.vars);
@
The source spans are laid out by index.
We start with index~0 and go up to [[max_span_\index]].
Because the indices may be sparse, we fill in any gaps with zeroes.
Inner spans, which take priority, are placed first by the front end,
so we use a stable sort to order the indices.
<<emit frame data>>=
let users =
  let unsorted = List.map (fun (n,e) -> (Bits.S.to_int n,e)) spans.S.users in
  let compare ((n : int), _) ((n' : int), _) = compare n n' in
  List.stable_sort compare unsorted in
let max_span_ix = match users with [] -> -1 | _ :: _ -> fst (Auxfuns.last users) in
let rec emit_spans_from n spans =
  if n <= max_span_ix then
    match spans with
    | (n', e) :: tail when n > n' -> emit_spans_from n tail (* skip duplicate span *)
    | (n', e) :: tail when n = n' -> asm#addr e; emit_spans_from (n+1) tail
    | _                           -> emit_int 0; emit_spans_from (n+1) spans in
@
And now, we fill in the rest of the data.
<<emit frame data>>=
emit_int (max_span_ix + 1);
emit_int (size_cont_block spans.S.conts);
List.iter emit_csreg spans.S.csregs;
Array.iter emit_maybe_loc spans.S.vars;
emit_conts spans.S.conts;
emit_spans_from 0 users;
@
We cover each section of the frame data in detail.
In addition to emitting spans as assembly data, we provide functions
to convert each type of data (frame size, register contents, locals, etc.)
to spans.
@
% ------------------------------------------------------------------ 
\subsubsection{Conversion to/from spans}
% ------------------------------------------------------------------ 
We provide conversion functions to store a value in a span,
and we provide the functions to emit the expressions in these spans as 
assembly.

We define functions for emitting two possible types of data in a single word:
link-time constants and value locations.
A link-time constant can be emitted directly.
As a special case, we may encounter a constant false value when we expect a link-time
constant.
This case indicates that there the value is never used, so we emit 0.

A value location, on the other hand, is one of three types: dead, register, or
stack offset.
We distinguish between the three cases by using the two high bits as tags and using the
rest of the word to indicate the value's location.
\begin{enumerate}
\item Dead --- The value is dead at this point in the procedure.
The two high bits are 0b00. Since a dead value has no location, we just emit 0x0.
\item Register --- The value is stored in a register.
The two high bits are 0b01. Of the remaining $n$ bits, the low $n/2$
bits hold an index indicating the register, and the high $n/2$ bits hold an offset into
the register (in case the value is not stored in the low bits of the register).
\item Offset --- The value is stored on the stack, at a fixed offset from the virtual
frame pointer.
The high bit is 0b1.
The remaining bits store the offset from the virtual frame pointer (in
the usual two's-complement representation).
\end{enumerate}
@
First, we define a slew of helpers to emit the different types of values.
<<define functions for emitting data>>=
<<define [[simplify_exp]] to simplify rtl expressions>>
let reg_ix (((s,_,_), i, _) as r) =
  try  RM.find r (snd target.T.reg_ix_map)
  with Not_found -> imposs "Register not found in map" in
let emit_dead_loc      () = asm#value zero in
let emit_link_const sym   = asm#addr (Reloc.of_sym sym wordsize) in
let offset_w = wordsize - 1 in
let emit_offset bits = (* possibly an offset *)
  let value    = Bits.S.to_int bits in
  (try ignore (Bits.S.of_int value offset_w)
   with Bits.Overflow -> imposs "Offset from vfp is too large for run-time encoding");
  asm#value (B.Ops.or' (B.Ops.shl  one (to_bits offset_w))
                       (B.Ops.shrl (B.Ops.shl (to_bits value) one) one)) in
let emit_int i = asm#value (Bits.U.of_int i wordsize) in
let emit_reg ix offset =
  let offset_w = wordsize - 2 in
  let w'       = offset_w / 2 in
  (try ignore (Bits.S.of_int ix w'); ignore(Bits.S.of_int offset w')
   with Bits.Overflow -> imposs "Reg ix or offset is too large for run-time encoding");
  asm#value (B.Ops.or' (B.Ops.shl one (to_bits offset_w))
                         (B.Ops.or' (B.Ops.shl (to_bits offset) (to_bits w'))
                                      (to_bits ix))) in
@  
Then, we check the type of value (as encoded in the [[Rtl.exp]] type) and emit the
value in the proper format.
<<define functions for emitting data>>=
let emit_loc l =
  let mklink kind s w = Up.exp (RP.Const (RP.Link(s, kind, w))) in
  match Dn.loc (simplify_loc l) with
  | RP.Mem (_,_, RP.Const (RP.Link (sym,kind,_)),_)  ->
     emit_link_const (sym, mklink kind)
  | RP.Mem (_,_, RP.Const (RP.Bits bs),_)            -> emit_offset   bs
  | RP.Reg r                                         -> emit_reg  (reg_ix r) 0
  | RP.Slice (_, i, RP.Reg r)                        -> emit_reg  (reg_ix r) i
  | _ -> impossf "unexpected location for span data: %s" (RU.ToString.loc l)  in
let emit_maybe_loc l = match l with
  | Some l -> emit_loc l
  | None   -> emit_dead_loc () in

let nonredundant (reg, l) = match l with
| Some r -> not (RU.Eq.loc (Dn.loc r) (RP.Reg reg))
| None   -> true in

let emit_csreg (reg, l) =
  if nonredundant (reg, l) then
    (emit_int (reg_ix reg); emit_maybe_loc l) in
@
To check that the continuation index is within bounds, we first emit the number
of unwind continuations.
For each continuation, we have:
\begin{enumerate}
\item A 1-word offset to locate the block.
\item 2 words for each variable argument to the continuation.
\item A 1-word ``end of variable'' marker.
\item A 1-word stack-pointer offset.
\item A 1-word return address.
\end{enumerate}
<<define functions for emitting data>>=
let size_cont_block conts =
  let n = List.length conts in
  let nvars = List.fold_left (fun rst (_,_,vars) -> List.length vars + rst) 0 conts in
  1 + 2 * nvars + 4 * n in
@
We emit the following data in the continuation block:
\begin{enumerate}
\item The number of continuations.
\item The offsets of the continuations.
\item The blocks for the continuations.
\end{enumerate}
The sizes of these blocks are as described above.
<<define functions for emitting data>>=
let emit_conts conts =
  let n = List.length conts in
  emit_int n;
  ignore (List.fold_left (fun offset (_,_,vs) -> emit_int offset;
                                                 offset + 2 * List.length vs + 3)
                         (n+1) conts);
  let emit_cont_block (pc, sp, vars) =
    emit_int (List.length vars);
    asm#addr (Reloc.of_sym (asm#local pc, Rtl.datasym) wordsize);
    emit_loc sp;
    List.iter (fun (h,i,a) -> emit_int i; emit_int (Ctypes.enum_int h)) vars in
  List.iter emit_cont_block conts in
@
We provide a function to simplify an expression first by flattening slices such that
they consist of a single offset from a location (if applicable), then by calling
[[Simplify.exp]] on any expressions.
<<define [[simplify_exp]] to simplify rtl expressions>>=
let simplify_loc loc =
  let vfp     = target.T.vfp in
  let check w = if w mod wordsize <> 0 || w < 0 then
                   unimp (Printf.sprintf "unsupported size or alignment %d" w) in
  let is_vfp_offset e =
    let rec exp e = match e with
      | RP.Fetch (l,_)  -> loc l
      | RP.App (_,exps) -> List.fold_left (fun v e -> v || exp e) false exps
      | RP.Const _      -> false
    and loc l = if Vfp.is_vfp l then true else match l with
      | RP.Mem   (_,_,e,_) -> exp e
      | RP.Slice (_,_,l)   -> loc l
      | _                  -> false in
    exp e in
  let rec flatten offset l = match l with
    | RP.Mem ((_,_,mcell as ms),_,e,ass) when is_vfp_offset e ->
        let w = Rtlutil.Width.exp (Up.exp e) in
        check offset; check w;
        (*V.eprintf verb "Adding an offset %d of width %d\n" offset w;*)
        let e' = Rtlutil.add w (R.app (R.opr "sub" [w]) [Up.exp e; vfp])
                               (R.bits (Bits.S.of_int offset w) w) in
        R.mem (Up.assertion ass) ms (Cell.to_count mcell w) (Simplify.exp e')
    | RP.Mem (ms,w,e,ass) -> (* not a VFP offset *)
        R.mem (Up.assertion ass) ms w (Simplify.exp (Up.exp e))
    | RP.Reg r ->
        let w = Register.width r in
        check w; check offset;
        let l_up = Up.loc l in
        if offset <> 0 then
          R.slice w offset l_up
        else l_up
    | RP.Slice (_,i,l)       -> flatten (offset + i) l
    | RP.Var _ | RP.Global _ -> Up.loc l in
  flatten 0 (Dn.loc loc) in
@
It appears that the interpreter needs to know about user-defined spans and
stackdata.
<<runtimedata.ml>>=
let user_spans spans = (S.expose spans).S.users
let stackdata  spans = (S.expose spans).S.sds
@
The run-time system needs to know how the register are mapped to constants.
<<runtimedata.ml>>=
let print_reg_map (PA.T tgt) =
  let (n, map) = tgt.T.reg_ix_map in
  Printf.printf "Target has %d registers:\n" n;
  RM.iter (fun ((s,_,_),i,_) n -> Printf.printf "  %c[%d] -> %d\n" s i n) map
@
<<runtimedata.ml>>=
let emit_global_properties target (asm:'c Asm.assembler) =
  let cc = Call.get_cc target "C--" in
  let growth = match cc.Call.stack_growth with Memalloc.Up -> 1 | Memalloc.Down -> -1 in
  let wordsize = target.Target.wordsize in
  let memsize  = target.Target.memsize in
  let sym = asm#export "Cmm_stack_growth" in
  asm#section "data";
  asm#align (wordsize / memsize);
  asm#label sym;
  asm#value (Bits.S.of_int growth wordsize)
  

