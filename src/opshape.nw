% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon

%%Grades: B Peripheral Soon

\section{Operator-shape analysis}

In order to know how to do code expansion, we haev to analyze what
kinds of arguments and 
results operators have.
Here's where it happens.
We call a pattern of arguments and results a ``shape,'' and we have to
ensure that each shape is handled either in the generic expander or by
each postexpander.
To see a complete list of operators with their type schemes,
try
\begin{verbatim}
  qc-- -e 'Rtlop.print_shapes()'
\end{verbatim}
@
We export an analysis function that the generic expander can use to
pass the buck to the postexpander.
<<opshape.mli>>=
<<exported type definitions>>
<<exported type definitions>>=
type opr = Rtl.Private.opr
type exp = Rtl.Private.exp
type 'a hi = Hi of 'a
type 'a lo = Lo of 'a
type ('temp, 'warg) t =
  | Binop  of 'temp * 'temp
  | Unop   of 'temp
  | Binrm  of 'temp * 'temp * 'warg
  | Unrm   of 'temp * 'warg
  | Cmp    of 'temp * 'temp
  | Dblop  of 'temp * 'temp
  | Wrdop  of 'temp * 'temp * 'warg
  | Wrdrop of 'temp * 'temp * 'warg
  | Width
  | Fpcvt  of 'temp * 'warg
  | Bool
  | Nullary
<<opshape.mli>>=
val of_opr : opr -> (unit, unit) t
val capply :
    ('exp -> 'c -> 'temp) ->
    ('exp -> 'c -> 'warg) -> opr -> 'exp list -> 'c list -> ('temp, 'warg) t
@ 
\begingroup
\def\bits#1{\mathtt{bits}\##1}
\def\cross{\times}
\def\arrow{\rightarrow}
\def\bool{\mathtt{bool}}

\def\optype#1{\par\noindent\hspace*{2em}$#1$\\}
\def\oplist#1{\noindent\hangindent=4em\hangafter=1\texttt{#1}\par}

\subsection{Shapes}

All the shapes we know about are grouped below.
The postexpander sees arguments and results as follows:
\begin{itemize}
\item
An argument or result of type $\bits n$ gets passed in a temporary.
\item
An argument of type $\bits1$ or $\bits2$ is a ``weird argument'' and
gets passed in a~[[warg]]. 
\item
A~result of type $\bits1$ gets returned in a [[wtemp]], which is a
temporary plus a fill type.
\item
The postexpander never sees an argument of type [[bool]].
A~result of type [[bool]] gets turned into a conditional branch.
\item
A~result of type $\bits{2n}$ gets returned in a pair of temporaries
[[dsthi]] and [[dstlo]].
\end{itemize}

@
\subsubsection{Ordinary value operators}

These value operators correspond to postexpander functions [[binop]]
and [[unop]].
\optype{\forall  n . \bits n \cross \bits n \arrow \bits n}
  \oplist{add, and, div, mod, \ldots}
\optype{\forall  n . \bits n \arrow \bits n}
  \oplist{com, neg, fabs, fneg, popcnt}
@
\subsubsection{Ordinary value operators with rounding mode}

These value operators correspond to postexpander functions [[binrm]]
and [[unrm]].
\optype{\forall  n . \bits n \cross \bits n \cross \bits 2 \arrow \bits n}
  \oplist{fadd, fdiv, fmul, fsub}
\optype{\forall  n . \bits n \cross \bits 2 \arrow \bits n}
  \oplist{fsqrt}
@
\subsubsection{Comparisons}

Comparisons correspond to the postexpander function~[[bc]].
\optype{\forall  n . \bits n \cross \bits n \arrow \bool}
  \oplist{eq, ge, gt, le, lt, ne, \ldots}
@

\subsubsection{Weird value operators}

These operators correspond to postexpander functions
[[dblop]],
[[wrdop]],
and
 [[wrdrop]].
\optype{\forall  n . \bits n \cross \bits n \arrow 2\cross\bits n}
  \oplist{mulx, fmulx, mulux}
\optype{\forall  n . \bits n \cross \bits n \cross \bits 1 \arrow \bits n}
  \oplist{addc, subb}
\optype{\forall  n . \bits n \cross \bits n \cross \bits 1 \arrow \bits 1}
  \oplist{carry, borrow}
@

\subsubsection{Width-changers}


Unclear how these work; mostly the generic expander composes them with
things.  (E.g., see [[sxload]], [[zxload]], [[lostore]].)

\optype{\forall  n, m . \bits n \arrow \bits m}
  \oplist{sx, zx, lobits, NaN}
\optype{\forall  n, m . \bits n \cross \bits 2 \arrow \bits m}
  \oplist{f2f, f2i, i2f}
@

\subsubsection {Boolean operators}

These operators are all dealt with directly by the generic expander.
\optype{\bool \arrow \bool}
  \oplist{not}
\optype{bool \arrow \bits 1}
  \oplist{bit}
\optype{\bits 1 \arrow \bool}
  \oplist{bool}
\optype{bool \cross \bool \arrow \bool}
  \oplist{conjoin, disjoin}
\optype{bool}
  \oplist{false, true}
@
\subsubsection{Nullary operators}

These operators are turned into constants in the simplifier.
\optype{\bits 2}
  \oplist{round\_up, round\_down, round\_zero, round\_nearest}
\optype{\forall  n . \bits n}
  \oplist{minf, pinf, mzero, pzero}
@
\subsection{Obsolete, unsupported operators}

\optype{\forall  n . \bits n \cross \bits n \arrow \bits 2}
  \oplist{fcmp}
\optype{\forall  n, m . \bits n \cross \bits n \cross \bits m \arrow \bits n}
  \oplist{bitInsert}
\optype{\forall  n . \bits n \cross \bits n \cross \bits n \cross \bits n \cross \bits n \arrow \bits n}
  \oplist{bitTransfer}

\endgroup
@
<<opshape.ml>>=
module SM = Strutil.Map
module T  = Types

let impossf fmt = Printf.kprintf Impossible.impossible fmt

<<exported type definitions>>
@ 
Here are the type variables:
<<'a>>=
T.Bits (T.Var 1)
<<'b>>=
T.Bits (T.Var 2)
<<bits1>>=
T.Bits (T.Const 1)
<<bits2>>=
T.Bits (T.Const 2)
<<rm>>=
<<bits2>>
@ 
<<opshape.ml>>=
let shape scheme = match scheme with
| [<<'a>>; <<'a>>           ], <<'a>>               -> Binop ((), ())
| [<<'a>>                   ], <<'a>>               -> Unop ()
| [<<'a>>; <<'a>>; <<rm>>   ], <<'a>>               -> Binrm ((), (), ())
| [<<'a>>; <<rm>>           ], <<'a>>               -> Unrm ((), ())
| [<<'a>>; <<'a>>           ], T.Bool               -> Cmp ((), ())
| [<<'a>>; <<'a>>           ], T.Bits (T.Double 1)  -> Dblop ((), ())
| [<<'a>>; <<'a>>; <<bits1>>], <<'a>>               -> Wrdop ((), (), ())
| [<<'a>>; <<'a>>; <<bits1>>], <<bits1>>            -> Wrdrop ((), (), ())
| [<<'a>>                   ], <<'b>>               -> Width
| [<<'a>>; <<rm>>           ], <<'b>>               -> Fpcvt ((), ())
| [T.Bool|<<bits1>>         ], (T.Bool | <<bits1>>) -> Bool
| [T.Bool; T.Bool           ], T.Bool               -> Bool
| [                         ], T.Bool               -> Bool
| [                         ], (<<'a>>|<<bits2>>)   -> Nullary
| _ -> impossf "unrecognized operator type %s" (Types.scheme_string scheme)

let shapetab = Rtlop.fold (fun o t z -> SM.add o (shape t) z) SM.empty

let of_opr (o, _) =
  try SM.find o shapetab with _ -> impossf "operator %%%s has no shape" o
@ 
Here's the general idea of what we're trying to accomplish.
It's readable, but it's wrong in two ways:
\begin{itemize}
\item
There are no contexts
\item
The order of evaluation is not determined
\end{itemize}
<<opshape.ml>>=
let args () = impossf "wrong number of arguments to operator"
let appfun t w = function
  | Binop  _ -> (function [x; y]    -> Binop  (t x, t y)      | _ -> args())
  | Unop   _ -> (function [x]       -> Unop   (t x)           | _ -> args())
  | Binrm  _ -> (function [x; y; r] -> Binrm  (t x, t y, w r) | _ -> args())
  | Unrm   _ -> (function [x;r ]    -> Unrm   (t x, w r)      | _ -> args())
  | Cmp    _ -> (function [x; y]    -> Cmp    (t x, t y)      | _ -> args())
  | Dblop  _ -> (function [x; y]    -> Dblop  (t x, t y)      | _ -> args())
  | Wrdop  _ -> (function [x; y; c] -> Wrdop  (t x, t y, w c) | _ -> args())
  | Wrdrop _ -> (function [x; y; c] -> Wrdrop (t x, t y, w c) | _ -> args())
  | Width    -> (function [x]       -> Width                  | _ -> args())
  | Fpcvt  _ -> (function [x;r ]    -> Fpcvt  (t x, w r)      | _ -> args())
  | Bool     -> (function _         -> Bool)
  | Nullary  -> (function []        -> Nullary                | _ -> args())
@ 
Now for the truth, with contexts.
This code is absolute hell to write (and read?) because we must use
explicit [[let]] bindings to control the order of evaluation.
We would have to do the same above except the [[apply]] function is
not exposed.
<<opshape.ml>>=
let cappfun t w = 
  let binop cs es =
    match es, cs with
    | [x; y], [xc; yc] ->
        let x = t xc x in
        let y = t yc y in
        Binop  (x, y)
    | _ -> args() in
  let unop cs es =
    match es, cs with [x], [xc] -> Unop (t xc x) | _ -> args() in
  let binrm cs es =
    match es, cs with
    | [x; y; r], [xc; yc; rc] ->
        let x = t xc x in
        let y = t yc y in
        let r = w rc r in
        Binrm (x, y, r)
    | _ -> args() in
  let unrm cs es =
    match es, cs with
    | [x; r], [xc; rc] ->
        let x = t xc x in
        let r = w rc r in
        Unrm (x, r)
    | _ -> args() in
  let cmp cs es =
    match es, cs with
    | [x; y], [xc; yc] ->
        let x = t xc x in
        let y = t yc y in
        Cmp (x, y)
    | _ -> args() in
  let dblop cs es =
    match es, cs with
    | [x; y], [xc; yc] ->
        let x = t xc x in
        let y = t yc y in
        Dblop (x, y)
    | _ -> args() in
  let wrdop cs es =
    match es, cs with
    | [x; y; z], [xc; yc; zc] ->
        let x = t xc x in
        let y = t yc y in
        let z = w zc z in
        Wrdop(x, y, z)
    | _ -> args() in
  let wrdrop cs es =
    match es, cs with
    | [x; y; z], [xc; yc; zc] ->
        let x = t xc x in
        let y = t yc y in
        let z = w zc z in
        Wrdrop(x, y, z)
    | _ -> args() in
  let width cs es = 
    match es, cs with [x], [xc] -> Width | _ -> args() in
  let fpcvt cs es =
    match es, cs with
    | [x; r], [xc; rc] ->
        let x = t xc x in
        let r = w rc r in
        Fpcvt (x, r)
    | _ -> args() in
  let nullary cs es = 
    match es, cs with [], [] -> Width | _ -> args() in
  function
  | Binop  _ -> binop
  | Unop   _ -> unop
  | Binrm  _ -> binrm
  | Unrm   _ -> unrm
  | Cmp    _ -> cmp
  | Dblop  _ -> dblop
  | Wrdop  _ -> wrdop
  | Wrdrop _ -> wrdrop
  | Width    -> width
  | Fpcvt  _ -> fpcvt
  | Bool     -> (fun _ _ -> Bool)
  | Nullary  -> nullary

let capply to_temp to_warg opr = cappfun to_temp to_warg (of_opr opr)
