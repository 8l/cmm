% -*- mode: Noweb; noweb-code-mode: caml-mode -*-


% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon


% ------------------------------------------------------------------ 
\section{Auxiliaries}
% ------------------------------------------------------------------ 

This module provides functions we found too useful to hide them in a
specific module. They are usually small and generic and one could
argue that we found them missing in {\ocaml} standard library.

<<auxfuns.mli>>=
val round_up_to : multiple_of:int -> int -> int
  (* round_up_to n k rounds k up to the nearest multiple of n.
     n must be positive and k must be nonnegative *)

val foldri : (int -> 'a -> 'b -> 'b) -> 'a list -> 'b -> 'b
  (* fold list elements right to left, passing index for List.nth *)

val map_partial : ('a -> 'b option) -> 'a list -> 'b list

val last : 'a list -> 'a (* raises Invalid_argument on empty list *)

val from: int -> upto:int -> int list
  (* from x ~upto:y is the list of integers x, .., y *)

val compare_list : ('a -> 'a -> int) -> 'a list -> 'a list -> int

module List : sig
    val take : int -> 'a list -> 'a list
      (* take the first n elements of a list, or if there are fewer
         than n elements, take the whole list (viva Haskell!) *)
end

module Option : sig 
    val is_some : 'a option -> bool
    val is_none : 'a option -> bool
    val get: 'a -> 'a option -> 'a
    val map : ('a -> 'b) -> ('a option -> 'b option)
end

module String : sig
  val foldr : (char -> 'a -> 'a) -> string -> 'a -> 'a
end

type void = Void of void (* used as placeholder for polymorphic variable *)
@
Here is a substring extraction function inspired by Python's [[slice]].
The parameters [[start]] and [[stop]] denote which part of [[str]]
should be extracted; negative numbers can be used to reference the
starting point from the end of the string rather than the beginning.  It
is best to think about the [[start]] and [[stop]] indices as pointing
between the characters; some examples makes this clear:
<<auxfuns.mli>>=
val substr: int -> int -> string -> string
@ %
\begin{quote}
\begin{verbatim}
          h  e  l  l  o  _  w  o  r  l  d
        0  1  2  3  4  5  6  7  8  9  10 11
     -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1  0

    substr 0 0 "hello world"            ;; - : string = "hello world"
    substr 0 1 "hello world"            ;; - : string = "h"
    substr 0 (-1) "hello world"         ;; - : string = "hello worl"
    substr (-3) (-1) "hello world"      ;; - : string = "rl"
    substr (0) (3) "hello world"        ;; - : string = "hel"
\end{verbatim}
\end{quote}
@



% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 
<<auxfuns.ml>>=
type void = Void of void (* used as placeholder for polymorphic variable *)

module Option = struct
    let is_some = function Some _ -> true  | None -> false 
    let is_none = function Some _ -> false | None -> true
    let get x = function
        | Some y -> y
        | None   -> x
    let map f = function Some x -> Some (f x) | None -> None
end
@ 
<<auxfuns.ml>>=
let round_up_to ~multiple_of:n k = n * ((k+(n-1)) / n)
@ 
<<auxfuns.ml>>=
let foldri f l z =
  let rec next n = function
    | [] -> z
    | x :: xs -> f n x (next (n+1) xs) in
  next 0 l

let rec from first ~upto = 
    if first > upto then [] else first :: from (first+1) ~upto

let substr start stop str = 
    let start = if start <  0 then String.length str + start else start in
    let stop  = if stop  <= 0 then String.length str + stop  else stop  in
        String.sub str start (stop - start)
@
<<auxfuns.ml>>=
module String = struct
  let foldr f s z =
    let rec down_from n z =
      if n < 0 then z else down_from (n-1) (f (String.get s n) z) in
    down_from (String.length s - 1) z
end
@
<<auxfuns.ml>>=
let rec last = function
  | [] -> raise (Invalid_argument "empty list")
  | [x] -> x
  | x :: xs -> last xs
@ 
<<auxfuns.ml>>=
let rec map_partial f = function
  | [] -> []
  | x :: xs ->
      match f x with
      | Some y -> y :: map_partial f xs
      | None -> map_partial f xs
@
<<auxfuns.ml>>=
let rec compare_list cmp x y = match x, y with
| [], [] -> 0
| [], _ :: _ -> -1
| _ :: _, [] ->  1
| x :: xs, y :: ys ->
    match cmp x y with
    | 0 -> compare_list cmp xs ys
    | diff -> diff
@ 
<<auxfuns.ml>>=
module List = struct
  let rec take n xs = match xs with
  | [] -> []
  | _ :: _ when n = 0 -> []
  | x :: xs -> x :: take (n-1) xs
end
