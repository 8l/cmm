% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
\begin{quote}\it
    Observations and ideas: the [[Single]] module currently has no
    clients. Does the implementation of [[Multiple]] be that
    complicated? The functions to allocate a temporary take both the
    space and the desired width as arguments. It seems, that simple
    counter should be enough to create new temporaries. The source for
    temporaries could be made part of a target description. This would
    simplify the interface because a certain space would imply the width
    of that space. --CL (Mon Apr 29 17:36:53 EDT 2002)
\end{quote}

% ---------------------------------------------------------------- %
\section{Allocator for temporaries}
% ---------------------------------------------------------------- %

Multiple parts of the compiler may need to allocate temporaries.
Here we provide simple allocators for temporaries.
The primary variation is in the interfaces.

One policy question is whether the client of the allocator should name
the temporary space directly or should name the hardware space into
which the temporary will eventually be mapped.  We have decided that
clients must ask for a specific temporary space, not for a temporary
mapping into some hardware space.  Our reasoning is twofold: first, that
asking for a hardware space does not specify a location set, and second,
that the client is supposed to know all about the temporaries anyway.

Type~[[Single.t]] represents an allocator for a single space.  It is a
mutable type; its state represents the temporaries that have already
been allocated.  [[Single.for_space]] creates a fresh allocator.  The
space passed to [[Single.for_space]] must be a temporary space.
Functions [[reg]] and [[loc]] provide different interfaces to the
allocator.  It may be useful to partially apply [[reg]] to [[t]].
<<talloc.mli>>=
module Single : sig
  type t       (* an allocator for one space -- a mutable type *)

  val for_space : Space.t -> t            (* a fresh allocator *)
  val reg : t -> (*width*) int -> Register.t
  val loc : t -> (*width*) int -> Rtl.loc
end
@ 

Type~[[Multiple.t]] represents a group of allocators, one for each
temporary space on a machine.  It is a mutable type; its state
represents the temporaries that have already been allocated.
[[Single.for_spaces]] creates a fresh allocator for each temporary space
on the list passed to it.  Non-temporary spaces are ignored, so it is
possible to pass a list of \emph{all} spaces.  Functions [[reg]],
[[loc]], and [[reg_like]] provide different interfaces to the allocator.
It may be useful to partially apply [[reg]] and [[loc]] to~[[t]] and a
space.  More interfaces could be added.  It is a checked run-time error
to ask for a space that is not a temporary space on the original list.
<<talloc.mli>>=
module Multiple : sig
  type t       (* an allocator for multiple spaces -- a mutable type *)

  val for_spaces : Space.t list -> t            (* a fresh allocator *)
  val reg : char -> t -> (*width*) int -> Register.t
  val loc : t -> char -> (*width*) int -> Rtl.loc
  val reg_like : t -> Register.t -> Register.t
end
@ 

% ---------------------------------------------------------------- %
\subsection{Implementation}
% ---------------------------------------------------------------- %

<<talloc.ml>>=
module S = Space
<<auxiliaries>>
module Single = struct
  type t = ((*width*)int -> Register.t) * ((*width*)int -> Rtl.loc)
        
  let for_space space =
    let next = ref 1 in
    let (_, _, cell) = space.S.space in
    let to_count = Cell.to_count cell in
    (fun width ->
      <<use [[width]] to make [[k]] be the next index, updating [[next]]>>
      (space.S.space, k, to_count width)),
    (fun width ->
      <<use [[width]] to make [[k]] be the next index, updating [[next]]>>
      Rtl.reg (space.S.space, k, to_count width))

  let _ = (for_space : Space.t -> t)

  let reg (reg, _) = reg
  let loc (_, loc) = loc
end
@ 
<<use [[width]] to make [[k]] be the next index, updating [[next]]>>=
let () = if not (existsEq width space.S.widths) then
           Impossible.impossible ("Asked for temporary in space `" ^
                                  space.S.doc ^ "' with unsupported width " ^
                                  string_of_int width) in
let Cell.C n = to_count width in
let k = !next in
let _ = next := k + n in
<<auxiliaries>>=
let existsEq v =
  let rec exists = function
  | [] -> false
  | h :: t -> h = v || exists t
  in exists
@ 
<<talloc.ml>>=
module Multiple = struct
  let fail c =
    prerr_string ("Space '" ^ Char.escaped c ^ "' is not a temporary space\n");
    flush stderr;
    assert false

  let is_temp s = match s.S.classification with
  | S.Temp _ -> true
  | _ -> false

  type t = char -> Single.t

  let for_spaces spaces =
    List.fold_right
      (fun s rest ->
         if is_temp s then
           let a = Single.for_space s in
           let named_by (c', _, _) c = c =<= c' in
           fun c -> if named_by s.S.space c then a else rest c
         else
           rest)
      spaces fail

  let _ = (for_spaces : Space.t list -> t)

  let reg c t = Single.reg (t c)
  let loc t c = Single.loc (t c)

  let reg_like (t:t) ((c, _, ms) as _space, _, ct) =
    Single.reg (t c) (Cell.to_width ms ct)
end
@ 
This bit of cleverness may get the compiler to optimize division using
right shifts.  If not, we could write the right shifts ourselves.
I have absolutely no business pulling stunts like this!
<<auxiliaries>>=
let divideby = function
  | 32 -> fun n -> n / 32
  | 8  -> fun n -> n / 8
  | 64 -> fun n -> n / 64
  | m  -> fun n -> n / m
@ 
  
