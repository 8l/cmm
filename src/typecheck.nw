% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=8 sw=4 et:

% ------------------------------------------------------------------ 
\section{Type Checker for the Control-Flow Graph}
% ------------------------------------------------------------------ 

The control-flow graph (\cfg) of a procedure contains {\rtl}s. This
module provides a stage for the compiler's backplane that allows to
check the types of all {\rtls}.

To embed the function into the back plane it takes a procedure as
argument. The embedding into Lua is handled by the \module{lualink}
module.
<<typecheck.mli>>=
val proc: Ast2ir.proc -> unit
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

The implementation simply pieces together functionality: module
\module{rtldebug.nw} provides type checking, and module \module{zipcfg.nw}
traversal of a {\cfg}.
<<typecheck.ml>>=
let rtl =
  fun rtl ->
    try
      Rtldebug.typecheck rtl
    with
      Rtldebug.TypeCheck r ->
        Printf.eprintf "Ill-typed RTL %s\n" (Rtlutil.ToUnreadableString.rtl rtl)

let proc (cfg, p) = Zipcfg.iter_rtls rtl cfg
@
