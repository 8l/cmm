% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=8 sw=4 et:

% ------------------------------------------------------------------ 
\section{MIPS Recognizer}
% ------------------------------------------------------------------ 

This module provides a recognizer for {\mips} {\rtl}s. The recognizer
has two interfaces. The first is a predicate that is true, if an {\rtl}
is a {\mips} instruction. The second returns an assembly-language string
representation of the instruction.

<<mipsrec.mli>>=
val is_instruction: Rtl.rtl -> bool
val to_string:      Rtl.rtl -> string
@

It is a checked run-time error to pass an {\rtl} to [[to_string]] that
is not a {\mips} instruction.

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

The implementation is guided by the book \emph{\textsc{mips} Risc
Architecture} by Gerry Kane, published by Prentice Hall.

The recognizer is generated from a {\burg} specification. The [[head]]
part precedes code generated from [[rules]], the [[tail]] part follows
it.

<<mipsrec.mlb>>=
%head {: <<head>> :}
%tail {: <<tail>> :}
%term <<terminal types>>
%%
<<rules>>
@

The usual abbreviations for modules go into the [[head]] clause.

<<head>>=
module RP = Rtl.Private
module RU = Rtlutil
module Up = Rtl.Up
module Dn = Rtl.Dn
module SS = Space.Standard32
@

We report a fatal error with [[error]]. We do not expect to recover from
such an error; it is something that should not happen and is caused by
an internal inconsistency.

<<head>>=
exception Error of string
let error msg = raise (Error msg)   
let sprintf   = Printf.sprintf (* useful for formatting msg *)
@

The [[guard]] function turns a predicate into a cost function that can
be used in a dynmaic cost expression.

<<head>>=
let guard p = if p then 0 else Camlburg.inf_cost
@

Some utilities for building strings.

<<head>>=
let const32 b =
    assert (Bits.width b = 32);
    Nativeint.to_string (Bits.U.to_native b)

let const64 b =
    assert (Bits.width b = 64);
    Int64.to_string (Bits.U.to_int64 b)     (* signed or unsigned? *)

let cat     = String.concat ""
let printf  = Printf.printf
let sprintf = Printf.sprintf

let reg n   = "$"  ^ string_of_int n
let freg n  = "$f" ^ string_of_int n

let suffix = function
    | 8  -> "b"      
    | 16 -> "h"
    | 32 -> "w"
    | w  -> error (sprintf "not a MIPS width: %d" w)

let zx    = "u"  (* to construct op-code *) 
let sx    = ""
let width = string_of_int
@

To load immediate 64-bit integers we split them into an upper and a
lower half of 32-bit each, using [[lo]] and [[hi]].

<<head>>=
let lo b =
    assert (Bits.width b = 64);
    Bits.Ops.lobits 32 b

let b32 = Bits.U.of_int 32 64
let hi b =
    assert (Bits.width b = 64);
    Bits.Ops.lobits 32 (Bits.Ops.shrl b b32)
@    


% ------------------------------------------------------------------ 
\subsection{Recognizer Rules}
% ------------------------------------------------------------------ 

Note that the {\mips} assembler provides pseudo instructions that
translate into multiple machine instructions. If we would emit binary
instructions we would have to implement these pseudo instructions here.

\iffalse
\begin{quote}
\begin{tabularx}{\linewidth}{@{}>{\ttfamily}lX@{}}
    \emph{Nonterminal} & \emph{Meaning} \\ 
    \hline
    too lazy to keep this up to date\\
\end{tabularx}
\end{quote}
\fi

We use [[x]] as an universal terminal type whenever we need one. 

<<terminal types>>=
bits n x w
@

<<rules>>=
const64:    Bits(bits) [{: guard (Bits.width bits = 64)  :}]{:         bits :}
const:      Bits(bits) [{: guard (Bits.width bits = 32)  :}]{: const32 bits :}
symbol:     Link(x, w:int)      {: x#mangled_text :}
@

\paragraph{Registers}

<<rules>>=
f:          Reg('f', n:int)  {: n :}
r:          Reg('r', n:int)  {: n :}

regl:       r   {: reg r  :}
fregl:      f   {: freg f :}

pcl:        Reg('c',  0) {: () :}
spl:        Reg('r', 29) {: () :}
ral:        Reg('r', 31) {: () :}

reg:        Fetch(regl,w:int)   {: regl   :}
freg:       Fetch(fregl,w:int)  {: fregl  :}

pc:         Fetch(pcl,32)       {: () :}
sp:         Fetch(spl,32)       {: () :}
ra:         Fetch(ral,32)       {: () :}
@

\paragraph{Addresses}

<<rules>>=
meml:       Mem(addr)     {: addr :}
mem:        Fetch(meml,w:int)   {: meml :}

addr:       reg                 {: cat ["(";reg;")"]     :}
addr:       imm                 {: imm                   :}
addr:       Add(imm,reg)        {: cat [imm;"(";reg;")"] :}
addr:       Add(reg,imm)        {: cat [imm;"(";reg;")"] :}
addr:       symbol              {: symbol                :}
@

\paragraph{Constant Expressions}

<<rules>>=
imm:        const               {: const                 :} 
imm:        symbol              {: symbol                :}
imm:        Add(symbol,imm)     {: cat [symbol;"+";imm]  :}
imm:        Add(imm,symbol)     {: cat [symbol;"+";imm]  :}
@

\paragraph{Data Movement}

Load register from memory. A load of a value smaller than 32 bits
implies a zero or sign extension.
zero 

\emph{What is the difference between [[li]] and [[la]]? Maybe the
[[imm]] nonterminal is ill-defined. --CL}


<<rules>>=
inst:       Store(regl,imm,32)
            {: cat ["la"; " "; regl; ","; imm] :}

inst:       Store(regl,const,32)
            {: cat ["li"; " "; regl; ","; const] :}

inst:       Store(regl,mem,32)
            {: cat ["l"; suffix 32; " "; regl; ","; mem] :}

inst:       Store(regl, Sx(Fetch(mem,x:int)), w:int)
            {: cat ["l"; suffix w; sx; " "; regl; ","; mem] :}

inst:       Store(regl, Zx(Fetch(mem,x:int)), w:int) 
            {: cat ["l"; suffix w; zx; " "; regl; ","; mem] :}
@

The following two rules load constants into floating-point registers.
However, the assembler expect the constant in floating-point syntax
which we cannot produce easily.

<<rules we don't use>>=
inst:       Store(fregl,const,32)
            {: cat ["li.s"; " "; fregl; ","; const] :}

inst:       Store(fregl,const,64)
            {: cat ["li.d"; " "; fregl; ","; const] :}
@

A [[li]] instruction is translated by the assembler into a [[lui]] and
an [[ori]] instruction that does \emph{not} use register 1 that is
reserved for the assembler. Therefore, we can use register 1 when we
move a 64-bit constant into a floating-point register.

<<rules>>=
inst:       Store(fregl,const,32)
            {: sprintf "li $1, %s; mtc1 $1, %s" const fregl :} 
@

To construct the proper rigister names we cannot use the string
provided by [[fregl]] but must use the integer provided by [[f]].
Analogously we need the bit vector and not its string representation.

<<rules>>=
inst:       Store(f,b:const64,64)
            {: sprintf "li $1, %s; mtc1 $1, %s; li $1 %s; mtc1 $1, %s"
                       (const64 (lo b)) (freg f) (const64 (hi b)) (freg (f+1))
            :}           
@

Store register to memory. No extension here; the 8, 16, or 32 bits are
simply written to memory.

<<rules>>=
inst:       Store(meml, reg, w:int)
            {: cat ["s"; suffix w; " "; reg; ","; meml] :}

inst:       Store(meml, freg, w:int)
            {: cat ["s.s "; freg; ","; meml] :}
@

Moves between registers. For the [[move]] and [[mov]] instruction, we
assume the destination is the first argument.

<<rules>>=
inst:       Store(regl, reg, 32)
            {: cat ["move"; " "; regl; ","; reg] :}

inst:       Store(fregl, freg, 32)
            {: cat ["mov.s"; " "; fregl; ","; freg] :}

inst:       Store(fregl, freg, 64)
            {: cat ["mov.d"; " "; fregl; ","; freg] :}
@

I'm not sure I need the [[nop]]. The IRIX assembler complained about the
lack of it and indeed it affects results. I guess it really needs to go
\emph{after} some operation.

<<rules>>=
inst:       Store(fregl, reg, 32)
            {: cat ["nop; mtc1"; " "; reg; ","; fregl] :}

inst:       Store(regl, freg, 32)
            {: cat ["nop; mfc1"; " "; regl; ","; freg] :}


@


\paragraph{Control Flow}

<<rules>>=
inst:       Goto(symbol)
            {: cat ["j"; " "; symbol] :}

inst:       Goto(reg)
            {: cat ["jr"; " "; reg] :}
@

The [[next]] pattern covers the expression $PC + 4$ which denotes the
return address after a call.

<<rules>>=
next:       Add(pc,const)       {: () :}
inst:       Par(Goto(addr),Store(ral,next,32))     -- s/addr/symbol/g ? 
            {: cat ["jal"; " "; addr] :} 
@

Here is a special hack for the SPIM {\mips} simulator. A system call on
SPIM is not called like a procedure, but simply by [[syscall]].

<<rules>>=
syscall:    Link(x, w:int) [{: guard (x#mangled_text =$= "syscall") :}] {: () :}
inst:       Par(Goto(syscall), Store(ral,pc,32))
            {: "syscall" :}
@

Here are conditional branches. The {\rtl} operator names fit the {\mips}
assembly branch op-codes. We cannot inline the [[Cmp]] constructor
because the [[op]] terminal symbol would be unaccessible. Only top-level
terminals are in scope for the semantic action.

<<rules>>=
cmp:        Cmp(op:string,x:reg,y:reg)              {: (op,x,y) :}
cmp:        Cmp(op:string,x:reg,y:const)            {: (op,x,y) :}
inst:       Guarded(cmp,Goto(addr)) 
            {: match cmp with 
               | (op,x,y) -> cat ["b";op;" ";x;",";y;",";addr]
            :}   
@
            
\paragraph{Arithmetic}

<<rules>>=
inst:       Store(dst:regl, Add(x:reg,y:reg), 32)
            {: cat ["add"; " "; dst; ","; x; ","; y] :}
     
inst:       Store(dst:regl, Add(x:reg,y:imm), 32)
            {: cat ["addi"; " "; dst; ","; x; ","; y] :}
     
inst:       Store(dst:fregl, D2S(x:freg), 32)
            {: cat ["cvt.s.d"; " "; dst; ","; x] :}

inst:       Store(dst:fregl, S2D(x:freg), 64)
            {: cat ["cvt.d.s"; " "; dst; ","; x] :}
@
\paragraph{Other Instructions}

<<rules>>=
inst:       Nop() {: "nop" :}
@

% ------------------------------------------------------------------ 
\subsection{Debugging Support}
% ------------------------------------------------------------------ 

Uncomment the next rule to get a printout of the tree burg tries to
match.

<<rules>>=
inst: any [100]         {: cat ["<";any;">"] :}

any : True  ()          {: cat [ "True"  ] :}
any : False ()          {: cat [ "False" ] :}
any : Link(x, w:int)    {: cat [ "Link(";x#mangled_text;",";width w;")" ] :}
any : Late(string,w:int){: cat [ "Late(";string;",";width w;")" ] :}
any : Bits(bits)        {: cat [ "Bits(b)" ] :}

any : Fetch (any, w:int){: cat [ "Fetch(";any;",";width w;")" ] :}

any : Add(x:any, y:any) {: cat [ "Add(";x;", ";y;")" ] :}
any : Sub(x:any, y:any) {: cat [ "Sub(";x;", ";y;")" ] :}
any : Sx(any)           {: cat [ "Sx(";any;")" ] :}
any : Zx(any)           {: cat [ "Zx(";any;")" ] :}
any : Lobits(any)       {: cat [ "Lobits(";any;")" ] :}

any : Mem(any)   {: cat [ "Mem(";any;")" ] :}
any : Reg(char, n:int)  {: cat [ "Reg('";Char.escaped char;"',"; width n;")" ] :}

any : Store (dst:any, src:any, w:int)
                        {: cat [ "Store(";dst;",";src;",";width w;")" ] :}
any : Kill(any)         {: cat [ "Kill(";any;")" ] :}

any : Guarded(guard:any, any) 
                        {: cat [ "Guarded(";guard;",";any;")" ] :}
any : Cmp(op:string, x:any, y:any)    
                        {: cat [ "Cmp(";op;",";x;",";y;")" ] :}
any : Par(l:any, r:any) {: cat [ "Par(";l;",";r;")" ] :}
any : Goto(any)         {: cat [ "Goto(";any;")" ] :}
@


% ------------------------------------------------------------------ 
\subsection{Interfacing {\rtl}s with the Expander}
% ------------------------------------------------------------------ 

The principle interface is easy: {\rtl} constructors are mapped to
constructor functions of the same name. Because some transformations are
difficult to express in {\burg}, several operators and effects are
matched as special cases in {\ocaml}.


<<tail>>=
let const = function
    | RP.Bool _                 -> error "boolean found"
    | RP.Link(s,_,w)            -> conLink s w
    | RP.Diff _                 -> error "PIC not supported"
    | RP.Bits(b)                -> conBits b
    | RP.Late(s,w)              -> error (sprintf "late constant %s found" s)

<<tail>>=
<<helpers for [[exp]] and [[loc]]>>
let rec exp = function
    | RP.Const(k)               -> const k
    | RP.Fetch(l,w)             -> conFetch (loc l) w
    <<special cases for [[App]]>>
    | RP.App((o,_),_)           -> error (sprintf "unknown operator %s" o)

and loc = function
    | RP.Reg((sp,_,_),i,w)      -> conReg sp i
    | RP.Mem(('m',_,_),w,e,ass) -> conMem (exp e)
    | RP.Mem((sp,_,_),_,_,_)    -> error (sprintf "mem-space space %c" sp)
    | RP.Var   (s,i,w)          -> error (sprintf "var %s found" s)
    | RP.Global(s,i,w)          -> error (sprintf "var %s found" s)
    | RP.Slice _                -> error "cannot handle slice"
@

<<tail>>= 
let effect = function
    <<special cases for [[Store]]>>
    | RP.Store(l,e,w)           -> conStore (loc l) (exp e) w
    | RP.Kill(l)                -> error "cannot handle kill"

<<tail>>=
let guarded g stmt = match g with
    | RP.Const(RP.Bool b)       -> if b then effect stmt else conNop ()
    <<special cases for [[guarded]]>>
    | _                         -> conGuarded (exp g) (effect stmt)

let rec geffects = function
    | []                        -> conNop ()
    | [g, s]                    -> guarded g s
    | (g, s) :: t               -> conPar (guarded g s) (geffects t) 

let rtl (RP.Rtl es) = geffects es
@

% ------------------------------------------------------------------ 
\subsection{Special cases}
% ------------------------------------------------------------------ 

<<special cases for [[Store]]>>=
| RP.Store(RP.Reg(('c',_,_),i,w),r,_)
  when i = SS.indices.SS.pc   -> conGoto (exp r)
@

<<helpers for [[exp]] and [[loc]]>>=
let cmp = 
    Strutil.from_list ["eq";"ge";"geu";"gt";"gtu";"le";"leu";"lt";"ltu";"ne"] 

<<special cases for [[App]]>>=
| RP.App(("add", [w]), [x; y])            -> conAdd (exp x) (exp y)
| RP.App(("sub", [w]), [x; y])            -> conSub (exp x) (exp y)
| RP.App(("f2f_implicit_round", [32;64]), [x])     -> conS2D (exp x) 
| RP.App(("f2f_implicit_round", [64;32]), [x])     -> conD2S (exp x) 

| RP.App((op, [w]), [x; y]) 
    when Strutil.Set.mem op cmp           -> conCmp op (exp x) (exp y)
@

<<special cases for [[guarded]]>>=
@

    
% ------------------------------------------------------------------ 
\subsection{The exported recognizers}
% ------------------------------------------------------------------ 

If an error occurs, we emit the error message to [[stderr]] and include
it in the output. This will lead to errors with the assembler but makes
debugging easier because we do not abort after the first problem. Revise
this once the expander is more mature.

<<tail>>=
let rtl_to_string = RU.ToString.rtl

let dump msg rtl =
    List.iter prerr_string
    [ "error in recognizer: "
    ; msg
    ; " on "
    ; rtl_to_string rtl
    ; "\n"
    ]

let to_string r =
    try 
        let plan = rtl (Dn.rtl r) in
        Printf.sprintf "\t%s" (plan.inst.Camlburg.action ())
    with
        | Camlburg.Uncovered -> cat ["not an instruction: "
                                    ; rtl_to_string r
                                    ]
        | Error msg          -> ( dump msg r 
                                ; sprintf "error: %s" (rtl_to_string r)
                                )

let is_instruction r =
    try 
        let plan = rtl (Dn.rtl r) in
        plan.inst.Camlburg.cost < 100
    with
        | Camlburg.Uncovered -> false
        | Error msg          -> ( dump msg r 
                                ; false
                                )
@        
