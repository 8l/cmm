% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

\section{SPARC spaces and registers}

This module exports central information used by several parts of the
SPARC back end.
<<sparcregs.mli>>=
module Spaces : sig
  val m : Space.t  (* memory *)
  val r : Space.t  (* integer regs *)
  val f : Space.t  (* floating regs *)
  val k : Space.t  (* register-window hardware *)
  val c : Space.t  (* standard special registers *)

  val t : Space.t  (* 32-bit integer temps *)
  val u : Space.t  (* 32-bit floating temps *)
  val q : Space.t  (* 64-bit floating temps *)

  val d : Space.t  (* bogosity for rounding mode -- THIS MUST GO *)
end

val pc  : Rtl.loc
val npc : Rtl.loc
val cc  : Rtl.loc

val cwp : Register.t  (* current window pointer *)
val y   : Register.t  (* y register, for multiply *)

val fpctl : Register.t
val fpround : Register.x
@
<<sparcregs.ml>>=
module R  = Rtl
module S  = Space
module SS = Space.Standard32

module Spaces = struct
  let byteorder = R.BigEndian
  <<SPARC spaces>>
end
@ [[m]] is a big-endian memory space with byte, halfword, word, and
doubleword accesses.
<<SPARC spaces>>=
  let m = SS.m byteorder [8; 16; 32]
@ [[r]] is the general purpose integer register file with 32-bit
registers.  Some of these may be managed specially by register
windows.  Nyarggg.  We pretend that it's actually split between 32 and
64 bit registers.
<<SPARC spaces>>=
  let r = SS.r 32 byteorder [32; 64]
@ [[f]] is the general purpose floating-point register file with 32
32-bit registers.  Unlike the [[r]] space, these are all globals.
(We have lies and more lies!!!)
<<SPARC spaces>>=
  let f = S.checked { S.space          = ('f', Rtl.BigEndian, Cell.of_size 32)
                    ; S.doc            = "floating-point registers"
                    ; S.indexwidth     = 32
                    ; S.indexlimit     = Some 8  (* something strange here *)
                    ; S.widths         = [32; 64]
                    ; S.classification = S.Reg
                    }
@ [[t]] is the temporary space for the [[r]] space.
<<SPARC spaces>>=
  let t = SS.t   byteorder 32
@ [[u]] is the temporary space for the [[f]] space.
<<SPARC spaces>>=
  let u = S.checked { S.space          = ('u', 
                                          Rtl.BigEndian,
                                          Cell.of_size 32)
                    ; S.doc            = "floating-point temporaries"
                    ; S.indexwidth     = 32
                    ; S.indexlimit     = None
                    ; S.widths         = [32]
                    ; S.classification =
                        S.Temp { S.stands_for = S.stands_for 'f' Rtl.BigEndian 32
                                   (* lies about index? *)
                               ; S.set_doc    = "floating-point temporaries"
                               }
                    }

  let q = S.checked { S.space          = ('q', Rtl.Identity, Cell.of_size 64)
                    ; S.doc            = "64-bit floating-point temporaries"
                    ; S.indexwidth     = 32
                    ; S.indexlimit     = None
                    ; S.widths         = [64]
                    ; S.classification =
                        S.Temp { S.stands_for =
                                   (fun ((c, _, _), i, R.C n) ->
                                      i land 0x1 = 0 && c =<= 'f' && n = 2)
                               ; S.set_doc    = "64-bit floating-point temporaries"
                               }
                    }
@ [[c]] is the space for condition codes and the program counter.
<<SPARC spaces>>=
  let c = SS.c  6 Rtl.Identity [32]  (* pc, npc, cc, ???, fp_mode, fp_fcmp *)
@ [[k]] is the space for register windows.  The first cell represents
the CWP (current window pointer), which is just a counter that we
increment and decrement when saving and restoring windows.  The rest
of the space will eventually be used to represent saved window
registers.
<<SPARC spaces>>=
  let k = S.checked { Space.space          = ('k', Rtl.Identity, Cell.of_size 32)
                    ; Space.doc            = "register windows"
                    ; Space.indexwidth     = 32     (* what is indexwidth? *)
                    ; Space.indexlimit     = Some 1
                    ; Space.widths         = [32]
                    ; Space.classification = Space.Fixed
                    }
@ 
The [['d']] space is a piece of utter bogosity.
It needs to be eliminated in favor of some truth about the location of
the rounding mode.
<<SPARC spaces>>=
  let d = S.checked { S.space          = ('d', Rtl.Identity, Cell.of_size 2)
                    ; S.doc            = "bogus space for rounding mode"
                    ; S.indexwidth     = 32
                    ; S.indexlimit     = Some 1
                    ; S.widths         = [2]
                    ; S.classification = Space.Fixed
                    }
@
This is just for the Y register which is used for extended multiply.
<<SPARC spaces>>=
  let y = S.checked { Space.space          = ('y', Rtl.Identity, Cell.of_size 32)
                    ; Space.doc            = "Y register"
                    ; Space.indexwidth     = 32
                    ; Space.indexlimit     = Some 1
                    ; Space.widths         = [32]
                    ; Space.classification = Space.Fixed
                    }
@
<<sparcregs.ml>>=
let locations = SS.locations Spaces.c
let pc        = locations.SS.pc
let cc        = locations.SS.cc
let npc       = locations.SS.npc
@ 
<<sparcregs.ml>>=
let cwp     = (Spaces.k.Space.space, 0, R.C 1)
let y       = (Spaces.y.Space.space, 0, R.C 1)
let fpctl   = (Spaces.c.Space.space, 4, R.C 1)
let fpround = Register.Slice(2, 0, fpctl)
