% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon


% ------------------------------------------------------------------ 
\section{Target Platform Metrics}
% ------------------------------------------------------------------ 

This interface describes only low-level metrics such as might be used
when elaborating a {\PAL} program or when bootstrapping a [[Target.t]].
It also provides a consistency check that sprays error messages when
things are not consistent. 
<<metrics.mli>>=
<<exposed types>>
val default : t
val of_ast  : swap:bool -> Srcmap.map -> (Ast.region * Ast.arch) list -> t Error.error
@ 

Field [[alignment]] is the alignment required to load or store a word
of size [[pointersize]].
<<exposed types>>=
type t = {
  byteorder   : Rtl.aggregation ; (* big/little endian, id *)
  wordsize    : int             ; (* bits *)
  pointersize : int             ; (* bits *)
  memsize     : int             ; (* smallest addressable unit, typically 8 *)
  float       : string          ; (* name of float representation (def "ieee754") *)
  charset     : string          ; (* "latin1"  character encoding      *)
}
@
\section{Implementation}
<<metrics.ml>>=
module A = Ast
<<exposed types>>
let default = {
  byteorder   = Rtl.Identity;
  wordsize    = 32;
  pointersize = 32;
  memsize     = 8;
  float       = "ieee754";
  charset     = "latin1";
}

let of_ast ~swap map =
  let errorf rgn =
    Printf.kprintf (fun s -> (Error.errorRegionPrt (map, rgn) s; Error.Error)) in
  let def default = function
    | Error.Ok (Some (r, v)) -> v
    | Error.Ok None          -> default
    | Error.Error            -> assert false in
  let merge r prt what v = function (* used at int, string, and Rtl.aggregration *)
    | Error.Ok (Some (r', v')) as m when v =*= v' -> m
    | Error.Ok (Some (r', v')) ->
        errorf r "%s %s inconsistent with previous declaration of %s at %s"
          what (prt v) (prt v') (Srcmap.Str.region (map, r'))
    | Error.Ok None -> Error.Ok (Some (r, v))
    | Error.Error -> Error.Error in
  let mergei r what i v =
    if i > 0 then merge r string_of_int what i v
    else errorf r "%s must be a positive integer" what in
  let bos = function Rtl.LittleEndian -> "little" | _ -> "big" in
  let mergebo r v = merge r bos "byte order" v in
  let merges r = merge r (fun s -> s) in
  let is_ok = function  Error.Ok _ -> true | Error.Error -> false in

  let rec metrics bo w p m f c aa =
    let big_endian    r aa = metrics (mergebo r Rtl.BigEndian    bo) w p m f c aa in
    let little_endian r aa = metrics (mergebo r Rtl.LittleEndian bo) w p m f c aa in
    match aa with
    | [] -> if is_ok bo && is_ok w && is_ok p && is_ok m && is_ok f && is_ok c then
              match bo with
              | Error.Ok (Some (_, bo)) -> 
                  Error.Ok { byteorder   = bo;
                             wordsize    = def default.wordsize    w;
                             pointersize = def default.pointersize p;
                             memsize     = def default.memsize     m;
                             float       = def default.float       f;
                             charset     = def default.charset     c;
                           }
              | Error.Ok None ->
                  (Error.errorPrt "target byte order not specified"; Error.Error)
              | Error.Error   ->
                  assert false
            else
              Error.Error
    | (r,A.Memsize i)      :: aa -> metrics bo w p (mergei r "memsize" i m) f c aa
    | (r,A.ByteorderBig)   :: aa -> (if swap then little_endian else big_endian) r aa
    | (r,A.ByteorderLittle):: aa -> (if swap then big_endian else little_endian) r aa
    | (r,A.FloatRepr s)    :: aa -> metrics bo w p m (merges r "float" s f) c aa
    | (r,A.WordSize i)     :: aa -> metrics bo (mergei r "wordsize" i w) p m f c aa
    | (r,A.PointerSize i)  :: aa -> metrics bo w (mergei r "pointersize" i p) m f c aa
    | (r,A.Charset s)      :: aa -> metrics bo w p m f (merges r "charset" s c) aa in
  let n = Error.Ok None in
  metrics n n n n n n
@ 
<<metrics.ml>>=
