% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Please add grades for this module below. The line must start with % "%%".
% 

%%Grades: B Subsystem Later


% ------------------------------------------------------------------ 
\section{Memory Blocks}
% ------------------------------------------------------------------ 

This module provides composable memory blocks: complex blocks composed
from simpler blocks using two operations. Their main application is the
construction of a stack frame. The design of the abstraction and its
application to stack frame composition is also discussed in the paper
\emph{Declarative Composition of Stack Frames} by Lindig and Ramsey [To
appear in Proc. of the 14th International Conference on Compiler
Construction, 2004, Springer].

A block represents a contiguous piece of memory at run time,
characterized by four properties at compile time: a base address
expression $b$, a fixed size $s$, and a alignment requirement $a$. At
run time, a block occoupies the address interval $b, \dots, b+s$ and $b$
is $a$-aligned: $b \bmod a =0$ holds. The fourth property is a set of
additional constraints for the base address that result from block
operations. All four properties can be observed.

<<block.mli>>=
type t

val base:           t -> Rtl.exp
val size:           t -> int
val alignment:      t -> int
val constraints:    t -> Rtleqn.t list
@

\paragraph{Block Creation} A block is constructed by providing a base
address, size, and alignment.  Such a block is otherwise unconstrained.
Usually, constraints result from block operations and there is no need
to mention them explicitly.  Having said that, [[with_constraint]] adds
a constraint to an existing block.

<<block.mli>>=
val at:                 base:Rtl.exp -> size:int -> alignment:int -> t
val with_constraint:    t -> Rtleqn.t -> t
@

We often wish to create a block at an unknown offset from a known place.
Function [[relative]] is a higher-order function that we use to solve
this problem.  Calling [[relative e s f]] builds an address at unknown
offset from [[e]], where the name [[s]] is used somehow in constructing
the address (for debugging).  It then calls function [[f]] on this
address.  Example use is [[relative vfp "slot" at ~size:0
~alignment:1]].  This function might more properly live in module
[[Idgen]].

Function [[srelative]] is just like [[relative]], except that its
argument uses a different label.  To hell with labels!
<<block.mli>>=
val relative  : Rtl.exp -> string -> (base:Rtl.exp  -> 'a) -> 'a
  (* construct address at unknown offset and call function *)
val srelative : Rtl.exp -> string -> (start:Rtl.exp -> 'a) -> 'a
  (* construct address at unknown offset and call function *)
@

\paragraph{Block Operations} Block composition is guided by
interference: Two blocks whose data are live at the same time can be
concatenated into one bigger block that holds both. Two blocks whose
life times are disjoint can be overlapped into one block where they
share memory.

<<block.mli>>=
exception OverlapHigh
type placement      = High | Low
val cathl:          t -> t -> t
val overlap:        placement -> t -> t -> t   (* OverlapHigh *)
@

The operation [[cathl hi lo]] concatentes two block such that [[hi]]
sits atop of [[lo]] in memory. Caution: the argument order is counter
intuitive! The placement guarantees the alignment reuqirements of the
constituents. For this reason, the two blocks may be not directly
adjacent in the result, but separated by a small gap.

The operation [[overlap p x y]] places [[x]] and [[y]] according to the
placement strategy [[p]]: [[overlap Low]] aligns the two blocks at their
lower ends, [[overlap High]] at their upper ends in the resulting block. 
Overlapping at the high end may fail, in which case [[OverlapHigh]] is
raised. To succeed, the size difference of [[x]] and [[y]] must be a
multiple of the smaller blocks's alignment. For this reason is
overlapping at the high end rarely used.

\paragraph{Convenience Functions} The following functions are
implementable in terms of the primitive functions above. The list
functions take the width of an address expression as argument;
if the list is empty, then an empty block is returned.

<<block.mli>>=
val adjust:         t -> t                  (* size is multiple of alignment *)
val cathl_list:     Rtl.width -> t list -> t
val overlap_list:   Rtl.width -> placement -> t list -> t
@

\subsection{Lua Interface}

Blocks are exported as abstract user data to Lua. The [[Block.relative]]
function does not take an address directly, but another block whose
address $a$ is used to form a new address $a+k$, where $k$ is a late
compile-time constant derived from the string argument. The other two
arguments provide size and alignment.

<<block.mli>>=
module Lua: sig
    val relative:   t -> string -> int (*size*) -> int (* align *) -> t
    (* observer *)
    val base:       t -> string         (* show base address *)
    val constraints:t -> string list    (* for debugging *)
    val size:       t -> int
    val alignment:  t -> int
    (* operations *)
    val adjust:     t -> t
    val cat:        Rtl.width -> t list -> t
    val overlap:    Rtl.width -> placement (* "high"|"low"*) -> t list -> t   

    val eq : t -> t -> bool
end
@

\subsection{Implementation}

<<block.ml>>=
module C  = Rtleqn
module RU = Rtlutil

type t =
    { base:         Rtl.exp
    ; size:         int
    ; alignment:    int
    ; constraints:  C.t list
    }

let base t          = t.base
let size t          = t.size
let alignment t     = t.alignment
let constraints t   = t.constraints

let at ~base ~size ~alignment =
    { base          = base
    ; size          = size
    ; alignment     = alignment
    ; constraints   = []
    }
let with_constraint t c = {t with constraints = c :: t.constraints}

let relative anchor dbg f = 
  let w = RU.Width.exp anchor in
  f ~base:(RU.add w anchor (Rtl.late (Idgen.offset dbg) w))
let srelative anchor dbg f = relative anchor dbg (fun ~base -> f ~start:base)
@

\paragraph{Utilities} Function [[align x n]] returns the smallest
multiple of $n$ that is not smaller than $x$. Think of $x$ becoming
$n$-aligned. Function [[add]] adds an integer to an {\rtl} expression
and returns an {\rtl} expression.

<<block.ml>>=
let align x n = Auxfuns.round_up_to ~multiple_of:n x
let add exp i = RU.addk (RU.Width.exp exp) exp i
@

Function [[offset]] creates an address relative to a [[base]] address
using [[name]] to generate a late compile-time constant. Function
[[empty]] provides an empty block addressed from the virtual frame
pointer. 

<<block.ml>>=
let offset base name ptrwidth =
    RU.add ptrwidth base (Rtl.late (Idgen.offset name) ptrwidth)

let empty ptrwidth = 
    relative (Vfp.mk ptrwidth) "empty block" at ~size:0 ~alignment:1
@

\paragraph{Block Operations} When concatenating, we have to leave a gap
between the first and the second block to make sure we respect the
alignment of the second block.  We do so by virtually increasing the
size of the first block to [[size']] which is a multiple of the second
block's alignment. The alignment of the resulting block is the maximum
of the two incoming alignments.

<<block.ml>>=
let cathl hi lo =
    let size' = align (size lo) (alignment hi) in
        { base          = base lo
        ; size          = size' + size hi
        ; alignment     = max (alignment lo) (alignment hi)
        ; constraints   = C.equate (add (base lo) size') (base hi)  
                          :: (constraints lo) @ (constraints hi) 
        }
@

Overlapping at the high is impossible if a precondition isn't met. We
check it and raise [[OverlapHigh]] when it is violated.

<<block.ml>>=
type placement = High | Low
exception OverlapHigh

let overlap place x y = match place with
    | Low ->      
        { base          = base x
        ; size          = max (size x) (size y)
        ; alignment     = max (alignment x) (alignment y)
        ; constraints   = C.equate (base x) (base y)
                          :: (constraints x) @ (constraints y)
        }    
    | High -> let x,y = if size x < size y then x,y else y,x in
        if (size y - size x) mod (alignment x) <> 0 then raise OverlapHigh else
        { base          = base y    (* y is the larger block *)
        ; size          = size y
        ; alignment     = max (alignment x) (alignment y)
        ; constraints   = C.equate (add (base x) (size x))
                                   (add (base y) (size y))
                          :: (constraints x) @ (constraints y)
        }           
@ 

\paragraph{Convenience Functions}

<<block.ml>>=
let adjust t = { t with size = align (size t) (alignment t) }
let cathl_list w = function
  | [] -> empty w
  | b :: bs -> List.fold_left cathl b bs
let overlap_list w p = function
  | [] -> empty w
  | b :: bs -> List.fold_left (overlap p) b bs
@

\paragraph{Export to Lua} We export the block abstraction to Lua. The
actual export is handled in module \module{lualink}. Here we just
provide the {\ocaml} functions that implement the new Lua primitives and
the representation [[T]] for blocks in Lua..  

The Lua version of [[relative]] differs from the Caml version in that
the anchor address is the base address of an existing block.

<<block.ml>>= 
module Lua = struct 
    let size      = size 
    let alignment = alignment 
    let adjust    = adjust
    let cat     = cathl_list
    let overlap = overlap_list
        
    let constraints block = List.map Rtleqn.to_string (constraints block)

    let relative block name size alignment =
      relative (base block) name at ~size ~alignment
    let base block        = Rtlutil.ToString.exp (base block)

    let eq b1 b2 =
      b1.size = b2.size && b1.alignment = b1.alignment &&
      Rtlutil.Eq.exp (Rtl.Dn.exp b1.base) (Rtl.Dn.exp b2.base) (* ignore constraints! *)

end
@
Norman suggested to have overlap and concatenation functions in Lua that
take any number of parameters which can be either blocks or lists
(tables) of blocks. This amounts to functions that take a list of Lua
values.

