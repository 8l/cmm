% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=8 sw=4 et:
%
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
%

% The module name const is odd. I'm sticking to it because of the
% original module, but would like to find something better. rtleqn? 

% ------------------------------------------------------------------ 
\section{Equations over RTL-Expressions}
% ------------------------------------------------------------------ 

This module enables a client to build and solve a system of equations.
A term in an equation is an {\rtl} expression.  
The module is used to solve for the values of late compile-time
constants.
The equations themselves typically arise from constraints in the
[[Block]] module.
<<rtleqn.mli>>=
exception Can'tSolve

type t              (* equation *)
type solution =
    { known:        (string * Rtl.exp) list  (* fully solved *)
    ; dependent:    (string * Rtl.exp) list  (* depend on other variables *)
    }

val equate : Rtl.exp -> Rtl.exp -> t   (* e1 == e2 *)

val solve  : width:int -> t list -> solution   (* Can'tSolve *)
val to_string : t -> string (* for debugging *)
@  
The function [[equate]] creates an equation.
The solver treats
a list of equations as system of equations to be solved simultaneously.
Solving treats late compile-time constants as
variables and tries to map each one to an {\rtl} expression that is
variable-free. 
A~variable that can be expressed this way is \emph{known}.
A~variable whose value can be expressed only in terms of
other variables is \emph{dependent}. 
A~solution contains dependent variables only if the system of
equations does not provide enough information for a solution (e.g., if
there were fewer equations than variables).
@
N.B. For details of terminology see NR's solver paper in SP\&E.
@
Limitations: Despite the interface and the expressiveness of {\rtl}
expressions, this is not a general equation solver. How can I make
precise what the equation solver does without going into the details of
operation?
@
% ------------------------------------------------------------------ 
\section{Implementation of equations}
% ------------------------------------------------------------------ 

The implementation relies on the linear equation solver module
\module{eqn}. The main tasked solved here is to parse an {\rtl}
expression into linear form such that it can be passed to the linear
equation solver. The general idea is that complicated (and possibly
non-linear) terms are treated as constant with respect to equation
solving.
<<rtleqn.ml>>=
module Dn = Rtl.Dn
module Up = Rtl.Up
module RP = Rtl.Private

exception Can'tSolve
type solution =
    { known:        (string * Rtl.exp) list
    ; dependent:    (string * Rtl.exp) list
    }
@
We represent an expression as a linear
sum of terms.  
A term is a constant, a variable, or one ([[Unit]]). An equation is
a sum whose value is known to be zero.
<<rtleqn.ml>>=
type term =
    | Const of Rtl.exp
    | Var   of string
    | Unit  

type sum = (int * term) list
type t   = sum                  (* equation, sum == 0 *)
@
To aid debugging, we have a printable representation of terms. 
<<rtleqn.ml>>=
module ToString = struct
    let term = function
        | Const(exp) -> "(" ^ Rtlutil.ToString.exp exp ^ ")"
        | Var(s)     -> s
        | Unit       -> "1"
    let summand (i,t) = match i with
        | 1 -> term t
        | n ->
            match t with
            | Unit -> Printf.sprintf "%d" i
            | _    -> Printf.sprintf "%d * %s" i (term t) 
    let t sum = (* no thought for efficiency *)
      let pos = List.filter (fun (i, n) -> i >= 0)  sum in
      let neg = List.filter (fun (i, n) -> i <  0)  sum in
      let neg = List.map    (fun (i, n) -> (-i, n)) neg in
      let side = function
        | [] -> "0"
        | sum -> String.concat " + " (List.map summand sum) in
      side pos ^ " = " ^ side neg
end
let to_string = ToString.t
@
Here are constructor functions for simple sums. We use them when we
parse an {\rtl} expression into a sum.
<<rtleqn.ml>>=
let sym x   = [(1, Var x)]
let int i   = if i = 0 then [] else [(i, Unit)]
let const k = [(1, Const (Up.exp k))]
let add x y = x @ y
let sub x y = x @ List.map (fun (i,y) -> (-i,y)) y
@
The real work is to parse an {\rtl} expression into a sum. This requires
in particular to recognize certain {\rtl} operators. We traverse an
{\rtl} expression and create a sum representation for it. 
Any expression we
don't know how to handle becomes a constant.
<<rtleqn.ml>>=
let exp e = 
    let rec exp = function
    | RP.Const(RP.Bits(b))      -> int (Bits.S.to_int b)
    | RP.Const(RP.Late(x,_))    -> sym x
    | RP.Const(_) as x          -> const x
    | RP.App(("add",_),[e1;e2]) -> add (exp e1) (exp e2)
    | RP.App(("sub",_),[e1;e2]) -> sub (exp e1) (exp e2)
    | x                         -> const x
    in
        exp (Dn.exp e)
@
An equation is a sum whose value is zero. The [[equate]] function
simply subtract both sides from each other to obtain a sum of value
zero.
<<rtleqn.ml>>=
let equate e1 e2 = 
    let t  = sub (exp e1) (exp e2) in
    let () = if Debug.on "rtleqn" then
               Printf.eprintf "Rtleqn.equate: %s === %s\n"
                 (ToString.t (exp e1)) (ToString.t (exp e2)) in
    t
let () = Debug.register "rtleqn" "RTL equation solver"
@
The linear equation solver needs to know about terms. We provide the
structure [[T]] for it and create an instance of the equation solver for
us. The equation solver provides (should be changed):
\begin{itemize}
\item [[T.t]]: the type for a set of equations.
\item [[T.empty]]: the empty set.
\item [[T.make_zero]]: adds a sum that is known to be zero to an
       equation set.
\end{itemize}
<<rtleqn.ml>>=
module T = struct
    type t = term
    let variable = function         (* identify variable *)
        | Var s -> Some s
        | _     -> None
    let compare t t' = match t, t' with
    | (Const l, Const r) -> Rtlutil.Compare.exp (Dn.exp l) (Dn.exp r)
    | (Var l, Var r) -> compares l r
    | (Unit, Unit) -> 0
    | (Const _, Var _) -> -1
    | (Const _, Unit) -> -1
    | (Var _, Const _) -> 1
    | (Var _, Unit) -> -1
    | (Unit, Const _) -> 1
    | (Unit, Var _) -> 1

    let print   = ToString.term
end
module Solver = Eqn.Make(T)         (* equation solver over terms *)
@
The result as it is returned by the equation solver associates a variable
with a sum. Since we need to return {\rtl} expressions, we have to
unparse a sum into an expression. 
<<rtleqn.ml>>=
let rtl ~(width:int) (e:sum) = 
    let add    = Rtlutil.add width in
    let mult   = Rtl.opr "mul" [width] in 
    let bits i = Rtl.bits (Bits.S.of_int i width) width    in 
    let late x = Rtl.late x width in
    let summand = function
        | (1,Var x)   -> late x 
        | (i,Var x)   -> Rtl.app mult [bits i; late x] 
        | (i,Unit)    -> bits i 
        | (1,Const k) -> k
        | (i,Const k) -> Rtl.app mult [bits i;k] in
    let rec loop e = function
        | []    -> e
        | [s]   -> add e (summand s)
        | s::ss -> loop (add e (summand s)) ss
    in
        match e with
        | []    -> Rtl.bits (Bits.zero width) width
        | s::ss -> loop (summand s) ss 
@
Here we solve the equation system. We have a list of sums that we feed
into the linear equation solver. Once we obtain the result, we translate
it back to {\rtl}s. 
<<rtleqn.ml>>=
let solve ~width sums =
    try
        let eqns   = List.fold_right Solver.make_zero sums Solver.empty in
        let result = Solver.solve eqns in
        let to_rtl = function (v,sum) -> (v,rtl width sum) in
                { known     = List.map to_rtl result.Solver.known
                ; dependent = List.map to_rtl result.Solver.dependent
                }
    with
        Solver.Can'tSolve _ -> raise Can'tSolve
@
