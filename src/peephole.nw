% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=2 sw=2 et: 
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
% 

\section{Peephole Optimization}


The idea behind peephole optimization is simple.
Suppose you have the following program:
\begin{verbatim}
  t1 := 12
  t2 := sp + t1
\end{verbatim}
After the first assignment, you know as an ``available expression''
that [[t1 == 12]].
You can therefore do a forward substitution of [[12]]~for~[[t1]],
yielding
\begin{verbatim}
  t1 := 12
  t2 := sp + 12
\end{verbatim}
With luck, the assignment to~[[t1]] becomes dead, and a later
dead-assignment elimination will eliminate it.
Congratulations!  You have a peephole optimizer.
@
This module implements a forward dataflow pass that does the forward
substitution.
It's very pessimistic about available expressions, assuming that they
are empty at the start of each basic block.
For cleaning up the output of the generic expander, this is just fine.
<<peephole.mli>>=
val subst_forward : 'a -> Ast2ir.proc -> Ast2ir.proc * bool
  (* composed; probably should be sequential *)

val sequential : 'a -> Ast2ir.proc -> Ast2ir.proc * bool
@ 

\subsection{Implementation}

<<peephole.ml>>=
module D  = Dataflow.F
module G  = Zipcfg
module GR = Zipcfg.Rep
module P  = Proc
module PA = Preast2ir
module RP = Rtl.Private
module RU = Rtlutil
module Dn = Rtl.Dn
module Up = Rtl.Up
module SS = Strutil.Set
module T  = Target

module ToString = RU.ToString
<<utilities>>
@ 
<<peephole.ml>>=
let peephole = "peephole"  (* avoid allocating again and again... *)
let () = Debug.register peephole "peephole optimizer"
let debug = Debug.on peephole
@ 
This is a forward dataflow problem.
We propagate dataflow facts and use these facts to mutate RTLs at
nodes.
Two key functions are wrapped for debugging:
\begin{itemize}
\item
[[ok]] tests to see if an RTL is an instruction on the target
\item
[[replace]] produces the new version of an RTL
\end{itemize}
<<peephole.ml>>=
let tx (g, proc) =
  let PA.T tgt = proc.P.target in
  let replace =
    if debug then
      (fun rtl old ->
        Printf.eprintf "Replacing old rtl %s\n     with new rtl %s\n"
          (ToString.rtl old) (ToString.rtl rtl);
        rtl) 
    else
      (fun rtl _ -> rtl) in
  let ok =
    if debug then
      (fun i -> if tgt.T.is_instruction i then true
                else (Printf.eprintf "### rejected substitution %s\n"
                           (ToString.rtl i); false))
    else
      tgt.T.is_instruction in
  <<propagation of available expressions and replacement of RTLs>>
  { D.name = "peephole"; D.middle_out = middle_out; D.last_outs = last_outs }

let _ = Debug.register "avail-dataflow" "computation of available expressions"

let subst_forward v gproc =
  let pass = D.a_t Availpass.analysis (tx gproc) in
  let pass = if Debug.on "avail-dataflow" then D.debug Avail.to_string pass else pass in
  Backplane.of_dataflow (D.rewrite pass ~entry_fact:Avail.unknown) v gproc

let sequential v (g,proc) =
  let pass = D.a_t Availpass.analysis (tx (g,proc)) in
  D.run_anal Availpass.analysis Avail.unknown g;
  Backplane.of_dataflow (D.rewrite_solved pass ~entry_fact:Avail.unknown) v (g,proc)
@ 
In one pass, we simultaneously propagate dataflow information and
mutate RTLs.
The dataflow information is a set of available expressions, which is
passed in as parameter [[avail]].
The propagation is shown here; the real work is done by
[[Avail.forward]].
This code is very stupid; the moment it encounters any nontrivial
control flow, it forgets all it knows and resumes with [[Avail.empty]].
<<propagation of available expressions and replacement of RTLs>>=
<<utility functions that substitute expressions for locations>>
<<code that may mutate the RTL at [[node]]>>
@ 
Here's the mutation code.
The [[update]] function replaces an RTL, provided we haven't run out
of transactions.
<<code that may mutate the RTL at [[node]]>>=
let search avail update rtl = <<do our best to use [[update]] to replace [[rtl]]>> in
let middle_out avail m = match m with
| GR.Stack_adjust _ -> None
| _ ->
    let rtl = GR.mid_instr m in
    if debug then
      Printf.eprintf "=> Considering %s\n" (ToString.rtl rtl);
    let update new_rtl = Some (G.single_middle (G.new_rtlm (replace new_rtl rtl) m)) in
    search avail update rtl in
let last_outs avail l = 
  let rtl = GR.last_instr l in
  if debug then
    Printf.eprintf "=> Considering %s\n" (ToString.rtl rtl);
  let update new_rtl = Some (G.single_last (G.new_rtll (replace new_rtl rtl) l)) in
  search avail update rtl in
@ 
How do we find a new RTL to pass to [[update]]?
The basic idea is to substitute [[Fetch(e)]] for [[loc]] in the
existing [[rtl]].
According to Jack Davidson, when we are peephole optimizing 
we should try two substitutions, not just
one.
This is a bit like using a three-instruction window for peephole
optimization instead of just a two-instruction window.

Instead of using single substitution twice, we define [[subst2]] to do
two substitutions at once.
This way we avoid allocating yet another copy of the RTL.
<<utility functions that substitute expressions for locations>>=
let slocs = RU.Subst.Fetch.rtl in
let subst1 (loc, e) rtl =
  Simplify.rtl (slocs ~guard:(RU.Eq.loc loc) ~fetch:(fun _ _ -> e) rtl) in
let subst2 (loc,e) (loc',e') rtl =
  Simplify.rtl (slocs ~guard:(fun l -> RU.Eq.loc l loc || RU.Eq.loc l loc')
                      ~fetch:(fun l _ -> if RU.Eq.loc l loc then e else e') rtl) in
@
What substitutions will we try?
We want locations that are fetched in the current RTL and that have
known values in [[avail]].
For the time being, we're only interested in register locations, but
if we eventually get good may-alias information, we will want to check
memory locations as well.

Function [[candidates]] finds all [[(loc, e)]] pairs that might be
suitable for substitutions.  
<<utility functions that substitute expressions for locations>>=
let candidates avail rtl =
  let add loc pairs = match loc with
  | RP.Reg _ when not (List.mem_assoc loc pairs) ->  (* don't make duplicates *)
      (match Avail.in_loc avail loc with
      | Some e -> (loc, e) :: pairs
      | None -> pairs)
  | _ -> pairs in
  RU.Fold.LocFetched.rtl add rtl [] in
@ 
Now we actually attempt the update.
We use a backtracking search, which is implemented in
continuation-passing style.
The search repeatedly attempts first
[[try_pair]] and then [[try_one]].
Each [[try]] function uses one or two (location, expression) pairs
(named [[le]] or [[le']]), substitutes in [[rtl]], and checks the
result to see if it is OK, that is, if it is representable on the
target machine.
If so, we are done. 
If not, we backtrack by tail-calling the [[resume]] continuation.
<<do our best to use [[update]] to replace [[rtl]]>>=
let try_pair le le' resume =
  let rtl' = subst2 le le' rtl in
  if ok rtl' then update rtl' else resume () in
let try_one le resume =
  let rtl' = subst1 le rtl in
  if ok rtl' then update rtl' else resume () in
@
To call these functions, we generate the list of all candidates, try
all pairs, then try all single candidates.
Functions [[wrap2]] and [[wrap]] add debugging information.
<<do our best to use [[update]] to replace [[rtl]]>>=
let cs = candidates avail (Dn.rtl rtl) in
search_pairs cs (wrap2 try_pair) (fun () -> search cs (wrap try_one) (fun () -> None))
@ 
The search functions are the typical style with success and failure
continuations.
(Examples and explanations can be found in the undergraduate textbook
by Ramsey and Kamin.)
<<utility functions that substitute expressions for locations>>=
let rec search list succ fail = match list with
| [] -> fail()
| x :: xs -> succ x (fun () -> search xs succ fail) in

let rec search_pairs list succ fail = match list with
| [] -> fail ()
| x :: xs -> search xs (fun x' resume -> succ x x' resume)
                       (fun () -> search_pairs xs succ fail) in
@ 
These wrapper functions help diagnose failures of the search for
substitutions. 
<<utilities>>=
let () =
  Debug.register "peephole-search"
    "search for a substitutable location in peephole optimizer"

let wrap = 
  if Debug.on "peephole-search" then
    (fun succ l resume ->
      Printf.eprintf "Substituting for %s\n" (ToString.loc (Up.loc (fst l)));
      succ l (fun () ->
        (Printf.eprintf "Abandoning %s\n" (ToString.loc (Up.loc (fst l))); resume())))
  else
    (fun succ -> succ)

let wrap2 = 
  if Debug.on "peephole-search" then
    (fun succ l l' resume ->
      Printf.eprintf "Substituting for %s and %s\n" (ToString.loc (Up.loc (fst l))) 
        (ToString.loc (Up.loc (fst l')));
      succ l l' (fun () ->
        (Printf.eprintf "Abandoning %s and %s\n" (ToString.loc (Up.loc (fst l)))
                                     (ToString.loc (Up.loc (fst l'))); resume())))
  else
    (fun succ -> succ)
@ 
It's very often possible to peephole-optimize a copy instruction, but
it's not clear if it's a good idea.
This predicate could easily be used to turn off people optimization of
copy instructions
(the idea being that the register allocator should take care of them).
A~possible refinement would be to optimize only copy instructions
between different register spaces.
<<utilities>>=
let is_copy rtl = match Dn.rtl rtl with
| RP.Rtl [(RP.Const (RP.Bool true),
           RP.Store(RP.Reg _, RP.Fetch(RP.Reg _, _), _))] -> true
| _ -> false
@ 
