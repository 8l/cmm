% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon

\section{Rewriting RTL operators (and related utilities)}

This module has rewrite rules that help postexpanders implement
unsupported operators in terms of supported operators.
Arguments may be copied, so for maximum efficiency, it may be best if
they are temporaries---but we don't require this.
<<exported type abbreviations>>=
type width = Rtl.width
type exp   = Rtl.exp
type loc   = Rtl.loc
type block = exp Postexpander.block
type temp  = Register.t
<<rewrite.mli>>=
<<exported type abbreviations>>
@ 
\subsection{Basic operator interface}
<<rewrite.mli>>=
module Ops : sig
  <<type signatures for applying standard operators>>
  val signed   : width -> int -> exp
  val unsigned : width -> int -> exp
end
@ 
\subsection{Rewriting functions}
There are too many options for rewriting division.
We assume the common case is that arguments have the same sign (i.e.,
both positive).
\begin{itemize}
\item 
If the machine's divide instruction provides both \texttt{quot} and
\texttt{rem} for free, it is probably best to use [[div']].
It uses at most two conditional branches and will use one in the common case.
\item 
If the divide instruction gives only \texttt{quot}, it's probably
better to use one of the other instructions.
The first uses two conditional branches always.
The second uses only one in the common case, but may use up to three
in uncommon cases.
\end{itemize}
<<rewrite.mli>>=
val div' : width -> dst:loc -> exp -> exp -> quot:exp -> rem:exp -> block
  (* uses: comparisons, add, sub *)

val div2 : width -> dst:loc -> exp -> exp -> block
  (* always 2 conditional branches *)

val div1_3 : width -> dst:loc -> exp -> exp -> block
  (* 1--3 conditional branches *)
@ 
<<rewrite.mli>>=
val div_overflows : width -> exp -> exp -> exp
  (* uses: conjoin, eq *)

val (mod) : width -> exp -> exp -> exp
  (* uses : div, mul, sub *)

val modu : width -> exp -> exp -> exp
  (* uses : divu, mul, sub *)

val rem  : width -> exp -> exp -> exp
  (* uses : quot, mul, sub *)
<<rewrite.mli>>=
val popcnt : width -> dst:loc -> exp -> block (* for 32 bits only *)
<<rewrite.mli>>=
val sxlo : width -> width -> exp -> exp
  (* uses : shl, shra *)
val zxlo : width -> width -> exp -> exp
  (* uses : shl, shrl *)
@
\subsection{Other related utilities}

Get the value of an expression composed of high and low parts.
This is just [[zx hi << w | zx lo]] where [[w = width lo]].
<<rewrite.mli>>=
val regpair : hi:exp -> lo:exp -> exp
@ 
A~slice of a value, implementing using the standard [[lobits]] and
[[shrl]] operators.
The first width is the width of the expression; the second is the
width of the slice (as in [[lobits]]).
<<rewrite.mli>>=
val slice : width -> width -> lsb:int -> exp -> exp
@ 
Here are two ways to split a value for RISC load-immediate
implementations.
<<rewrite.mli>>=
type 'a pair = { hi : 'a; lo : 'a }
val splits : width -> lsb:int -> exp -> exp pair
val splitu : width -> lsb:int -> exp -> exp pair
@ It's a checked run-time error unless $0 < \mathtt{lsb} <
\mathtt{w}$.
The 
postconditions are as follows:
\begin{quote}
\let\t\mathtt
\def\lo#1#2{\t{lobits}_{#1 \rightarrow #2}}
\def\sx#1#2{\t{sx}_{#1 \rightarrow #2}}
\def\zx#1#2{\t{zx}_{#1 \rightarrow #2}}
[[splits w n e = {hi, lo}]] where
\begin{eqnarray*}
\t e &=& \t{hi} + \t{lo}\\
\lo w n \t{hi} &=& 0\\
\sx n w (\lo w n \t{lo}) &=& \t{lo}\\
\end{eqnarray*}

[[splitu w n e = {hi, lo}]] where
\begin{eqnarray*}
\t e &=& \t{hi} + \t{lo} = \t{hi} \mathbin{|} \t{lo}\\
\lo w n \t{hi} &=& 0\\
\zx n w (\lo w n \t{lo}) &=& \t{lo}\\
\end{eqnarray*}
\end{quote}
The idea is that given a constant expression, one can implement load
immediate by
$t \gets \mathtt{hi}; t \gets t + \mathtt{\sigma x}\;\mathtt{lo}$ 
where $\sigma$~stands for [[s]]~or~[[z]].
The recognizer should use the [[Bits.[SU].fits]] predicates.
@
\subsection{Implementation}
<<rewrite.ml>>=
module B  = Bits
module BO = Bits.Ops
module DG = Dag
module R  = Rtl
module RU = Rtlutil

let (<:>) = DG.(<:>)

<<exported type abbreviations>>

module Ops = struct
  <<automatically generated implementations of operators>>
  let signed   w n = R.bits (B.S.of_int n w) w
  let unsigned w n = R.bits (B.U.of_int n w) w
end
module O = Ops


let div_overflows w x y =
  let minint = R.bits (BO.shl (B.U.of_int 1 w) (B.U.of_int (w-1) w)) w in
  O.conjoin (O.eq w x minint) (O.eq w y (O.signed w (-1)))

let (mod) w x y = O.sub w x (O.mul w y (O.div  w x y))
let modu  w x y = O.sub w x (O.mul w y (O.divu w x y))
let rem   w x y = O.sub w x (O.mul w y (O.quot w x y))
@ 
<<rewrite.ml>>=
let sxlo n w x =
  let shamt = O.unsigned w (w-n) in
  O.shra w (O.shl w x shamt) shamt

let zxlo n w x =
  let shamt = O.unsigned w (w-n) in
  O.shrl w (O.shl w x shamt) shamt
@ 
Population count discussed in \emph{Hacker's Delight} and also in AMD
Athlon Optimization manual
(\url{http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/22007.pdf}). 

<<rewrite.ml>>=
let popcnt w ~dst x =
  if w <> 32 then
    Unsupported.popcnt ~notok:w ~ok:32;
  let u      = O.unsigned 32 in
  let (@:=) l r = DG.Rtl (R.store l r 32) in
  let (&)   l r = O._and 32 l r in
  let (>>)  l r = O.shrl 32 l (u r) in
  let (-)   l r = O.sub 32 l r in
  let (+)   l r = O.add 32 l r in
  let ( * ) l r = O.mul 32 l r in
  let tmploc = dst in
  let tmpval = R.fetch tmploc 32 in
  let mask3  = u 0x33333333 in
  let mask5  = R.bits (Bits.U.of_int64 0x55555555L 32) 32 in   (* Caml sign bit set *)
  let maskF  = u 0x0F0F0F0F in 
  let mask01 = u 0x01010101 in 
  tmploc @:= x - ((x >> 1) & mask5) <:>
  tmploc @:= (tmpval & mask3) + ((tmpval >> 2) & mask3)  <:>
  tmploc @:= ((tmpval + (tmpval >> 4)) & maskF)  <:>
  tmploc @:= ((tmpval * mask01) >> 24)   (* AMD guide *)
@  From \emph{Hacker's Delight}, an alternative to the last line is
\begin{verbatim}
  tmploc @:= tmploc + (tmploc >> 8) <:>
  tmploc @:= tmploc + (tmploc >> 16) <:>
  tmploc @:= (tmploc & u 0x3F)
\end{verbatim}
@
<<rewrite.ml>>=
let regpair ~hi ~lo =
  let hw = RU.Width.exp hi in
  let lw = RU.Width.exp lo in
  let w = hw + lw in
  O.(or) w (O.shl w (O.zx hw w hi) (O.unsigned w lw)) (O.zx lw w lo)
<<rewrite.ml>>=
let slice w n ~lsb e =
  if lsb = 0 then
    O.lobits w n e
  else
    O.lobits w n (O.shrl w e (O.unsigned w lsb))
@ 
Unsigned splitting is simple; we just grab the bits.
<<rewrite.ml>>=
type 'a pair = { hi : 'a; lo : 'a }

let splitu w ~lsb:n e =
  assert (0 < n && n < w);
  let lo = O.zx n w (O.lobits w n e) in
  let n  = O.unsigned w n in
  let hi = O.shl w (O.shrl w e n) n in
  { hi = hi; lo = lo }
@ 
Signed splitting is a bit tricky.
If the sign bit of the low part (bit $\mathtt{lsb}-1$) is set,
eventually $1$~will be subtracted from the high part, so we have to
add it ([[adjust]]) here.  The arithmetic achieves this effect without
any conditionals. 
<<rewrite.ml>>=
let splits w ~lsb:n e =
  assert (0 < n && n < w);
  let lo     = O.sx n w (O.lobits w n e) in
  let adjust = O.zx 1 w (slice w 1 ~lsb:(n-1) e) in
  let n      = O.unsigned w n in
  let hi     = O.shl w (O.add w (O.shrl w e n) adjust) n in
  { hi = hi; lo = lo }
@

\section{Things not to be looked at}

\subsection{Automatically generated helper functions}
This code is generated automatically by [[Rtlop.Emit.creators]].
<<automatically generated implementations of operators>>=
(* This code generated automatically by Rtlop.Emit.creators *)
let _NaN w w' x = Rtl.app (Rtl.opr "NaN" [w;w';]) [x; ]
let add w x y = Rtl.app (Rtl.opr "add" [w;]) [x; y; ]
let addc w x y z = Rtl.app (Rtl.opr "addc" [w;]) [x; y; z; ]
let add_overflows w x y = Rtl.app (Rtl.opr "add_overflows" [w;]) [x; y; ]
let _and w x y = Rtl.app (Rtl.opr "and" [w;]) [x; y; ]
let bit x = Rtl.app (Rtl.opr "bit" []) [x; ]
let bool x = Rtl.app (Rtl.opr "bool" []) [x; ]
let borrow w x y z = Rtl.app (Rtl.opr "borrow" [w;]) [x; y; z; ]
let carry w x y z = Rtl.app (Rtl.opr "carry" [w;]) [x; y; z; ]
let com w x = Rtl.app (Rtl.opr "com" [w;]) [x; ]
let conjoin x y = Rtl.app (Rtl.opr "conjoin" []) [x; y; ]
let disjoin x y = Rtl.app (Rtl.opr "disjoin" []) [x; y; ]
let div w x y = Rtl.app (Rtl.opr "div" [w;]) [x; y; ]
let div_overflows w x y = Rtl.app (Rtl.opr "div_overflows" [w;]) [x; y; ]
let divu w x y = Rtl.app (Rtl.opr "divu" [w;]) [x; y; ]
let eq w x y = Rtl.app (Rtl.opr "eq" [w;]) [x; y; ]
let f2f w w' x y = Rtl.app (Rtl.opr "f2f" [w;w';]) [x; y; ]
let f2f_implicit_round w w' x = Rtl.app (Rtl.opr "f2f_implicit_round" [w;w';]) [x; ]
let f2i w w' x y = Rtl.app (Rtl.opr "f2i" [w;w';]) [x; y; ]
let fabs w x = Rtl.app (Rtl.opr "fabs" [w;]) [x; ]
let fadd w x y z = Rtl.app (Rtl.opr "fadd" [w;]) [x; y; z; ]
let fcmp w x y = Rtl.app (Rtl.opr "fcmp" [w;]) [x; y; ]
let fdiv w x y z = Rtl.app (Rtl.opr "fdiv" [w;]) [x; y; z; ]
let feq w x y = Rtl.app (Rtl.opr "feq" [w;]) [x; y; ]
let fge w x y = Rtl.app (Rtl.opr "fge" [w;]) [x; y; ]
let fgt w x y = Rtl.app (Rtl.opr "fgt" [w;]) [x; y; ]
let fle w x y = Rtl.app (Rtl.opr "fle" [w;]) [x; y; ]
let float_eq = Rtl.app (Rtl.opr "float_eq" []) []
let float_gt = Rtl.app (Rtl.opr "float_gt" []) []
let float_lt = Rtl.app (Rtl.opr "float_lt" []) []
let flt w x y = Rtl.app (Rtl.opr "flt" [w;]) [x; y; ]
let fmul w x y z = Rtl.app (Rtl.opr "fmul" [w;]) [x; y; z; ]
let fmulx w x y = Rtl.app (Rtl.opr "fmulx" [w;]) [x; y; ]
let fne w x y = Rtl.app (Rtl.opr "fne" [w;]) [x; y; ]
let fneg w x = Rtl.app (Rtl.opr "fneg" [w;]) [x; ]
let fordered w x y = Rtl.app (Rtl.opr "fordered" [w;]) [x; y; ]
let fsqrt w x y = Rtl.app (Rtl.opr "fsqrt" [w;]) [x; y; ]
let fsub w x y z = Rtl.app (Rtl.opr "fsub" [w;]) [x; y; z; ]
let funordered w x y = Rtl.app (Rtl.opr "funordered" [w;]) [x; y; ]
let ge w x y = Rtl.app (Rtl.opr "ge" [w;]) [x; y; ]
let geu w x y = Rtl.app (Rtl.opr "geu" [w;]) [x; y; ]
let gt w x y = Rtl.app (Rtl.opr "gt" [w;]) [x; y; ]
let gtu w x y = Rtl.app (Rtl.opr "gtu" [w;]) [x; y; ]
let i2f w w' x y = Rtl.app (Rtl.opr "i2f" [w;w';]) [x; y; ]
let le w x y = Rtl.app (Rtl.opr "le" [w;]) [x; y; ]
let leu w x y = Rtl.app (Rtl.opr "leu" [w;]) [x; y; ]
let lobits w w' x = Rtl.app (Rtl.opr "lobits" [w;w';]) [x; ]
let lt w x y = Rtl.app (Rtl.opr "lt" [w;]) [x; y; ]
let ltu w x y = Rtl.app (Rtl.opr "ltu" [w;]) [x; y; ]
let minf w = Rtl.app (Rtl.opr "minf" [w;]) []
let (mod) w x y = Rtl.app (Rtl.opr "mod" [w;]) [x; y; ]
let modu w x y = Rtl.app (Rtl.opr "modu" [w;]) [x; y; ]
let mul w x y = Rtl.app (Rtl.opr "mul" [w;]) [x; y; ]
let mulux w x y = Rtl.app (Rtl.opr "mulux" [w;]) [x; y; ]
let mulx w x y = Rtl.app (Rtl.opr "mulx" [w;]) [x; y; ]
let mul_overflows w x y = Rtl.app (Rtl.opr "mul_overflows" [w;]) [x; y; ]
let mulu_overflows w x y = Rtl.app (Rtl.opr "mulu_overflows" [w;]) [x; y; ]
let mzero w = Rtl.app (Rtl.opr "mzero" [w;]) []
let ne w x y = Rtl.app (Rtl.opr "ne" [w;]) [x; y; ]
let neg w x = Rtl.app (Rtl.opr "neg" [w;]) [x; ]
let not x = Rtl.app (Rtl.opr "not" []) [x; ]
let (or) w x y = Rtl.app (Rtl.opr "or" [w;]) [x; y; ]
let pinf w = Rtl.app (Rtl.opr "pinf" [w;]) []
let popcnt w x = Rtl.app (Rtl.opr "popcnt" [w;]) [x; ]
let pzero w = Rtl.app (Rtl.opr "pzero" [w;]) []
let quot w x y = Rtl.app (Rtl.opr "quot" [w;]) [x; y; ]
let quot_overflows w x y = Rtl.app (Rtl.opr "quot_overflows" [w;]) [x; y; ]
let rem w x y = Rtl.app (Rtl.opr "rem" [w;]) [x; y; ]
let rotl w x y = Rtl.app (Rtl.opr "rotl" [w;]) [x; y; ]
let rotr w x y = Rtl.app (Rtl.opr "rotr" [w;]) [x; y; ]
let round_down = Rtl.app (Rtl.opr "round_down" []) []
let round_nearest = Rtl.app (Rtl.opr "round_nearest" []) []
let round_up = Rtl.app (Rtl.opr "round_up" []) []
let round_zero = Rtl.app (Rtl.opr "round_zero" []) []
let shl w x y = Rtl.app (Rtl.opr "shl" [w;]) [x; y; ]
let shra w x y = Rtl.app (Rtl.opr "shra" [w;]) [x; y; ]
let shrl w x y = Rtl.app (Rtl.opr "shrl" [w;]) [x; y; ]
let sub w x y = Rtl.app (Rtl.opr "sub" [w;]) [x; y; ]
let subb w x y z = Rtl.app (Rtl.opr "subb" [w;]) [x; y; z; ]
let sub_overflows w x y = Rtl.app (Rtl.opr "sub_overflows" [w;]) [x; y; ]
let sx w w' x = Rtl.app (Rtl.opr "sx" [w;w';]) [x; ]
let unordered = Rtl.app (Rtl.opr "unordered" []) []
let xor w x y = Rtl.app (Rtl.opr "xor" [w;]) [x; y; ]
let zx w w' x = Rtl.app (Rtl.opr "zx" [w;w';]) [x; ]
let bitExtract w w' x y = Rtl.app (Rtl.opr "bitExtract" [w;w';]) [x; y; ]
let bitInsert w w' x y z = Rtl.app (Rtl.opr "bitInsert" [w;w';]) [x; y; z; ]
let bitTransfer w x y z u v = Rtl.app (Rtl.opr "bitTransfer" [w;]) [x; y; z; u; v; ]
@ 
<<type signatures for applying standard operators>>=
val _NaN : width -> width -> exp -> exp
val add : width -> exp -> exp -> exp
val addc : width -> exp -> exp -> exp -> exp
val add_overflows : width -> exp -> exp -> exp
val _and : width -> exp -> exp -> exp
val bit : exp -> exp
val bool : exp -> exp
val borrow : width -> exp -> exp -> exp -> exp
val carry : width -> exp -> exp -> exp -> exp
val com : width -> exp -> exp
val conjoin : exp -> exp -> exp
val disjoin : exp -> exp -> exp
val div : width -> exp -> exp -> exp
val div_overflows : width -> exp -> exp -> exp
val divu : width -> exp -> exp -> exp
val eq : width -> exp -> exp -> exp
val f2f : width -> width -> exp -> exp -> exp
val f2f_implicit_round : width -> width -> exp -> exp
val f2i : width -> width -> exp -> exp -> exp
val fabs : width -> exp -> exp
val fadd : width -> exp -> exp -> exp -> exp
val fcmp : width -> exp -> exp -> exp
val fdiv : width -> exp -> exp -> exp -> exp
val feq : width -> exp -> exp -> exp
val fge : width -> exp -> exp -> exp
val fgt : width -> exp -> exp -> exp
val fle : width -> exp -> exp -> exp
val float_eq : exp
val float_gt : exp
val float_lt : exp
val flt : width -> exp -> exp -> exp
val fmul : width -> exp -> exp -> exp -> exp
val fmulx : width -> exp -> exp -> exp
val fne : width -> exp -> exp -> exp
val fneg : width -> exp -> exp
val fordered : width -> exp -> exp -> exp
val fsqrt : width -> exp -> exp -> exp
val fsub : width -> exp -> exp -> exp -> exp
val funordered : width -> exp -> exp -> exp
val ge : width -> exp -> exp -> exp
val geu : width -> exp -> exp -> exp
val gt : width -> exp -> exp -> exp
val gtu : width -> exp -> exp -> exp
val i2f : width -> width -> exp -> exp -> exp
val le : width -> exp -> exp -> exp
val leu : width -> exp -> exp -> exp
val lobits : width -> width -> exp -> exp
val lt : width -> exp -> exp -> exp
val ltu : width -> exp -> exp -> exp
val minf : width -> exp
val ( mod ) : width -> exp -> exp -> exp
val modu : width -> exp -> exp -> exp
val mul : width -> exp -> exp -> exp
val mulux : width -> exp -> exp -> exp
val mulx : width -> exp -> exp -> exp
val mul_overflows : width -> exp -> exp -> exp
val mulu_overflows : width -> exp -> exp -> exp
val mzero : width -> exp
val ne : width -> exp -> exp -> exp
val neg : width -> exp -> exp
val not : exp -> exp
val ( or ) : width -> exp -> exp -> exp
val pinf : width -> exp
val popcnt : width -> exp -> exp
val pzero : width -> exp
val quot : width -> exp -> exp -> exp
val quot_overflows : width -> exp -> exp -> exp
val rem : width -> exp -> exp -> exp
val rotl : width -> exp -> exp -> exp
val rotr : width -> exp -> exp -> exp
val round_down : exp
val round_nearest : exp
val round_up : exp
val round_zero : exp
val shl : width -> exp -> exp -> exp
val shra : width -> exp -> exp -> exp
val shrl : width -> exp -> exp -> exp
val sub : width -> exp -> exp -> exp
val subb : width -> exp -> exp -> exp -> exp
val sub_overflows : width -> exp -> exp -> exp
val sx : width -> width -> exp -> exp
val unordered : exp
val xor : width -> exp -> exp -> exp
val zx : width -> width -> exp -> exp
@ 
\subsection{C~code to test division rules}

There seem to be lots of ways to implement division.
Some of them don't work, especially if we are careless about overflow.
Here's a useful test program.
<<divtest.c>>=
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

int mosml_div(int x, int y) {
  assert(y != 0);
  if( y < 0 ) { x = - x; y = -y; }
  if( x >= 0 ) { return x / y; }
  else
        { x = - x;
          if( x % y == 0 )
            return - (x /y);
          else
            return - (x / y) - 1;
        }
}

// incorrect 
int simplediv(int x, int y) {
      if( y < 0 ) { x = - x; y = -y; }
      if( x >= 0 )
        { return x / y; }
      else
        { return - (- x + (y - 1)) / y; // can fail because of overflow
        }
}


<<divtest.c>>=
int njdiv(int x, int y) {
   if (y >= 0) {
     if (x >= 0) {
       return x / y;
     } else {
       return (x+1) / y - 1;
     }
   } else {
     if (x > 0) {
       return (x-1) / y - 1;
     } else {
       return x / y;
     }
   }
}
<<rewrite.ml>>=
let div2 w ~dst x y =
  let return e = DG.Rtl (R.store dst e w) in
  let one  = O.signed w 1 in
  let zero = O.signed w 0 in
  DG.If (DG.cond (O.ge w y zero),
         DG.If (DG.cond (O.ge w x zero),
                return (O.quot w x y),
                return (O.sub w (O.quot w (O.add w x one) y) one)),
         DG.If (DG.cond (O.gt w x zero),
                return (O.sub w (O.quot w (O.sub w x one) y) one),
                return (O.quot w x y)))

<<divtest.c>>=
int njfast (int x, int y) {
   if ((x ^ y) >= 0) {
     return x / y;
   } else if (y >= 0) {
     return (x+1) / y - 1;
   } else if (x == 0) {
     return 0;
   } else {
     return (x-1) / y - 1;
   }
}
<<rewrite.ml>>=
let div1_3 w ~dst x y =
  let return e = DG.Rtl (R.store dst e w) in
  let one  = O.signed w 1 in
  let zero = O.signed w 0 in
  DG.If (DG.cond (O.ge w (O.xor w x y) zero),
         return (O.quot w x y),
  DG.If (DG.cond (O.ge w y zero),
         return (O.sub w (O.quot w (O.add w x one) y) one),
  DG.If (DG.cond (O.eq w x zero),
         return zero,
         return (O.sub w (O.quot w (O.sub w x one) y) one))))

<<divtest.c>>=
int m3div (int x, int y) {
  int rem = x % y;
  int quot = x / y;
  if ((x ^ y) < 0 && rem != 0) {
    return quot - 1;
  } else {
    return quot;
  }
}
<<rewrite.ml>>=
let div' w ~dst x y ~quot ~rem =
  let return e = DG.Rtl (R.store dst e w) in
  DG.If (DG.cond (O.conjoin (O.lt w (O.xor w x y) (O.signed w 0))
                            (O.ne w rem (O.signed w 0))),
         return (O.sub w quot (O.signed w 1)),
         return quot)

<<divtest.c>>=
#define nzsign(Y) ((Y) > 0 ? 1 : -1)

// incorrect
int signdiv(int x, int y) {
  if ((x ^ y) >= 0) {
    return x / y;
  } else {
    return (x - (y - nzsign(y))) / y;   // can fail --- overflow
  }
}

// incorrect
int rounddiv(int x, int y) {
  if ((x ^ y) >= 0) {
    return x / y;
  } else if (y < 0) {
    return (x - y - 1) / y; // can fail --- overflow
  } else {
    return (x - y + 1) / y; // can fail --- overflow
  }
}


struct test { int (*fun)(int, int); const char *name; };

struct test tests[] = {
  { mosml_div, "mosml_div" },
    // { simplediv, "simplediv" },
  { njdiv, "njdiv" },
  { njfast, "njfast" },
  { m3div, "m3div" },
    //  { signdiv, "signdiv" },
    //  { rounddiv, "rounddiv" },
};

int divtest(int x, int y) {
  int i, q;
  int failcount = 0;
  assert(y != 0);

  q = mosml_div(x, y);
  for (i = 0; i < sizeof(tests) / sizeof(tests[0]); i++) {
    int tq = tests[i].fun(x, y);
    printf("%12s(%3d, %3d) == %3d %s\n", tests[i].name, x, y, tq,
           tq == q ? "" : "<====== ERROR");
    if (tq != q) failcount++;
  }
  return failcount;
}

int randtest(unsigned n) {
  int *xs, *ys, i, rc;
  FILE *rand;
  int fails = 0;
  xs = malloc(n * sizeof(*xs));
  ys = malloc(n * sizeof(*ys));
  assert (xs != NULL && ys != NULL);
  rand = fopen("/dev/urandom", "r");
  if (!rand) {
    perror("Cannot open /dev/urandom --- need a Linux box?");
    exit(1);
  }
  rc = fread(xs, sizeof(*xs), n, rand);
  assert(n == rc);
  rc = fread(ys, sizeof(*ys), n, rand);
  assert(n == rc);
  fclose(rand);
  for (i = 0; i < n; i++)
    if (ys[i])
      fails += divtest(xs[i], ys[i]);
  return fails;
}

  

main() {
  int x, y;
  int fails = 0;
  printf("%d\n", njdiv(1606571677, -684103929));
  for (x = -10; x <= 10; x++)
    for (y = -10; y <= 10; y++)
      if (y != 0)
        fails += divtest(x, y);
  fails += randtest(500000);
  if (fails)
    printf("%d failures <====\n", fails);
  else
    printf("All tests passed.\n");
}
