% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon



\section{Small sets of bits}

We track the liveness of each individual bit in a register.
This module defines an efficient implementation of sets of bits,
provided the bits are numbered 0~through~63.

The signature is intended to be consistent with [[Set.S]] (though less
complete). 
<<bitset64.mli>>=
type elt = int   (* range 0..63 *)
type t           (* set of elements *)

val empty : t
val is_empty : t -> bool
val mem: elt -> t -> bool
val add: elt -> t -> t
val add_range: lsb:elt -> width:int -> t -> t
val singleton: elt -> t
val single_range: lsb:elt -> width:int -> t
val remove: elt -> t -> t
val remove_range: lsb:elt -> width:int -> t -> t
val union: t -> t -> t
val inter: t -> t -> t
val diff: t -> t -> t
val subset: t -> t -> bool
val eq: t -> t -> bool
val overlap: t -> t -> bool (* nonempty intersection *)
@ 
\section{Implementation}

Bit vectors!
<<bitset64.ml>>=
module B  = Bits
module BO = Bits.Ops
type elt = int
type t = Bits.bits

let w = 64

let int i = B.U.of_int i w
let one = int 1
let mask = BO.com (B.zero w)

let empty = B.zero w
let is_empty = B.is_zero
let inter = BO.and'
let union = BO.or'
let diff s s' = BO.and' s (BO.com s')

let overlap s s' = not (is_empty (inter s s'))

let singleton i = (assert (i < w); BO.shl one (int i))

let mem i s = not (B.is_zero (BO.and' (BO.shl one (int i)) s))
let add i s = union (singleton i) s

let single_range ~lsb ~width =
  assert (lsb + width < w);
  BO.shl (BO.shrl mask (int (w-width))) (int lsb)

let add_range ~lsb ~width s = union (single_range ~lsb ~width) s

let remove i s = diff s (singleton i)
let remove_range ~lsb ~width s = diff s (single_range ~lsb ~width)

let eq = B.eq
let subset s s' = B.eq (inter s s') s
